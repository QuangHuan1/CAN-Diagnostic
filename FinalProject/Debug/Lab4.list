
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08005ebc  08005ebc  00015ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800604c  0800604c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800604c  0800604c  0001604c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006054  08006054  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006054  08006054  00016054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006058  08006058  00016058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800605c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000025c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002cc  200002cc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010f9f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020e8  00000000  00000000  0003103f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  00033128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e68  00000000  00000000  00034058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020e12  00000000  00000000  00034ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001060a  00000000  00000000  00055cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0c3c  00000000  00000000  000662dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00136f18  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004998  00000000  00000000  00136f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ea4 	.word	0x08005ea4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005ea4 	.word	0x08005ea4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <showData>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CANTP(CANTPMessage *canMessage, CANTPCanInit *Node);


void showData(uint8_t *frame){
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	printf("Joystick Data: ");
 800057c:	480d      	ldr	r0, [pc, #52]	; (80005b4 <showData+0x40>)
 800057e:	f004 fd0f 	bl	8004fa0 <iprintf>
    for (uint8_t i = 0; i < 6; i++)
 8000582:	2300      	movs	r3, #0
 8000584:	73fb      	strb	r3, [r7, #15]
 8000586:	e00a      	b.n	800059e <showData+0x2a>
        {
            printf(" 0x%X", *(frame + i));
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	4413      	add	r3, r2
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4619      	mov	r1, r3
 8000592:	4809      	ldr	r0, [pc, #36]	; (80005b8 <showData+0x44>)
 8000594:	f004 fd04 	bl	8004fa0 <iprintf>
    for (uint8_t i = 0; i < 6; i++)
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	3301      	adds	r3, #1
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	7bfb      	ldrb	r3, [r7, #15]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d9f1      	bls.n	8000588 <showData+0x14>
        }
    printf("\n");
 80005a4:	200a      	movs	r0, #10
 80005a6:	f004 fd13 	bl	8004fd0 <putchar>
}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	08005ebc 	.word	0x08005ebc
 80005b8:	08005ecc 	.word	0x08005ecc

080005bc <receiveSingleFrame>:

void receiveSingleFrame(CANTPMessage *receiveMessage, uint8_t *CAN_RXData){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]

	receiveMessage->serviceInfo.SID = CAN_RXData[1];
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	785a      	ldrb	r2, [r3, #1]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	701a      	strb	r2, [r3, #0]
	receiveMessage->serviceInfo.DID[0] = CAN_RXData[2];
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	789a      	ldrb	r2, [r3, #2]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	705a      	strb	r2, [r3, #1]
	receiveMessage->serviceInfo.DID[1] = CAN_RXData[3];
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	78da      	ldrb	r2, [r3, #3]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	709a      	strb	r2, [r3, #2]
	receiveMessage->dataLength = 0;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	80da      	strh	r2, [r3, #6]
    for (uint8_t i = 4; i <= 7; i++)
 80005e4:	2304      	movs	r3, #4
 80005e6:	73fb      	strb	r3, [r7, #15]
 80005e8:	e00e      	b.n	8000608 <receiveSingleFrame+0x4c>
    {
        if(CAN_RXData[i] != 0x55){
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	4413      	add	r3, r2
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b55      	cmp	r3, #85	; 0x55
 80005f4:	d00c      	beq.n	8000610 <receiveSingleFrame+0x54>
        	receiveMessage->dataLength += 1;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	88db      	ldrh	r3, [r3, #6]
 80005fa:	3301      	adds	r3, #1
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	80da      	strh	r2, [r3, #6]
    for (uint8_t i = 4; i <= 7; i++)
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	3301      	adds	r3, #1
 8000606:	73fb      	strb	r3, [r7, #15]
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	2b07      	cmp	r3, #7
 800060c:	d9ed      	bls.n	80005ea <receiveSingleFrame+0x2e>
 800060e:	e000      	b.n	8000612 <receiveSingleFrame+0x56>
        }
        else{
        	break;
 8000610:	bf00      	nop
        }
    }
    memcpy(receiveMessage->data, &CAN_RXData[4],  receiveMessage->dataLength);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	68d8      	ldr	r0, [r3, #12]
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	1d19      	adds	r1, r3, #4
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	88db      	ldrh	r3, [r3, #6]
 800061e:	461a      	mov	r2, r3
 8000620:	f004 fbc8 	bl	8004db4 <memcpy>
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <receiveFirstFrame>:


void receiveFirstFrame( CANTPMessage *receiveMessage, uint8_t *CANDataRX){
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]

    uint16_t dataLength = (CANDataRX[0] & 0x0F);
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b29b      	uxth	r3, r3
 800063c:	f003 030f 	and.w	r3, r3, #15
 8000640:	81fb      	strh	r3, [r7, #14]
    receiveMessage->dataLength = dataLength << 8 | CANDataRX[1];
 8000642:	89fb      	ldrh	r3, [r7, #14]
 8000644:	021b      	lsls	r3, r3, #8
 8000646:	b21a      	sxth	r2, r3
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	3301      	adds	r3, #1
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b21b      	sxth	r3, r3
 8000650:	4313      	orrs	r3, r2
 8000652:	b21b      	sxth	r3, r3
 8000654:	b29a      	uxth	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	80da      	strh	r2, [r3, #6]
    receiveMessage->serviceInfo.SID = CANDataRX[2];
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	789a      	ldrb	r2, [r3, #2]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	701a      	strb	r2, [r3, #0]
    receiveMessage->serviceInfo.DID[0] = CANDataRX[3];
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	78da      	ldrb	r2, [r3, #3]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	705a      	strb	r2, [r3, #1]
    receiveMessage->serviceInfo.DID[1] = CANDataRX[4];
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	791a      	ldrb	r2, [r3, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	709a      	strb	r2, [r3, #2]
    receiveMessage->bufferLength = 3;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	2203      	movs	r2, #3
 8000676:	809a      	strh	r2, [r3, #4]
    receiveMessage->offset = 3;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2203      	movs	r2, #3
 800067c:	721a      	strb	r2, [r3, #8]
    receiveMessage->data = (uint8_t*)malloc(receiveMessage->dataLength);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	88db      	ldrh	r3, [r3, #6]
 8000682:	4618      	mov	r0, r3
 8000684:	f004 fb8e 	bl	8004da4 <malloc>
 8000688:	4603      	mov	r3, r0
 800068a:	461a      	mov	r2, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	60da      	str	r2, [r3, #12]
    memcpy(receiveMessage->data, &CANDataRX[5], 3);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	68d8      	ldr	r0, [r3, #12]
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	3305      	adds	r3, #5
 8000698:	2203      	movs	r2, #3
 800069a:	4619      	mov	r1, r3
 800069c:	f004 fb8a 	bl	8004db4 <memcpy>
}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <receiveConsecutiveFrame>:

void receiveConsecutiveFrame(CANTPMessage *receiveMessage, uint8_t *CANDataRX){
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]

    for (uint8_t i = 1; i <= 7; i++)
 80006b2:	2301      	movs	r3, #1
 80006b4:	73fb      	strb	r3, [r7, #15]
 80006b6:	e018      	b.n	80006ea <receiveConsecutiveFrame+0x42>
    {
        if(CANDataRX[i] != 0x55){
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b55      	cmp	r3, #85	; 0x55
 80006c2:	d00f      	beq.n	80006e4 <receiveConsecutiveFrame+0x3c>
        	receiveMessage->data[receiveMessage->bufferLength] = CANDataRX[i];
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	683a      	ldr	r2, [r7, #0]
 80006c8:	441a      	add	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	6879      	ldr	r1, [r7, #4]
 80006d0:	8889      	ldrh	r1, [r1, #4]
 80006d2:	440b      	add	r3, r1
 80006d4:	7812      	ldrb	r2, [r2, #0]
 80006d6:	701a      	strb	r2, [r3, #0]
        	receiveMessage->bufferLength += 1;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	889b      	ldrh	r3, [r3, #4]
 80006dc:	3301      	adds	r3, #1
 80006de:	b29a      	uxth	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	809a      	strh	r2, [r3, #4]
    for (uint8_t i = 1; i <= 7; i++)
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	3301      	adds	r3, #1
 80006e8:	73fb      	strb	r3, [r7, #15]
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	2b07      	cmp	r3, #7
 80006ee:	d9e3      	bls.n	80006b8 <receiveConsecutiveFrame+0x10>
        }
    }
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
	...

08000700 <sendSingleFrame>:

void sendSingleFrame(CANTPMessage *sendMessage, CANTPCanInit *can){
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]

	CANTPSingleFrame singleFrame;
    CANTPControlInformation PCI_SINGLE = PCI_SINGLE_FRAME;
 800070a:	2300      	movs	r3, #0
 800070c:	77bb      	strb	r3, [r7, #30]
    uint8_t payloadOffset = sizeof(sendMessage->serviceInfo);
 800070e:	2303      	movs	r3, #3
 8000710:	77fb      	strb	r3, [r7, #31]
    uint8_t NAValue[7] = {0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55};
 8000712:	4a2c      	ldr	r2, [pc, #176]	; (80007c4 <sendSingleFrame+0xc4>)
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	e892 0003 	ldmia.w	r2, {r0, r1}
 800071c:	6018      	str	r0, [r3, #0]
 800071e:	3304      	adds	r3, #4
 8000720:	8019      	strh	r1, [r3, #0]
 8000722:	3302      	adds	r3, #2
 8000724:	0c0a      	lsrs	r2, r1, #16
 8000726:	701a      	strb	r2, [r3, #0]

	singleFrame.indicate = PCI_SINGLE << 4 | sendMessage->bufferLength;
 8000728:	7fbb      	ldrb	r3, [r7, #30]
 800072a:	011b      	lsls	r3, r3, #4
 800072c:	b25a      	sxtb	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	889b      	ldrh	r3, [r3, #4]
 8000732:	b25b      	sxtb	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b25b      	sxtb	r3, r3
 8000738:	b2db      	uxtb	r3, r3
 800073a:	753b      	strb	r3, [r7, #20]
    memcpy(&singleFrame.payload,&sendMessage->serviceInfo, payloadOffset);
 800073c:	6879      	ldr	r1, [r7, #4]
 800073e:	7ffa      	ldrb	r2, [r7, #31]
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	3301      	adds	r3, #1
 8000746:	4618      	mov	r0, r3
 8000748:	f004 fb34 	bl	8004db4 <memcpy>

    if(sendMessage->dataLength != 0){
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	88db      	ldrh	r3, [r3, #6]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d012      	beq.n	800077a <sendSingleFrame+0x7a>
    		memcpy(&singleFrame.payload[payloadOffset],&sendMessage->data, sendMessage->dataLength);
 8000754:	7ffb      	ldrb	r3, [r7, #31]
 8000756:	f107 0214 	add.w	r2, r7, #20
 800075a:	4413      	add	r3, r2
 800075c:	1c58      	adds	r0, r3, #1
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f103 010c 	add.w	r1, r3, #12
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	88db      	ldrh	r3, [r3, #6]
 8000768:	461a      	mov	r2, r3
 800076a:	f004 fb23 	bl	8004db4 <memcpy>
    		payloadOffset += sendMessage->dataLength;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	88db      	ldrh	r3, [r3, #6]
 8000772:	b2da      	uxtb	r2, r3
 8000774:	7ffb      	ldrb	r3, [r7, #31]
 8000776:	4413      	add	r3, r2
 8000778:	77fb      	strb	r3, [r7, #31]
	}
    memcpy(&singleFrame.payload[payloadOffset],&NAValue, 7 - payloadOffset);
 800077a:	7ffb      	ldrb	r3, [r7, #31]
 800077c:	f107 0214 	add.w	r2, r7, #20
 8000780:	4413      	add	r3, r2
 8000782:	1c58      	adds	r0, r3, #1
 8000784:	7ffb      	ldrb	r3, [r7, #31]
 8000786:	f1c3 0307 	rsb	r3, r3, #7
 800078a:	461a      	mov	r2, r3
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	f004 fb0f 	bl	8004db4 <memcpy>

//    visualizeFrame(&singleFrame);

	 memcpy(can->TxData, &singleFrame, sizeof(singleFrame));
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	335c      	adds	r3, #92	; 0x5c
 800079a:	461a      	mov	r2, r3
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	cb03      	ldmia	r3!, {r0, r1}
 80007a2:	6010      	str	r0, [r2, #0]
 80007a4:	6051      	str	r1, [r2, #4]
	 HAL_CAN_AddTxMessage(&(can->hcan), &(can->TxHeader), can->TxData, &(can->TxMailbox));
 80007a6:	6838      	ldr	r0, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	336c      	adds	r3, #108	; 0x6c
 80007b8:	f001 fef0 	bl	800259c <HAL_CAN_AddTxMessage>
}
 80007bc:	bf00      	nop
 80007be:	3720      	adds	r7, #32
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	08005ed4 	.word	0x08005ed4

080007c8 <sendFirstFrame>:

void sendFirstFrame(CANTPMessage *sendMessage, CANTPCanInit *can){
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]

    CANTPFirstFrame firstFrame;
    CANTPControlInformation PCI_FIRST = PCI_FIRST_FRAME;
 80007d2:	2310      	movs	r3, #16
 80007d4:	75fb      	strb	r3, [r7, #23]

    firstFrame.indicate = PCI_FIRST | (sendMessage->bufferLength >> 8);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	889b      	ldrh	r3, [r3, #4]
 80007da:	0a1b      	lsrs	r3, r3, #8
 80007dc:	b29b      	uxth	r3, r3
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	7dfb      	ldrb	r3, [r7, #23]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	733b      	strb	r3, [r7, #12]
    firstFrame.dataLength = sendMessage->bufferLength;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	889b      	ldrh	r3, [r3, #4]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	737b      	strb	r3, [r7, #13]
    firstFrame.SID = sendMessage->serviceInfo.SID;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	73bb      	strb	r3, [r7, #14]
    memcpy(&firstFrame.DID, &sendMessage->serviceInfo.DID, 2);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3301      	adds	r3, #1
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	f8a7 300f 	strh.w	r3, [r7, #15]
    memcpy(&firstFrame.payload, sendMessage->data, 3);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	68da      	ldr	r2, [r3, #12]
 8000806:	f107 0311 	add.w	r3, r7, #17
 800080a:	8811      	ldrh	r1, [r2, #0]
 800080c:	7892      	ldrb	r2, [r2, #2]
 800080e:	8019      	strh	r1, [r3, #0]
 8000810:	709a      	strb	r2, [r3, #2]
    sendMessage->offset = 3;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2203      	movs	r2, #3
 8000816:	721a      	strb	r2, [r3, #8]
    memcpy(can->TxData, &firstFrame, sizeof(firstFrame));
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	335c      	adds	r3, #92	; 0x5c
 800081c:	461a      	mov	r2, r3
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	cb03      	ldmia	r3!, {r0, r1}
 8000824:	6010      	str	r0, [r2, #0]
 8000826:	6051      	str	r1, [r2, #4]
    HAL_CAN_AddTxMessage(&(can->hcan), &(can->TxHeader), can->TxData, &(can->TxMailbox));
 8000828:	6838      	ldr	r0, [r7, #0]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	336c      	adds	r3, #108	; 0x6c
 800083a:	f001 feaf 	bl	800259c <HAL_CAN_AddTxMessage>
}
 800083e:	bf00      	nop
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <sendConsecutiveFrame>:

void sendConsecutiveFrame(CANTPMessage *sendMessage, CANTPCanInit *can){
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
 8000850:	6039      	str	r1, [r7, #0]

    CANTPConsecutiveFrame consecutiveFrame;
    CANTPControlInformation PCI_CONSECUTIVE = PCI_CONSECUTIVE_FRAME;
 8000852:	2320      	movs	r3, #32
 8000854:	773b      	strb	r3, [r7, #28]
    uint8_t numFrame = (sendMessage->bufferLength + 1)/7 + (((sendMessage->bufferLength + 1)%7 == 0) ? 0:1);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	889b      	ldrh	r3, [r3, #4]
 800085a:	3301      	adds	r3, #1
 800085c:	4a3c      	ldr	r2, [pc, #240]	; (8000950 <sendConsecutiveFrame+0x108>)
 800085e:	fb82 1203 	smull	r1, r2, r2, r3
 8000862:	441a      	add	r2, r3
 8000864:	1092      	asrs	r2, r2, #2
 8000866:	17db      	asrs	r3, r3, #31
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	b2d8      	uxtb	r0, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	889b      	ldrh	r3, [r3, #4]
 8000870:	1c5a      	adds	r2, r3, #1
 8000872:	4b37      	ldr	r3, [pc, #220]	; (8000950 <sendConsecutiveFrame+0x108>)
 8000874:	fb83 1302 	smull	r1, r3, r3, r2
 8000878:	4413      	add	r3, r2
 800087a:	1099      	asrs	r1, r3, #2
 800087c:	17d3      	asrs	r3, r2, #31
 800087e:	1ac9      	subs	r1, r1, r3
 8000880:	460b      	mov	r3, r1
 8000882:	00db      	lsls	r3, r3, #3
 8000884:	1a5b      	subs	r3, r3, r1
 8000886:	1ad1      	subs	r1, r2, r3
 8000888:	2900      	cmp	r1, #0
 800088a:	bf14      	ite	ne
 800088c:	2301      	movne	r3, #1
 800088e:	2300      	moveq	r3, #0
 8000890:	b2db      	uxtb	r3, r3
 8000892:	4403      	add	r3, r0
 8000894:	76fb      	strb	r3, [r7, #27]
    uint8_t sequenceNumber = 0x01;
 8000896:	2301      	movs	r3, #1
 8000898:	77fb      	strb	r3, [r7, #31]
    uint8_t *dataTemp = sendMessage->data;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	617b      	str	r3, [r7, #20]

    for (uint8_t i = 0; i < numFrame - 1; i++)
 80008a0:	2300      	movs	r3, #0
 80008a2:	77bb      	strb	r3, [r7, #30]
 80008a4:	e049      	b.n	800093a <sendConsecutiveFrame+0xf2>
    {

        if(sequenceNumber == 0x0F) sequenceNumber = 0x00;
 80008a6:	7ffb      	ldrb	r3, [r7, #31]
 80008a8:	2b0f      	cmp	r3, #15
 80008aa:	d101      	bne.n	80008b0 <sendConsecutiveFrame+0x68>
 80008ac:	2300      	movs	r3, #0
 80008ae:	77fb      	strb	r3, [r7, #31]
        consecutiveFrame.indicate = PCI_CONSECUTIVE | sequenceNumber;
 80008b0:	7f3a      	ldrb	r2, [r7, #28]
 80008b2:	7ffb      	ldrb	r3, [r7, #31]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	733b      	strb	r3, [r7, #12]
        sequenceNumber += 0x01;
 80008ba:	7ffb      	ldrb	r3, [r7, #31]
 80008bc:	3301      	adds	r3, #1
 80008be:	77fb      	strb	r3, [r7, #31]

        for (uint8_t j = 0; j < 7; j++)
 80008c0:	2300      	movs	r3, #0
 80008c2:	777b      	strb	r3, [r7, #29]
 80008c4:	e020      	b.n	8000908 <sendConsecutiveFrame+0xc0>
        {
            consecutiveFrame.payload[j] = dataTemp[sendMessage->offset];
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	7a1b      	ldrb	r3, [r3, #8]
 80008ca:	461a      	mov	r2, r3
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	441a      	add	r2, r3
 80008d0:	7f7b      	ldrb	r3, [r7, #29]
 80008d2:	7812      	ldrb	r2, [r2, #0]
 80008d4:	3320      	adds	r3, #32
 80008d6:	443b      	add	r3, r7
 80008d8:	f803 2c13 	strb.w	r2, [r3, #-19]
            if(sendMessage->offset >= sendMessage->dataLength){
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	7a1b      	ldrb	r3, [r3, #8]
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	88db      	ldrh	r3, [r3, #6]
 80008e6:	429a      	cmp	r2, r3
 80008e8:	d305      	bcc.n	80008f6 <sendConsecutiveFrame+0xae>
                consecutiveFrame.payload[j] = 0x55;
 80008ea:	7f7b      	ldrb	r3, [r7, #29]
 80008ec:	3320      	adds	r3, #32
 80008ee:	443b      	add	r3, r7
 80008f0:	2255      	movs	r2, #85	; 0x55
 80008f2:	f803 2c13 	strb.w	r2, [r3, #-19]
            }
            sendMessage->offset += 0x01;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	7a1b      	ldrb	r3, [r3, #8]
 80008fa:	3301      	adds	r3, #1
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	721a      	strb	r2, [r3, #8]
        for (uint8_t j = 0; j < 7; j++)
 8000902:	7f7b      	ldrb	r3, [r7, #29]
 8000904:	3301      	adds	r3, #1
 8000906:	777b      	strb	r3, [r7, #29]
 8000908:	7f7b      	ldrb	r3, [r7, #29]
 800090a:	2b06      	cmp	r3, #6
 800090c:	d9db      	bls.n	80008c6 <sendConsecutiveFrame+0x7e>
        }

//        visualizeFrame(&consecutiveFrame);

        memcpy(&(can->TxData), &consecutiveFrame, sizeof(consecutiveFrame));
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	335c      	adds	r3, #92	; 0x5c
 8000912:	461a      	mov	r2, r3
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	cb03      	ldmia	r3!, {r0, r1}
 800091a:	6010      	str	r0, [r2, #0]
 800091c:	6051      	str	r1, [r2, #4]
        HAL_CAN_AddTxMessage(&(can->hcan), &(can->TxHeader), can->TxData, &(can->TxMailbox));
 800091e:	6838      	ldr	r0, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	336c      	adds	r3, #108	; 0x6c
 8000930:	f001 fe34 	bl	800259c <HAL_CAN_AddTxMessage>
    for (uint8_t i = 0; i < numFrame - 1; i++)
 8000934:	7fbb      	ldrb	r3, [r7, #30]
 8000936:	3301      	adds	r3, #1
 8000938:	77bb      	strb	r3, [r7, #30]
 800093a:	7fba      	ldrb	r2, [r7, #30]
 800093c:	7efb      	ldrb	r3, [r7, #27]
 800093e:	3b01      	subs	r3, #1
 8000940:	429a      	cmp	r2, r3
 8000942:	dbb0      	blt.n	80008a6 <sendConsecutiveFrame+0x5e>
    }
}
 8000944:	bf00      	nop
 8000946:	bf00      	nop
 8000948:	3720      	adds	r7, #32
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	92492493 	.word	0x92492493

08000954 <sendFlowControlFrame>:

void sendFlowControlFrame(CANTPFlowStatus FLOW_STATUS, uint8_t BLOCK_SIZE, uint8_t STIME, CANTPCanInit *can){
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	4603      	mov	r3, r0
 800095e:	71fb      	strb	r3, [r7, #7]
 8000960:	460b      	mov	r3, r1
 8000962:	71bb      	strb	r3, [r7, #6]
 8000964:	4613      	mov	r3, r2
 8000966:	717b      	strb	r3, [r7, #5]

    CANTPFlowControlFrame flowControlFrame;
    CANTPControlInformation PCI_FLOW_CONTROL = PCI_FLOW_CONTROL_FRAME;
 8000968:	2330      	movs	r3, #48	; 0x30
 800096a:	77fb      	strb	r3, [r7, #31]

    flowControlFrame.indicate = PCI_FLOW_CONTROL | FLOW_STATUS;
 800096c:	7ffa      	ldrb	r2, [r7, #31]
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	4313      	orrs	r3, r2
 8000972:	b2db      	uxtb	r3, r3
 8000974:	753b      	strb	r3, [r7, #20]
    flowControlFrame.blockSize = 0x00;
 8000976:	2300      	movs	r3, #0
 8000978:	757b      	strb	r3, [r7, #21]
    flowControlFrame.separationTime = 0x00;
 800097a:	2300      	movs	r3, #0
 800097c:	75bb      	strb	r3, [r7, #22]
    uint8_t NAValue[] = {0x55, 0x55, 0x55, 0x55, 0x55};
 800097e:	4a13      	ldr	r2, [pc, #76]	; (80009cc <sendFlowControlFrame+0x78>)
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000988:	6018      	str	r0, [r3, #0]
 800098a:	3304      	adds	r3, #4
 800098c:	7019      	strb	r1, [r3, #0]

    memcpy(&flowControlFrame.NA, &NAValue, sizeof(NAValue));
 800098e:	f107 0317 	add.w	r3, r7, #23
 8000992:	f107 020c 	add.w	r2, r7, #12
 8000996:	6810      	ldr	r0, [r2, #0]
 8000998:	6018      	str	r0, [r3, #0]
 800099a:	7912      	ldrb	r2, [r2, #4]
 800099c:	711a      	strb	r2, [r3, #4]
//    visualizeFrame(&flowControlFrame);

    memcpy(can->TxData, &flowControlFrame, sizeof(flowControlFrame));
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	335c      	adds	r3, #92	; 0x5c
 80009a2:	461a      	mov	r2, r3
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	cb03      	ldmia	r3!, {r0, r1}
 80009aa:	6010      	str	r0, [r2, #0]
 80009ac:	6051      	str	r1, [r2, #4]
    HAL_CAN_AddTxMessage(&(can->hcan), &(can->TxHeader), can->TxData, &(can->TxMailbox));
 80009ae:	6838      	ldr	r0, [r7, #0]
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	336c      	adds	r3, #108	; 0x6c
 80009c0:	f001 fdec 	bl	800259c <HAL_CAN_AddTxMessage>

}
 80009c4:	bf00      	nop
 80009c6:	3720      	adds	r7, #32
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	08005edc 	.word	0x08005edc

080009d0 <sendResponeFrame>:

void sendResponeFrame(CANTPService *ServiceInformation, CANTPCanInit *can){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]


	CANTPSingleFrame singleFrame;
	singleFrame.indicate = 0x07;
 80009da:	2307      	movs	r3, #7
 80009dc:	723b      	strb	r3, [r7, #8]
	singleFrame.payload[0] = ServiceInformation->SID;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	727b      	strb	r3, [r7, #9]
	singleFrame.payload[1] = ServiceInformation->DID[0]; // MSB DID
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	785b      	ldrb	r3, [r3, #1]
 80009e8:	72bb      	strb	r3, [r7, #10]
	singleFrame.payload[2] = ServiceInformation->DID[1]; //LSB DID
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	789b      	ldrb	r3, [r3, #2]
 80009ee:	72fb      	strb	r3, [r7, #11]
	singleFrame.payload[3] = 0x55;
 80009f0:	2355      	movs	r3, #85	; 0x55
 80009f2:	733b      	strb	r3, [r7, #12]
	singleFrame.payload[4] = 0x55;
 80009f4:	2355      	movs	r3, #85	; 0x55
 80009f6:	737b      	strb	r3, [r7, #13]
	singleFrame.payload[5] = 0x55;
 80009f8:	2355      	movs	r3, #85	; 0x55
 80009fa:	73bb      	strb	r3, [r7, #14]
	singleFrame.payload[6] = 0x55;
 80009fc:	2355      	movs	r3, #85	; 0x55
 80009fe:	73fb      	strb	r3, [r7, #15]

//	visualizeFrame(&singleFrame);
    memcpy(&(can->TxData), &singleFrame, sizeof(singleFrame));
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	335c      	adds	r3, #92	; 0x5c
 8000a04:	461a      	mov	r2, r3
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	cb03      	ldmia	r3!, {r0, r1}
 8000a0c:	6010      	str	r0, [r2, #0]
 8000a0e:	6051      	str	r1, [r2, #4]
    HAL_CAN_AddTxMessage(&(can->hcan), &(can->TxHeader), can->TxData, &(can->TxMailbox));
 8000a10:	6838      	ldr	r0, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	336c      	adds	r3, #108	; 0x6c
 8000a22:	f001 fdbb 	bl	800259c <HAL_CAN_AddTxMessage>
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <HAL_CAN_RxFifo0MsgPendingCallback>:
// Handle Single Frame in CallbackFunction
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &ECU.RxHeader, ECU.RxData);
 8000a38:	4b4c      	ldr	r3, [pc, #304]	; (8000b6c <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8000a3a:	4a4d      	ldr	r2, [pc, #308]	; (8000b70 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f001 fe87 	bl	8002752 <HAL_CAN_GetRxMessage>
	if (ECU.RxHeader.DLC == 8)
 8000a44:	4b4b      	ldr	r3, [pc, #300]	; (8000b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a48:	2b08      	cmp	r3, #8
 8000a4a:	f040 8086 	bne.w	8000b5a <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
	{
		uint8_t frameType = ECU.RxData[0] >> 4;
 8000a4e:	4b49      	ldr	r3, [pc, #292]	; (8000b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000a50:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000a54:	091b      	lsrs	r3, r3, #4
 8000a56:	77fb      	strb	r3, [r7, #31]
		switch(frameType){
 8000a58:	7ffb      	ldrb	r3, [r7, #31]
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d87f      	bhi.n	8000b5e <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
 8000a5e:	a201      	add	r2, pc, #4	; (adr r2, 8000a64 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a64:	08000a75 	.word	0x08000a75
 8000a68:	08000b0b 	.word	0x08000b0b
 8000a6c:	08000b33 	.word	0x08000b33
 8000a70:	08000b5f 	.word	0x08000b5f
			case 0x0:
			{
				if(ECU.RxData[1] == 0x22){
 8000a74:	4b3f      	ldr	r3, [pc, #252]	; (8000b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000a76:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000a7a:	2b22      	cmp	r3, #34	; 0x22
 8000a7c:	d131      	bne.n	8000ae2 <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
					HAL_ADC_Start(&hadc1);
 8000a7e:	483e      	ldr	r0, [pc, #248]	; (8000b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000a80:	f001 f86e 	bl	8001b60 <HAL_ADC_Start>
					CANTPMessage message;
					uint16_t ADC_val = HAL_ADC_GetValue(&hadc1);
 8000a84:	483c      	ldr	r0, [pc, #240]	; (8000b78 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 8000a86:	f001 f93d 	bl	8001d04 <HAL_ADC_GetValue>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	83bb      	strh	r3, [r7, #28]
					uint8_t ADCValue8b[] = {ADC_val >> 8, ADC_val};
 8000a8e:	8bbb      	ldrh	r3, [r7, #28]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	723b      	strb	r3, [r7, #8]
 8000a98:	8bbb      	ldrh	r3, [r7, #28]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	727b      	strb	r3, [r7, #9]
					message.serviceInfo.SID = ECU.RxData[1] + 0x40;
 8000a9e:	4b35      	ldr	r3, [pc, #212]	; (8000b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000aa0:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000aa4:	3340      	adds	r3, #64	; 0x40
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	733b      	strb	r3, [r7, #12]
					message.serviceInfo.DID[0] = ECU.RxData[2];
 8000aaa:	4b32      	ldr	r3, [pc, #200]	; (8000b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000aac:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8000ab0:	737b      	strb	r3, [r7, #13]
					message.serviceInfo.DID[1] = ECU.RxData[3];
 8000ab2:	4b30      	ldr	r3, [pc, #192]	; (8000b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000ab4:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8000ab8:	73bb      	strb	r3, [r7, #14]
					message.dataLength = sizeof(ADC_val);
 8000aba:	2302      	movs	r3, #2
 8000abc:	827b      	strh	r3, [r7, #18]
 8000abe:	893b      	ldrh	r3, [r7, #8]

				    memcpy(&message.data, &ADCValue8b, sizeof(ADCValue8b));
 8000ac0:	833b      	strh	r3, [r7, #24]
					printf("Send ADC Value 0x%X\n", ADC_val);
 8000ac2:	8bbb      	ldrh	r3, [r7, #28]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	482d      	ldr	r0, [pc, #180]	; (8000b7c <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 8000ac8:	f004 fa6a 	bl	8004fa0 <iprintf>
				    message.bufferLength = sizeof(message.serviceInfo) + message.dataLength;
 8000acc:	8a7b      	ldrh	r3, [r7, #18]
 8000ace:	3303      	adds	r3, #3
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	823b      	strh	r3, [r7, #16]
				    CANTP(&message, &ECU);
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	4926      	ldr	r1, [pc, #152]	; (8000b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f8a8 	bl	8000c30 <CANTP>
				else if (ECU.RxData[1] == 0x2E){
					receiveSingleFrame(&receiveMessage, ECU.RxData);
					receiveMessage.serviceInfo.SID += 0x40;
					sendResponeFrame(&receiveMessage.serviceInfo, &ECU);
				}
				break;
 8000ae0:	e03f      	b.n	8000b62 <HAL_CAN_RxFifo0MsgPendingCallback+0x132>
				else if (ECU.RxData[1] == 0x2E){
 8000ae2:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000ae4:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000ae8:	2b2e      	cmp	r3, #46	; 0x2e
 8000aea:	d13a      	bne.n	8000b62 <HAL_CAN_RxFifo0MsgPendingCallback+0x132>
					receiveSingleFrame(&receiveMessage, ECU.RxData);
 8000aec:	491f      	ldr	r1, [pc, #124]	; (8000b6c <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8000aee:	4824      	ldr	r0, [pc, #144]	; (8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000af0:	f7ff fd64 	bl	80005bc <receiveSingleFrame>
					receiveMessage.serviceInfo.SID += 0x40;
 8000af4:	4b22      	ldr	r3, [pc, #136]	; (8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	3340      	adds	r3, #64	; 0x40
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000afe:	701a      	strb	r2, [r3, #0]
					sendResponeFrame(&receiveMessage.serviceInfo, &ECU);
 8000b00:	491c      	ldr	r1, [pc, #112]	; (8000b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000b02:	481f      	ldr	r0, [pc, #124]	; (8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000b04:	f7ff ff64 	bl	80009d0 <sendResponeFrame>
				break;
 8000b08:	e02b      	b.n	8000b62 <HAL_CAN_RxFifo0MsgPendingCallback+0x132>
			}
			case 0x1:
			{
				if(ECU.RxData[2] == 0x2E){
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000b0c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8000b10:	2b2e      	cmp	r3, #46	; 0x2e
 8000b12:	d10a      	bne.n	8000b2a <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
					receiveFirstFrame(&receiveMessage, ECU.RxData);
 8000b14:	4915      	ldr	r1, [pc, #84]	; (8000b6c <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8000b16:	481a      	ldr	r0, [pc, #104]	; (8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000b18:	f7ff fd88 	bl	800062c <receiveFirstFrame>
					sendFlowControlFrame(PCI_FLOW_STATUS_CONTINUE, BLOCK_SIZE, SEPARATION_TIME, &ECU);
 8000b1c:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff ff16 	bl	8000954 <sendFlowControlFrame>
				}
				else{
					printf("Wrong Frame!\n");
				}
				break;
 8000b28:	e01c      	b.n	8000b64 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
					printf("Wrong Frame!\n");
 8000b2a:	4816      	ldr	r0, [pc, #88]	; (8000b84 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000b2c:	f004 fad4 	bl	80050d8 <puts>
				break;
 8000b30:	e018      	b.n	8000b64 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
			}
			case 0x2:
			{

				receiveConsecutiveFrame(&receiveMessage, ECU.RxData);
 8000b32:	490e      	ldr	r1, [pc, #56]	; (8000b6c <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8000b34:	4812      	ldr	r0, [pc, #72]	; (8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000b36:	f7ff fdb7 	bl	80006a8 <receiveConsecutiveFrame>
				showData(receiveMessage.data);
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fd18 	bl	8000574 <showData>
				receiveMessage.serviceInfo.SID += 0x40;
 8000b44:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	3340      	adds	r3, #64	; 0x40
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000b4e:	701a      	strb	r2, [r3, #0]
				sendResponeFrame(&receiveMessage.serviceInfo, &ECU);
 8000b50:	4908      	ldr	r1, [pc, #32]	; (8000b74 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 8000b52:	480b      	ldr	r0, [pc, #44]	; (8000b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000b54:	f7ff ff3c 	bl	80009d0 <sendResponeFrame>
				break;
 8000b58:	e004      	b.n	8000b64 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
			}
			default:
				break;
			}

	}
 8000b5a:	bf00      	nop
 8000b5c:	e002      	b.n	8000b64 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
				break;
 8000b5e:	bf00      	nop
 8000b60:	e000      	b.n	8000b64 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
				break;
 8000b62:	bf00      	nop
}
 8000b64:	bf00      	nop
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000284 	.word	0x20000284
 8000b70:	20000260 	.word	0x20000260
 8000b74:	20000220 	.word	0x20000220
 8000b78:	2000008c 	.word	0x2000008c
 8000b7c:	08005ee4 	.word	0x08005ee4
 8000b80:	20000290 	.word	0x20000290
 8000b84:	08005efc 	.word	0x08005efc

08000b88 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &Tester.RxHeader, Tester.RxData);
 8000b90:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 8000b92:	4a22      	ldr	r2, [pc, #136]	; (8000c1c <HAL_CAN_RxFifo1MsgPendingCallback+0x94>)
 8000b94:	2101      	movs	r1, #1
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f001 fddb 	bl	8002752 <HAL_CAN_GetRxMessage>
	if (Tester.RxHeader.DLC == 8)
 8000b9c:	4b20      	ldr	r3, [pc, #128]	; (8000c20 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>)
 8000b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ba0:	2b08      	cmp	r3, #8
 8000ba2:	d133      	bne.n	8000c0c <HAL_CAN_RxFifo1MsgPendingCallback+0x84>
	{
		uint8_t frameType = Tester.RxData[0] >> 4;
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>)
 8000ba6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8000baa:	091b      	lsrs	r3, r3, #4
 8000bac:	77fb      	strb	r3, [r7, #31]
		switch(frameType){
 8000bae:	7ffb      	ldrb	r3, [r7, #31]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d002      	beq.n	8000bba <HAL_CAN_RxFifo1MsgPendingCallback+0x32>
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d024      	beq.n	8000c02 <HAL_CAN_RxFifo1MsgPendingCallback+0x7a>
			sendConsecutiveFrame(&sendMessage, &Tester);
			break;
		}

		default:
			break;
 8000bb8:	e029      	b.n	8000c0e <HAL_CAN_RxFifo1MsgPendingCallback+0x86>
				switch (Tester.RxData[1])
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>)
 8000bbc:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000bc0:	2b62      	cmp	r3, #98	; 0x62
 8000bc2:	d002      	beq.n	8000bca <HAL_CAN_RxFifo1MsgPendingCallback+0x42>
 8000bc4:	2b6e      	cmp	r3, #110	; 0x6e
 8000bc6:	d017      	beq.n	8000bf8 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>
				break;
 8000bc8:	e021      	b.n	8000c0e <HAL_CAN_RxFifo1MsgPendingCallback+0x86>
						receiveSingleFrame(&receiveMessage, Tester.RxData);
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	4912      	ldr	r1, [pc, #72]	; (8000c18 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fcf3 	bl	80005bc <receiveSingleFrame>
						uint16_t ADC_rx = (receiveMessage.data[0] << 8) + receiveMessage.data[1];
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	3301      	adds	r3, #1
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	4413      	add	r3, r2
 8000bea:	83bb      	strh	r3, [r7, #28]
						printf("Get ADC from ECU: 0x%X\n", ADC_rx);
 8000bec:	8bbb      	ldrh	r3, [r7, #28]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480c      	ldr	r0, [pc, #48]	; (8000c24 <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>)
 8000bf2:	f004 f9d5 	bl	8004fa0 <iprintf>
						break;
 8000bf6:	e003      	b.n	8000c00 <HAL_CAN_RxFifo1MsgPendingCallback+0x78>
						printf("End session!\n");
 8000bf8:	480b      	ldr	r0, [pc, #44]	; (8000c28 <HAL_CAN_RxFifo1MsgPendingCallback+0xa0>)
 8000bfa:	f004 fa6d 	bl	80050d8 <puts>
						break;
 8000bfe:	bf00      	nop
				break;
 8000c00:	e005      	b.n	8000c0e <HAL_CAN_RxFifo1MsgPendingCallback+0x86>
			sendConsecutiveFrame(&sendMessage, &Tester);
 8000c02:	4907      	ldr	r1, [pc, #28]	; (8000c20 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>)
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <HAL_CAN_RxFifo1MsgPendingCallback+0xa4>)
 8000c06:	f7ff fe1f 	bl	8000848 <sendConsecutiveFrame>
			break;
 8000c0a:	e000      	b.n	8000c0e <HAL_CAN_RxFifo1MsgPendingCallback+0x86>
		}
	}
 8000c0c:	bf00      	nop
}
 8000c0e:	bf00      	nop
 8000c10:	3720      	adds	r7, #32
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000214 	.word	0x20000214
 8000c1c:	200001f0 	.word	0x200001f0
 8000c20:	200001b0 	.word	0x200001b0
 8000c24:	08005f0c 	.word	0x08005f0c
 8000c28:	08005f24 	.word	0x08005f24
 8000c2c:	200002a0 	.word	0x200002a0

08000c30 <CANTP>:

void CANTP(CANTPMessage *sendMessage, CANTPCanInit *Node){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]

    uint8_t paddingNumber;
    if(sendMessage->bufferLength <= 7){
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	889b      	ldrh	r3, [r3, #4]
 8000c3e:	2b07      	cmp	r3, #7
 8000c40:	d81a      	bhi.n	8000c78 <CANTP+0x48>
        paddingNumber = 7 - (sendMessage->bufferLength % 7);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	889a      	ldrh	r2, [r3, #4]
 8000c46:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <CANTP+0xa0>)
 8000c48:	fba3 1302 	umull	r1, r3, r3, r2
 8000c4c:	1ad1      	subs	r1, r2, r3
 8000c4e:	0849      	lsrs	r1, r1, #1
 8000c50:	440b      	add	r3, r1
 8000c52:	0899      	lsrs	r1, r3, #2
 8000c54:	460b      	mov	r3, r1
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	1a5b      	subs	r3, r3, r1
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	f1c3 0307 	rsb	r3, r3, #7
 8000c64:	73fb      	strb	r3, [r7, #15]
        sendMessage->bufferLength += paddingNumber;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	889a      	ldrh	r2, [r3, #4]
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4413      	add	r3, r2
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	809a      	strh	r2, [r3, #4]
 8000c76:	e019      	b.n	8000cac <CANTP+0x7c>
	}
	else{
        paddingNumber = 7 - (sendMessage->bufferLength % 7) - 1;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	889a      	ldrh	r2, [r3, #4]
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <CANTP+0xa0>)
 8000c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8000c82:	1ad1      	subs	r1, r2, r3
 8000c84:	0849      	lsrs	r1, r1, #1
 8000c86:	440b      	add	r3, r1
 8000c88:	0899      	lsrs	r1, r3, #2
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	1a5b      	subs	r3, r3, r1
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	f1c3 0306 	rsb	r3, r3, #6
 8000c9a:	73fb      	strb	r3, [r7, #15]
        sendMessage->bufferLength += paddingNumber;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	889a      	ldrh	r2, [r3, #4]
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	809a      	strh	r2, [r3, #4]
	}

	if(sendMessage->bufferLength > 7){
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	889b      	ldrh	r3, [r3, #4]
 8000cb0:	2b07      	cmp	r3, #7
 8000cb2:	d904      	bls.n	8000cbe <CANTP+0x8e>
		sendFirstFrame(sendMessage, Node);
 8000cb4:	6839      	ldr	r1, [r7, #0]
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff fd86 	bl	80007c8 <sendFirstFrame>
	}
	else{
		sendSingleFrame(sendMessage, Node);
	}
}
 8000cbc:	e003      	b.n	8000cc6 <CANTP+0x96>
		sendSingleFrame(sendMessage, Node);
 8000cbe:	6839      	ldr	r1, [r7, #0]
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff fd1d 	bl	8000700 <sendSingleFrame>
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	24924925 	.word	0x24924925

08000cd4 <WriteDataByIdentifier>:

void WriteDataByIdentifier(uint8_t *Data, uint8_t dataLength, uint8_t MSB_DID, uint8_t LSB_DID)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	4608      	mov	r0, r1
 8000cde:	4611      	mov	r1, r2
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	70fb      	strb	r3, [r7, #3]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	70bb      	strb	r3, [r7, #2]
 8000cea:	4613      	mov	r3, r2
 8000cec:	707b      	strb	r3, [r7, #1]
	printf("-------------Service $2E---------------\n");
 8000cee:	4816      	ldr	r0, [pc, #88]	; (8000d48 <WriteDataByIdentifier+0x74>)
 8000cf0:	f004 f9f2 	bl	80050d8 <puts>
	sendMessage.serviceInfo.SID = 0x2E;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <WriteDataByIdentifier+0x78>)
 8000cf6:	222e      	movs	r2, #46	; 0x2e
 8000cf8:	701a      	strb	r2, [r3, #0]
	sendMessage.serviceInfo.DID[0] = MSB_DID;
 8000cfa:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <WriteDataByIdentifier+0x78>)
 8000cfc:	78bb      	ldrb	r3, [r7, #2]
 8000cfe:	7053      	strb	r3, [r2, #1]
	sendMessage.serviceInfo.DID[1] = LSB_DID;
 8000d00:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <WriteDataByIdentifier+0x78>)
 8000d02:	787b      	ldrb	r3, [r7, #1]
 8000d04:	7093      	strb	r3, [r2, #2]
	sendMessage.dataLength = dataLength;
 8000d06:	78fb      	ldrb	r3, [r7, #3]
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <WriteDataByIdentifier+0x78>)
 8000d0c:	80da      	strh	r2, [r3, #6]
	sendMessage.bufferLength = sizeof(sendMessage.serviceInfo) + sendMessage.dataLength;
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <WriteDataByIdentifier+0x78>)
 8000d10:	88db      	ldrh	r3, [r3, #6]
 8000d12:	3303      	adds	r3, #3
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <WriteDataByIdentifier+0x78>)
 8000d18:	809a      	strh	r2, [r3, #4]
	sendMessage.data = (uint8_t*)malloc(dataLength);
 8000d1a:	78fb      	ldrb	r3, [r7, #3]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f004 f841 	bl	8004da4 <malloc>
 8000d22:	4603      	mov	r3, r0
 8000d24:	461a      	mov	r2, r3
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <WriteDataByIdentifier+0x78>)
 8000d28:	60da      	str	r2, [r3, #12]
  	memcpy(sendMessage.data, Data, dataLength);
 8000d2a:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <WriteDataByIdentifier+0x78>)
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	78fa      	ldrb	r2, [r7, #3]
 8000d30:	6879      	ldr	r1, [r7, #4]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f004 f83e 	bl	8004db4 <memcpy>
  	CANTP(&sendMessage, &Tester);
 8000d38:	4905      	ldr	r1, [pc, #20]	; (8000d50 <WriteDataByIdentifier+0x7c>)
 8000d3a:	4804      	ldr	r0, [pc, #16]	; (8000d4c <WriteDataByIdentifier+0x78>)
 8000d3c:	f7ff ff78 	bl	8000c30 <CANTP>

}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	08005f34 	.word	0x08005f34
 8000d4c:	200002a0 	.word	0x200002a0
 8000d50:	200001b0 	.word	0x200001b0

08000d54 <ReadDataByIdentifier>:


void ReadDataByIdentifier(uint8_t MSB_DID, uint8_t LSB_DID)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	460a      	mov	r2, r1
 8000d5e:	71fb      	strb	r3, [r7, #7]
 8000d60:	4613      	mov	r3, r2
 8000d62:	71bb      	strb	r3, [r7, #6]
	printf("-------------Service $22---------------\n");
 8000d64:	480e      	ldr	r0, [pc, #56]	; (8000da0 <ReadDataByIdentifier+0x4c>)
 8000d66:	f004 f9b7 	bl	80050d8 <puts>

	sendMessage.serviceInfo.SID = 0x22;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <ReadDataByIdentifier+0x50>)
 8000d6c:	2222      	movs	r2, #34	; 0x22
 8000d6e:	701a      	strb	r2, [r3, #0]
	sendMessage.serviceInfo.DID[0] = MSB_DID;
 8000d70:	4a0c      	ldr	r2, [pc, #48]	; (8000da4 <ReadDataByIdentifier+0x50>)
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	7053      	strb	r3, [r2, #1]
	sendMessage.serviceInfo.DID[1] = LSB_DID;
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <ReadDataByIdentifier+0x50>)
 8000d78:	79bb      	ldrb	r3, [r7, #6]
 8000d7a:	7093      	strb	r3, [r2, #2]

	sendMessage.dataLength = 0;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <ReadDataByIdentifier+0x50>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	80da      	strh	r2, [r3, #6]
	sendMessage.bufferLength = sizeof(sendMessage.serviceInfo) + sendMessage.dataLength;
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <ReadDataByIdentifier+0x50>)
 8000d84:	88db      	ldrh	r3, [r3, #6]
 8000d86:	3303      	adds	r3, #3
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <ReadDataByIdentifier+0x50>)
 8000d8c:	809a      	strh	r2, [r3, #4]
  	CANTP(&sendMessage, &Tester);
 8000d8e:	4906      	ldr	r1, [pc, #24]	; (8000da8 <ReadDataByIdentifier+0x54>)
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <ReadDataByIdentifier+0x50>)
 8000d92:	f7ff ff4d 	bl	8000c30 <CANTP>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	08005f5c 	.word	0x08005f5c
 8000da4:	200002a0 	.word	0x200002a0
 8000da8:	200001b0 	.word	0x200001b0

08000dac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_4) { 		// Joystick at Left position
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	2b10      	cmp	r3, #16
 8000dba:	d113      	bne.n	8000de4 <HAL_GPIO_EXTI_Callback+0x38>
		uint8_t Data[] = {0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA};
 8000dbc:	4a22      	ldr	r2, [pc, #136]	; (8000e48 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dc6:	6018      	str	r0, [r3, #0]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	8019      	strh	r1, [r3, #0]
		uint8_t dataLength = sizeof(Data);
 8000dcc:	2306      	movs	r3, #6
 8000dce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		WriteDataByIdentifier(Data, dataLength, 0xF0, 0x02);
 8000dd2:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8000dd6:	f107 001c 	add.w	r0, r7, #28
 8000dda:	2302      	movs	r3, #2
 8000ddc:	22f0      	movs	r2, #240	; 0xf0
 8000dde:	f7ff ff79 	bl	8000cd4 <WriteDataByIdentifier>
	else if (GPIO_Pin == GPIO_PIN_13) {	// Middle
		uint8_t Data[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
		uint8_t dataLength = sizeof(Data);
		WriteDataByIdentifier(Data, dataLength, 0xF0, 0x02);
	}
}
 8000de2:	e02d      	b.n	8000e40 <HAL_GPIO_EXTI_Callback+0x94>
	else if (GPIO_Pin == GPIO_PIN_7) {	// Right
 8000de4:	88fb      	ldrh	r3, [r7, #6]
 8000de6:	2b80      	cmp	r3, #128	; 0x80
 8000de8:	d113      	bne.n	8000e12 <HAL_GPIO_EXTI_Callback+0x66>
		uint8_t Data[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8000dea:	4a18      	ldr	r2, [pc, #96]	; (8000e4c <HAL_GPIO_EXTI_Callback+0xa0>)
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000df4:	6018      	str	r0, [r3, #0]
 8000df6:	3304      	adds	r3, #4
 8000df8:	8019      	strh	r1, [r3, #0]
		uint8_t dataLength = sizeof(Data);
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		WriteDataByIdentifier(Data, dataLength, 0xF0, 0x02);
 8000e00:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8000e04:	f107 0014 	add.w	r0, r7, #20
 8000e08:	2302      	movs	r3, #2
 8000e0a:	22f0      	movs	r2, #240	; 0xf0
 8000e0c:	f7ff ff62 	bl	8000cd4 <WriteDataByIdentifier>
}
 8000e10:	e016      	b.n	8000e40 <HAL_GPIO_EXTI_Callback+0x94>
	else if (GPIO_Pin == GPIO_PIN_13) {	// Middle
 8000e12:	88fb      	ldrh	r3, [r7, #6]
 8000e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e18:	d112      	bne.n	8000e40 <HAL_GPIO_EXTI_Callback+0x94>
		uint8_t Data[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000e1a:	4a0d      	ldr	r2, [pc, #52]	; (8000e50 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e24:	6018      	str	r0, [r3, #0]
 8000e26:	3304      	adds	r3, #4
 8000e28:	8019      	strh	r1, [r3, #0]
		uint8_t dataLength = sizeof(Data);
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		WriteDataByIdentifier(Data, dataLength, 0xF0, 0x02);
 8000e30:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8000e34:	f107 000c 	add.w	r0, r7, #12
 8000e38:	2302      	movs	r3, #2
 8000e3a:	22f0      	movs	r2, #240	; 0xf0
 8000e3c:	f7ff ff4a 	bl	8000cd4 <WriteDataByIdentifier>
}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	; 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	08005f84 	.word	0x08005f84
 8000e4c:	08005f8c 	.word	0x08005f8c
 8000e50:	08005f94 	.word	0x08005f94

08000e54 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	ReadDataByIdentifier(0xF0, 0x00);
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	20f0      	movs	r0, #240	; 0xf0
 8000e60:	f7ff ff78 	bl	8000d54 <ReadDataByIdentifier>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e6c:	b5b0      	push	{r4, r5, r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e70:	f000 fd9c 	bl	80019ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e74:	f000 f85a 	bl	8000f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e78:	f000 fa36 	bl	80012e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e7c:	f000 fa0a 	bl	8001294 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8000e80:	f000 f910 	bl	80010a4 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000e84:	f000 f964 	bl	8001150 <MX_CAN2_Init>
  MX_ADC1_Init();
 8000e88:	f000 f8ba 	bl	8001000 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000e8c:	f000 f9b4 	bl	80011f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000e90:	4821      	ldr	r0, [pc, #132]	; (8000f18 <main+0xac>)
 8000e92:	f002 ff69 	bl	8003d68 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan1);
 8000e96:	4821      	ldr	r0, [pc, #132]	; (8000f1c <main+0xb0>)
 8000e98:	f001 fb3c 	bl	8002514 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8000e9c:	4820      	ldr	r0, [pc, #128]	; (8000f20 <main+0xb4>)
 8000e9e:	f001 fb39 	bl	8002514 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	481d      	ldr	r0, [pc, #116]	; (8000f1c <main+0xb0>)
 8000ea6:	f001 fd66 	bl	8002976 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000eaa:	2110      	movs	r1, #16
 8000eac:	481c      	ldr	r0, [pc, #112]	; (8000f20 <main+0xb4>)
 8000eae:	f001 fd62 	bl	8002976 <HAL_CAN_ActivateNotification>

  // Response from ECU
  ECU.hcan = hcan1;
 8000eb2:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <main+0xb8>)
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <main+0xb0>)
 8000eb6:	4614      	mov	r4, r2
 8000eb8:	461d      	mov	r5, r3
 8000eba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ec2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ec6:	e884 0003 	stmia.w	r4, {r0, r1}
  ECU.TxHeader.DLC = 8;
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <main+0xb8>)
 8000ecc:	2208      	movs	r2, #8
 8000ece:	639a      	str	r2, [r3, #56]	; 0x38
  ECU.TxHeader.IDE = CAN_ID_STD;
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <main+0xb8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	631a      	str	r2, [r3, #48]	; 0x30
  ECU.TxHeader.RTR = CAN_RTR_DATA;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <main+0xb8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	635a      	str	r2, [r3, #52]	; 0x34
  ECU.TxHeader.StdId = 0x7A2;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <main+0xb8>)
 8000ede:	f240 72a2 	movw	r2, #1954	; 0x7a2
 8000ee2:	629a      	str	r2, [r3, #40]	; 0x28

  // Request from Tester
  Tester.hcan = hcan2;
 8000ee4:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <main+0xbc>)
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <main+0xb4>)
 8000ee8:	4614      	mov	r4, r2
 8000eea:	461d      	mov	r5, r3
 8000eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ef8:	e884 0003 	stmia.w	r4, {r0, r1}
  Tester.TxHeader.DLC = 8;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <main+0xbc>)
 8000efe:	2208      	movs	r2, #8
 8000f00:	639a      	str	r2, [r3, #56]	; 0x38
  Tester.TxHeader.IDE = CAN_ID_STD;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <main+0xbc>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	631a      	str	r2, [r3, #48]	; 0x30
  Tester.TxHeader.RTR = CAN_RTR_DATA;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <main+0xbc>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	635a      	str	r2, [r3, #52]	; 0x34
  Tester.TxHeader.StdId = 0x712;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <main+0xbc>)
 8000f10:	f240 7212 	movw	r2, #1810	; 0x712
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <main+0xaa>
 8000f18:	20000124 	.word	0x20000124
 8000f1c:	200000d4 	.word	0x200000d4
 8000f20:	200000fc 	.word	0x200000fc
 8000f24:	20000220 	.word	0x20000220
 8000f28:	200001b0 	.word	0x200001b0

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b094      	sub	sp, #80	; 0x50
 8000f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f32:	f107 0320 	add.w	r3, r7, #32
 8000f36:	2230      	movs	r2, #48	; 0x30
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 ff48 	bl	8004dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <SystemClock_Config+0xcc>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <SystemClock_Config+0xcc>)
 8000f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f60:	4b25      	ldr	r3, [pc, #148]	; (8000ff8 <SystemClock_Config+0xcc>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <SystemClock_Config+0xd0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <SystemClock_Config+0xd0>)
 8000f76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <SystemClock_Config+0xd0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f92:	2302      	movs	r3, #2
 8000f94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fa0:	23a8      	movs	r3, #168	; 0xa8
 8000fa2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fac:	f107 0320 	add.w	r3, r7, #32
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f002 f9f1 	bl	8003398 <HAL_RCC_OscConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fbc:	f000 fa18 	bl	80013f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fcc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2105      	movs	r1, #5
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fc52 	bl	8003888 <HAL_RCC_ClockConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fea:	f000 fa01 	bl	80013f0 <Error_Handler>
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3750      	adds	r7, #80	; 0x50
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40007000 	.word	0x40007000

08001000 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001006:	463b      	mov	r3, r7
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001012:	4b21      	ldr	r3, [pc, #132]	; (8001098 <MX_ADC1_Init+0x98>)
 8001014:	4a21      	ldr	r2, [pc, #132]	; (800109c <MX_ADC1_Init+0x9c>)
 8001016:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <MX_ADC1_Init+0x98>)
 800101a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800101e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <MX_ADC1_Init+0x98>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <MX_ADC1_Init+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800102c:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <MX_ADC1_Init+0x98>)
 800102e:	2200      	movs	r2, #0
 8001030:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <MX_ADC1_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <MX_ADC1_Init+0x98>)
 800103c:	2200      	movs	r2, #0
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <MX_ADC1_Init+0x98>)
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <MX_ADC1_Init+0xa0>)
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_ADC1_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <MX_ADC1_Init+0x98>)
 800104e:	2201      	movs	r2, #1
 8001050:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_ADC1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_ADC1_Init+0x98>)
 800105c:	2201      	movs	r2, #1
 800105e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <MX_ADC1_Init+0x98>)
 8001062:	f000 fd39 	bl	8001ad8 <HAL_ADC_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800106c:	f000 f9c0 	bl	80013f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001070:	2300      	movs	r3, #0
 8001072:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001074:	2301      	movs	r3, #1
 8001076:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107c:	463b      	mov	r3, r7
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_ADC1_Init+0x98>)
 8001082:	f000 fe4d 	bl	8001d20 <HAL_ADC_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800108c:	f000 f9b0 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	2000008c 	.word	0x2000008c
 800109c:	40012000 	.word	0x40012000
 80010a0:	0f000001 	.word	0x0f000001

080010a4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	; 0x28
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010aa:	4b27      	ldr	r3, [pc, #156]	; (8001148 <MX_CAN1_Init+0xa4>)
 80010ac:	4a27      	ldr	r2, [pc, #156]	; (800114c <MX_CAN1_Init+0xa8>)
 80010ae:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80010b0:	4b25      	ldr	r3, [pc, #148]	; (8001148 <MX_CAN1_Init+0xa4>)
 80010b2:	2204      	movs	r2, #4
 80010b4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <MX_CAN1_Init+0xa4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <MX_CAN1_Init+0xa4>)
 80010be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010c2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_16TQ;
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <MX_CAN1_Init+0xa4>)
 80010c6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80010ca:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <MX_CAN1_Init+0xa4>)
 80010ce:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80010d2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <MX_CAN1_Init+0xa4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80010da:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <MX_CAN1_Init+0xa4>)
 80010dc:	2201      	movs	r2, #1
 80010de:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80010e0:	4b19      	ldr	r3, [pc, #100]	; (8001148 <MX_CAN1_Init+0xa4>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_CAN1_Init+0xa4>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <MX_CAN1_Init+0xa4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_CAN1_Init+0xa4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80010f8:	4813      	ldr	r0, [pc, #76]	; (8001148 <MX_CAN1_Init+0xa4>)
 80010fa:	f001 f82f 	bl	800215c <HAL_CAN_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8001104:	f000 f974 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001108:	2301      	movs	r3, #1
 800110a:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 800110c:	2312      	movs	r3, #18
 800110e:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x712<<5;
 8001114:	f24e 2340 	movw	r3, #57920	; 0xe240
 8001118:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x712<<5;
 800111e:	f24e 2340 	movw	r3, #57920	; 0xe240
 8001122:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800112c:	2301      	movs	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8001130:	2314      	movs	r3, #20
 8001132:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001134:	463b      	mov	r3, r7
 8001136:	4619      	mov	r1, r3
 8001138:	4803      	ldr	r0, [pc, #12]	; (8001148 <MX_CAN1_Init+0xa4>)
 800113a:	f001 f90b 	bl	8002354 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	3728      	adds	r7, #40	; 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200000d4 	.word	0x200000d4
 800114c:	40006400 	.word	0x40006400

08001150 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001156:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <MX_CAN2_Init+0xa0>)
 8001158:	4a26      	ldr	r2, [pc, #152]	; (80011f4 <MX_CAN2_Init+0xa4>)
 800115a:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <MX_CAN2_Init+0xa0>)
 800115e:	2204      	movs	r2, #4
 8001160:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <MX_CAN2_Init+0xa0>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <MX_CAN2_Init+0xa0>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_16TQ;
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <MX_CAN2_Init+0xa0>)
 8001170:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8001174:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_4TQ;
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MX_CAN2_Init+0xa0>)
 8001178:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800117c:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800117e:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <MX_CAN2_Init+0xa0>)
 8001180:	2200      	movs	r2, #0
 8001182:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8001184:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <MX_CAN2_Init+0xa0>)
 8001186:	2201      	movs	r2, #1
 8001188:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <MX_CAN2_Init+0xa0>)
 800118c:	2201      	movs	r2, #1
 800118e:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_CAN2_Init+0xa0>)
 8001192:	2200      	movs	r2, #0
 8001194:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <MX_CAN2_Init+0xa0>)
 8001198:	2200      	movs	r2, #0
 800119a:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_CAN2_Init+0xa0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80011a2:	4813      	ldr	r0, [pc, #76]	; (80011f0 <MX_CAN2_Init+0xa0>)
 80011a4:	f000 ffda 	bl	800215c <HAL_CAN_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 80011ae:	f000 f91f 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80011b2:	2301      	movs	r3, #1
 80011b4:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 19;//10;  // which filter bank to use from the assigned ones
 80011b6:	2313      	movs	r3, #19
 80011b8:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x7A2<<5;
 80011be:	f24f 4340 	movw	r3, #62528	; 0xf440
 80011c2:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x7A2<<5;
 80011c8:	f24f 4340 	movw	r3, #62528	; 0xf440
 80011cc:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011d6:	2301      	movs	r3, #1
 80011d8:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;  // doesn't matter in single can controllers
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 80011de:	463b      	mov	r3, r7
 80011e0:	4619      	mov	r1, r3
 80011e2:	4803      	ldr	r0, [pc, #12]	; (80011f0 <MX_CAN2_Init+0xa0>)
 80011e4:	f001 f8b6 	bl	8002354 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN2_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	3728      	adds	r7, #40	; 0x28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200000fc 	.word	0x200000fc
 80011f4:	40006800 	.word	0x40006800

080011f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	463b      	mov	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <MX_TIM3_Init+0x94>)
 8001216:	4a1e      	ldr	r2, [pc, #120]	; (8001290 <MX_TIM3_Init+0x98>)
 8001218:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 800121a:	4b1c      	ldr	r3, [pc, #112]	; (800128c <MX_TIM3_Init+0x94>)
 800121c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001220:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <MX_TIM3_Init+0x94>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <MX_TIM3_Init+0x94>)
 800122a:	f242 720f 	movw	r2, #9999	; 0x270f
 800122e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <MX_TIM3_Init+0x94>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001236:	4b15      	ldr	r3, [pc, #84]	; (800128c <MX_TIM3_Init+0x94>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800123c:	4813      	ldr	r0, [pc, #76]	; (800128c <MX_TIM3_Init+0x94>)
 800123e:	f002 fd43 	bl	8003cc8 <HAL_TIM_Base_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001248:	f000 f8d2 	bl	80013f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001250:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	4619      	mov	r1, r3
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <MX_TIM3_Init+0x94>)
 800125a:	f002 fefd 	bl	8004058 <HAL_TIM_ConfigClockSource>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001264:	f000 f8c4 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001268:	2300      	movs	r3, #0
 800126a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_TIM3_Init+0x94>)
 8001276:	f003 f919 	bl	80044ac <HAL_TIMEx_MasterConfigSynchronization>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001280:	f000 f8b6 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000124 	.word	0x20000124
 8001290:	40000400 	.word	0x40000400

08001294 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_USART1_UART_Init+0x4c>)
 800129a:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <MX_USART1_UART_Init+0x50>)
 800129c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <MX_USART1_UART_Init+0x4c>)
 80012a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_USART1_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_USART1_UART_Init+0x4c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_USART1_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_USART1_UART_Init+0x4c>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <MX_USART1_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_USART1_UART_Init+0x4c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_USART1_UART_Init+0x4c>)
 80012cc:	f003 f97e 	bl	80045cc <HAL_UART_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012d6:	f000 f88b 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000016c 	.word	0x2000016c
 80012e4:	40011000 	.word	0x40011000

080012e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <MX_GPIO_Init+0xdc>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a2f      	ldr	r2, [pc, #188]	; (80013c4 <MX_GPIO_Init+0xdc>)
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <MX_GPIO_Init+0xdc>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <MX_GPIO_Init+0xdc>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a28      	ldr	r2, [pc, #160]	; (80013c4 <MX_GPIO_Init+0xdc>)
 8001324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b26      	ldr	r3, [pc, #152]	; (80013c4 <MX_GPIO_Init+0xdc>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <MX_GPIO_Init+0xdc>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a21      	ldr	r2, [pc, #132]	; (80013c4 <MX_GPIO_Init+0xdc>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <MX_GPIO_Init+0xdc>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_GPIO_Init+0xdc>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a1a      	ldr	r2, [pc, #104]	; (80013c4 <MX_GPIO_Init+0xdc>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_GPIO_Init+0xdc>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC13 PC4 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4|GPIO_PIN_7;
 800136e:	f242 0390 	movw	r3, #8336	; 0x2090
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001374:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800137a:	2301      	movs	r3, #1
 800137c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4810      	ldr	r0, [pc, #64]	; (80013c8 <MX_GPIO_Init+0xe0>)
 8001386:	f001 fe53 	bl	8003030 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2102      	movs	r1, #2
 800138e:	200a      	movs	r0, #10
 8001390:	f001 fe17 	bl	8002fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001394:	200a      	movs	r0, #10
 8001396:	f001 fe30 	bl	8002ffa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2102      	movs	r1, #2
 800139e:	2017      	movs	r0, #23
 80013a0:	f001 fe0f 	bl	8002fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013a4:	2017      	movs	r0, #23
 80013a6:	f001 fe28 	bl	8002ffa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2102      	movs	r1, #2
 80013ae:	2028      	movs	r0, #40	; 0x28
 80013b0:	f001 fe07 	bl	8002fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013b4:	2028      	movs	r0, #40	; 0x28
 80013b6:	f001 fe20 	bl	8002ffa <HAL_NVIC_EnableIRQ>

}
 80013ba:	bf00      	nop
 80013bc:	3728      	adds	r7, #40	; 0x28
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020800 	.word	0x40020800

080013cc <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART */
 HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 80013d4:	1d39      	adds	r1, r7, #4
 80013d6:	2364      	movs	r3, #100	; 0x64
 80013d8:	2201      	movs	r2, #1
 80013da:	4804      	ldr	r0, [pc, #16]	; (80013ec <__io_putchar+0x20>)
 80013dc:	f003 f943 	bl	8004666 <HAL_UART_Transmit>


 return ch;
 80013e0:	687b      	ldr	r3, [r7, #4]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	2000016c 	.word	0x2000016c

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <Error_Handler+0x8>
	...

080013fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_MspInit+0x4c>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <HAL_MspInit+0x4c>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_MspInit+0x4c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_MspInit+0x4c>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a08      	ldr	r2, [pc, #32]	; (8001448 <HAL_MspInit+0x4c>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_MspInit+0x4c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_ADC_MspInit+0x7c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d127      	bne.n	80014be <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_ADC_MspInit+0x80>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a15      	ldr	r2, [pc, #84]	; (80014cc <HAL_ADC_MspInit+0x80>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b13      	ldr	r3, [pc, #76]	; (80014cc <HAL_ADC_MspInit+0x80>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_ADC_MspInit+0x80>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a0e      	ldr	r2, [pc, #56]	; (80014cc <HAL_ADC_MspInit+0x80>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_ADC_MspInit+0x80>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014a6:	2301      	movs	r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014aa:	2303      	movs	r3, #3
 80014ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4805      	ldr	r0, [pc, #20]	; (80014d0 <HAL_ADC_MspInit+0x84>)
 80014ba:	f001 fdb9 	bl	8003030 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40012000 	.word	0x40012000
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020000 	.word	0x40020000

080014d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08c      	sub	sp, #48	; 0x30
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a4a      	ldr	r2, [pc, #296]	; (800161c <HAL_CAN_MspInit+0x148>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d13e      	bne.n	8001574 <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80014f6:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <HAL_CAN_MspInit+0x14c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	3301      	adds	r3, #1
 80014fc:	4a48      	ldr	r2, [pc, #288]	; (8001620 <HAL_CAN_MspInit+0x14c>)
 80014fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001500:	4b47      	ldr	r3, [pc, #284]	; (8001620 <HAL_CAN_MspInit+0x14c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d10d      	bne.n	8001524 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
 800150c:	4b45      	ldr	r3, [pc, #276]	; (8001624 <HAL_CAN_MspInit+0x150>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	4a44      	ldr	r2, [pc, #272]	; (8001624 <HAL_CAN_MspInit+0x150>)
 8001512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001516:	6413      	str	r3, [r2, #64]	; 0x40
 8001518:	4b42      	ldr	r3, [pc, #264]	; (8001624 <HAL_CAN_MspInit+0x150>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <HAL_CAN_MspInit+0x150>)
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	4a3d      	ldr	r2, [pc, #244]	; (8001624 <HAL_CAN_MspInit+0x150>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6313      	str	r3, [r2, #48]	; 0x30
 8001534:	4b3b      	ldr	r3, [pc, #236]	; (8001624 <HAL_CAN_MspInit+0x150>)
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001540:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001552:	2309      	movs	r3, #9
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	4619      	mov	r1, r3
 800155c:	4832      	ldr	r0, [pc, #200]	; (8001628 <HAL_CAN_MspInit+0x154>)
 800155e:	f001 fd67 	bl	8003030 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 3, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2103      	movs	r1, #3
 8001566:	2014      	movs	r0, #20
 8001568:	f001 fd2b 	bl	8002fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800156c:	2014      	movs	r0, #20
 800156e:	f001 fd44 	bl	8002ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001572:	e04f      	b.n	8001614 <HAL_CAN_MspInit+0x140>
  else if(hcan->Instance==CAN2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a2c      	ldr	r2, [pc, #176]	; (800162c <HAL_CAN_MspInit+0x158>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d14a      	bne.n	8001614 <HAL_CAN_MspInit+0x140>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b28      	ldr	r3, [pc, #160]	; (8001624 <HAL_CAN_MspInit+0x150>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4a27      	ldr	r2, [pc, #156]	; (8001624 <HAL_CAN_MspInit+0x150>)
 8001588:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800158c:	6413      	str	r3, [r2, #64]	; 0x40
 800158e:	4b25      	ldr	r3, [pc, #148]	; (8001624 <HAL_CAN_MspInit+0x150>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <HAL_CAN_MspInit+0x14c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	3301      	adds	r3, #1
 80015a0:	4a1f      	ldr	r2, [pc, #124]	; (8001620 <HAL_CAN_MspInit+0x14c>)
 80015a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <HAL_CAN_MspInit+0x14c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d10d      	bne.n	80015c8 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <HAL_CAN_MspInit+0x150>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	4a1b      	ldr	r2, [pc, #108]	; (8001624 <HAL_CAN_MspInit+0x150>)
 80015b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015ba:	6413      	str	r3, [r2, #64]	; 0x40
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_CAN_MspInit+0x150>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_CAN_MspInit+0x150>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	4a14      	ldr	r2, [pc, #80]	; (8001624 <HAL_CAN_MspInit+0x150>)
 80015d2:	f043 0302 	orr.w	r3, r3, #2
 80015d6:	6313      	str	r3, [r2, #48]	; 0x30
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_CAN_MspInit+0x150>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80015e4:	2360      	movs	r3, #96	; 0x60
 80015e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80015f4:	2309      	movs	r3, #9
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4619      	mov	r1, r3
 80015fe:	480c      	ldr	r0, [pc, #48]	; (8001630 <HAL_CAN_MspInit+0x15c>)
 8001600:	f001 fd16 	bl	8003030 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 3, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2103      	movs	r1, #3
 8001608:	2041      	movs	r0, #65	; 0x41
 800160a:	f001 fcda 	bl	8002fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800160e:	2041      	movs	r0, #65	; 0x41
 8001610:	f001 fcf3 	bl	8002ffa <HAL_NVIC_EnableIRQ>
}
 8001614:	bf00      	nop
 8001616:	3730      	adds	r7, #48	; 0x30
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40006400 	.word	0x40006400
 8001620:	200002b0 	.word	0x200002b0
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000
 800162c:	40006800 	.word	0x40006800
 8001630:	40020400 	.word	0x40020400

08001634 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0e      	ldr	r2, [pc, #56]	; (800167c <HAL_TIM_Base_MspInit+0x48>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d115      	bne.n	8001672 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <HAL_TIM_Base_MspInit+0x4c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <HAL_TIM_Base_MspInit+0x4c>)
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <HAL_TIM_Base_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2103      	movs	r1, #3
 8001666:	201d      	movs	r0, #29
 8001668:	f001 fcab 	bl	8002fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800166c:	201d      	movs	r0, #29
 800166e:	f001 fcc4 	bl	8002ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40000400 	.word	0x40000400
 8001680:	40023800 	.word	0x40023800

08001684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a19      	ldr	r2, [pc, #100]	; (8001708 <HAL_UART_MspInit+0x84>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d12c      	bne.n	8001700 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4b18      	ldr	r3, [pc, #96]	; (800170c <HAL_UART_MspInit+0x88>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	4a17      	ldr	r2, [pc, #92]	; (800170c <HAL_UART_MspInit+0x88>)
 80016b0:	f043 0310 	orr.w	r3, r3, #16
 80016b4:	6453      	str	r3, [r2, #68]	; 0x44
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_UART_MspInit+0x88>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	f003 0310 	and.w	r3, r3, #16
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <HAL_UART_MspInit+0x88>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a10      	ldr	r2, [pc, #64]	; (800170c <HAL_UART_MspInit+0x88>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <HAL_UART_MspInit+0x88>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	2303      	movs	r3, #3
 80016ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016f0:	2307      	movs	r3, #7
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 0314 	add.w	r3, r7, #20
 80016f8:	4619      	mov	r1, r3
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <HAL_UART_MspInit+0x8c>)
 80016fc:	f001 fc98 	bl	8003030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001700:	bf00      	nop
 8001702:	3728      	adds	r7, #40	; 0x28
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40011000 	.word	0x40011000
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001760:	f000 f976 	bl	8001a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	HAL_Delay(500);
 800176c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001770:	f000 f98e 	bl	8001a90 <HAL_Delay>
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001774:	2010      	movs	r0, #16
 8001776:	f001 fdf7 	bl	8003368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001784:	4802      	ldr	r0, [pc, #8]	; (8001790 <CAN1_RX0_IRQHandler+0x10>)
 8001786:	f001 f91c 	bl	80029c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200000d4 	.word	0x200000d4

08001794 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	HAL_Delay(500);
 8001798:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800179c:	f000 f978 	bl	8001a90 <HAL_Delay>
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80017a0:	2080      	movs	r0, #128	; 0x80
 80017a2:	f001 fde1 	bl	8003368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017b0:	4802      	ldr	r0, [pc, #8]	; (80017bc <TIM3_IRQHandler+0x10>)
 80017b2:	f002 fb49 	bl	8003e48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000124 	.word	0x20000124

080017c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_Delay(500);
 80017c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017c8:	f000 f962 	bl	8001a90 <HAL_Delay>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80017cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017d0:	f001 fdca 	bl	8003368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <CAN2_RX1_IRQHandler+0x10>)
 80017de:	f001 f8f0 	bl	80029c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200000fc 	.word	0x200000fc

080017ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	e00a      	b.n	8001814 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017fe:	f3af 8000 	nop.w
 8001802:	4601      	mov	r1, r0
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	1c5a      	adds	r2, r3, #1
 8001808:	60ba      	str	r2, [r7, #8]
 800180a:	b2ca      	uxtb	r2, r1
 800180c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	3301      	adds	r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbf0      	blt.n	80017fe <_read+0x12>
	}

return len;
 800181c:	687b      	ldr	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b086      	sub	sp, #24
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e009      	b.n	800184c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	60ba      	str	r2, [r7, #8]
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fdc3 	bl	80013cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	dbf1      	blt.n	8001838 <_write+0x12>
	}
	return len;
 8001854:	687b      	ldr	r3, [r7, #4]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_close>:

int _close(int file)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
	return -1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr

08001876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001886:	605a      	str	r2, [r3, #4]
	return 0;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <_isatty>:

int _isatty(int file)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
	return 1;
 800189e:	2301      	movs	r3, #1
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
	return 0;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d0:	4a14      	ldr	r2, [pc, #80]	; (8001924 <_sbrk+0x5c>)
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <_sbrk+0x60>)
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d102      	bne.n	80018ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <_sbrk+0x64>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <_sbrk+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <_sbrk+0x64>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d207      	bcs.n	8001908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f8:	f003 fa2a 	bl	8004d50 <__errno>
 80018fc:	4603      	mov	r3, r0
 80018fe:	220c      	movs	r2, #12
 8001900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	e009      	b.n	800191c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <_sbrk+0x64>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <_sbrk+0x64>)
 8001918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191a:	68fb      	ldr	r3, [r7, #12]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20020000 	.word	0x20020000
 8001928:	00000400 	.word	0x00000400
 800192c:	200002b4 	.word	0x200002b4
 8001930:	200002d0 	.word	0x200002d0

08001934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <SystemInit+0x20>)
 800193a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800193e:	4a05      	ldr	r2, [pc, #20]	; (8001954 <SystemInit+0x20>)
 8001940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001990 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800195c:	480d      	ldr	r0, [pc, #52]	; (8001994 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800195e:	490e      	ldr	r1, [pc, #56]	; (8001998 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001960:	4a0e      	ldr	r2, [pc, #56]	; (800199c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001972:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001974:	4c0b      	ldr	r4, [pc, #44]	; (80019a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001982:	f7ff ffd7 	bl	8001934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001986:	f003 f9e9 	bl	8004d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800198a:	f7ff fa6f 	bl	8000e6c <main>
  bx  lr    
 800198e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001990:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001998:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800199c:	0800605c 	.word	0x0800605c
  ldr r2, =_sbss
 80019a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019a4:	200002cc 	.word	0x200002cc

080019a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a8:	e7fe      	b.n	80019a8 <ADC_IRQHandler>
	...

080019ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019b0:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <HAL_Init+0x40>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <HAL_Init+0x40>)
 80019b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019bc:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <HAL_Init+0x40>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <HAL_Init+0x40>)
 80019c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <HAL_Init+0x40>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a07      	ldr	r2, [pc, #28]	; (80019ec <HAL_Init+0x40>)
 80019ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d4:	2003      	movs	r0, #3
 80019d6:	f001 fae9 	bl	8002fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019da:	2001      	movs	r0, #1
 80019dc:	f000 f808 	bl	80019f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e0:	f7ff fd0c 	bl	80013fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023c00 	.word	0x40023c00

080019f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_InitTick+0x54>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_InitTick+0x58>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f001 fb01 	bl	8003016 <HAL_SYSTICK_Config>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00e      	b.n	8001a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b0f      	cmp	r3, #15
 8001a22:	d80a      	bhi.n	8001a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a24:	2200      	movs	r2, #0
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f001 fac9 	bl	8002fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a30:	4a06      	ldr	r2, [pc, #24]	; (8001a4c <HAL_InitTick+0x5c>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
 8001a38:	e000      	b.n	8001a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20000000 	.word	0x20000000
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	20000004 	.word	0x20000004

08001a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a54:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <HAL_IncTick+0x20>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_IncTick+0x24>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <HAL_IncTick+0x24>)
 8001a62:	6013      	str	r3, [r2, #0]
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000008 	.word	0x20000008
 8001a74:	200002b8 	.word	0x200002b8

08001a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <HAL_GetTick+0x14>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	200002b8 	.word	0x200002b8

08001a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a98:	f7ff ffee 	bl	8001a78 <HAL_GetTick>
 8001a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa8:	d005      	beq.n	8001ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_Delay+0x44>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ab6:	bf00      	nop
 8001ab8:	f7ff ffde 	bl	8001a78 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d8f7      	bhi.n	8001ab8 <HAL_Delay+0x28>
  {
  }
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000008 	.word	0x20000008

08001ad8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e033      	b.n	8001b56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d109      	bne.n	8001b0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fca8 	bl	800144c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d118      	bne.n	8001b48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b1e:	f023 0302 	bic.w	r3, r3, #2
 8001b22:	f043 0202 	orr.w	r2, r3, #2
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 fa1a 	bl	8001f64 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f023 0303 	bic.w	r3, r3, #3
 8001b3e:	f043 0201 	orr.w	r2, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	641a      	str	r2, [r3, #64]	; 0x40
 8001b46:	e001      	b.n	8001b4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_ADC_Start+0x1a>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e0b2      	b.n	8001ce0 <HAL_ADC_Start+0x180>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d018      	beq.n	8001bc2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0201 	orr.w	r2, r2, #1
 8001b9e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ba0:	4b52      	ldr	r3, [pc, #328]	; (8001cec <HAL_ADC_Start+0x18c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a52      	ldr	r2, [pc, #328]	; (8001cf0 <HAL_ADC_Start+0x190>)
 8001ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8001baa:	0c9a      	lsrs	r2, r3, #18
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bb4:	e002      	b.n	8001bbc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f9      	bne.n	8001bb6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d17a      	bne.n	8001cc6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bfa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c0e:	d106      	bne.n	8001c1e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	f023 0206 	bic.w	r2, r3, #6
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	645a      	str	r2, [r3, #68]	; 0x44
 8001c1c:	e002      	b.n	8001c24 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c2c:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_ADC_Start+0x194>)
 8001c2e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c38:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d12a      	bne.n	8001c9c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a2b      	ldr	r2, [pc, #172]	; (8001cf8 <HAL_ADC_Start+0x198>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d015      	beq.n	8001c7c <HAL_ADC_Start+0x11c>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a29      	ldr	r2, [pc, #164]	; (8001cfc <HAL_ADC_Start+0x19c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d105      	bne.n	8001c66 <HAL_ADC_Start+0x106>
 8001c5a:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_ADC_Start+0x194>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 031f 	and.w	r3, r3, #31
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00a      	beq.n	8001c7c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a25      	ldr	r2, [pc, #148]	; (8001d00 <HAL_ADC_Start+0x1a0>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d136      	bne.n	8001cde <HAL_ADC_Start+0x17e>
 8001c70:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <HAL_ADC_Start+0x194>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0310 	and.w	r3, r3, #16
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d130      	bne.n	8001cde <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d129      	bne.n	8001cde <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	e020      	b.n	8001cde <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a15      	ldr	r2, [pc, #84]	; (8001cf8 <HAL_ADC_Start+0x198>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d11b      	bne.n	8001cde <HAL_ADC_Start+0x17e>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d114      	bne.n	8001cde <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	e00b      	b.n	8001cde <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f043 0210 	orr.w	r2, r3, #16
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f043 0201 	orr.w	r2, r3, #1
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	20000000 	.word	0x20000000
 8001cf0:	431bde83 	.word	0x431bde83
 8001cf4:	40012300 	.word	0x40012300
 8001cf8:	40012000 	.word	0x40012000
 8001cfc:	40012100 	.word	0x40012100
 8001d00:	40012200 	.word	0x40012200

08001d04 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_ADC_ConfigChannel+0x1c>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e105      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x228>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b09      	cmp	r3, #9
 8001d4a:	d925      	bls.n	8001d98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68d9      	ldr	r1, [r3, #12]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4413      	add	r3, r2
 8001d60:	3b1e      	subs	r3, #30
 8001d62:	2207      	movs	r2, #7
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43da      	mvns	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	400a      	ands	r2, r1
 8001d70:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68d9      	ldr	r1, [r3, #12]
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	4603      	mov	r3, r0
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4403      	add	r3, r0
 8001d8a:	3b1e      	subs	r3, #30
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	e022      	b.n	8001dde <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6919      	ldr	r1, [r3, #16]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	2207      	movs	r2, #7
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43da      	mvns	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	400a      	ands	r2, r1
 8001dba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6919      	ldr	r1, [r3, #16]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	4603      	mov	r3, r0
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4403      	add	r3, r0
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d824      	bhi.n	8001e30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	3b05      	subs	r3, #5
 8001df8:	221f      	movs	r2, #31
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43da      	mvns	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	400a      	ands	r2, r1
 8001e06:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	4618      	mov	r0, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	4413      	add	r3, r2
 8001e20:	3b05      	subs	r3, #5
 8001e22:	fa00 f203 	lsl.w	r2, r0, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e2e:	e04c      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b0c      	cmp	r3, #12
 8001e36:	d824      	bhi.n	8001e82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	3b23      	subs	r3, #35	; 0x23
 8001e4a:	221f      	movs	r2, #31
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43da      	mvns	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	400a      	ands	r2, r1
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	3b23      	subs	r3, #35	; 0x23
 8001e74:	fa00 f203 	lsl.w	r2, r0, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	631a      	str	r2, [r3, #48]	; 0x30
 8001e80:	e023      	b.n	8001eca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	3b41      	subs	r3, #65	; 0x41
 8001e94:	221f      	movs	r2, #31
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	3b41      	subs	r3, #65	; 0x41
 8001ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <HAL_ADC_ConfigChannel+0x234>)
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a21      	ldr	r2, [pc, #132]	; (8001f58 <HAL_ADC_ConfigChannel+0x238>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d109      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1cc>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b12      	cmp	r3, #18
 8001ede:	d105      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a19      	ldr	r2, [pc, #100]	; (8001f58 <HAL_ADC_ConfigChannel+0x238>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d123      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x21e>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d003      	beq.n	8001f06 <HAL_ADC_ConfigChannel+0x1e6>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b11      	cmp	r3, #17
 8001f04:	d11b      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b10      	cmp	r3, #16
 8001f18:	d111      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f1a:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <HAL_ADC_ConfigChannel+0x23c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <HAL_ADC_ConfigChannel+0x240>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	0c9a      	lsrs	r2, r3, #18
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f30:	e002      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f9      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	40012300 	.word	0x40012300
 8001f58:	40012000 	.word	0x40012000
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	431bde83 	.word	0x431bde83

08001f64 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f6c:	4b79      	ldr	r3, [pc, #484]	; (8002154 <ADC_Init+0x1f0>)
 8001f6e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6859      	ldr	r1, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	021a      	lsls	r2, r3, #8
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	430a      	orrs	r2, r1
 8001fac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6859      	ldr	r1, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6899      	ldr	r1, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	4a58      	ldr	r2, [pc, #352]	; (8002158 <ADC_Init+0x1f4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d022      	beq.n	8002042 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800200a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6899      	ldr	r1, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800202c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6899      	ldr	r1, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	e00f      	b.n	8002062 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002050:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002060:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0202 	bic.w	r2, r2, #2
 8002070:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6899      	ldr	r1, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7e1b      	ldrb	r3, [r3, #24]
 800207c:	005a      	lsls	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	430a      	orrs	r2, r1
 8002084:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01b      	beq.n	80020c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800209e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6859      	ldr	r1, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	3b01      	subs	r3, #1
 80020bc:	035a      	lsls	r2, r3, #13
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	e007      	b.n	80020d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	051a      	lsls	r2, r3, #20
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800210c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6899      	ldr	r1, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800211a:	025a      	lsls	r2, r3, #9
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002132:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6899      	ldr	r1, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	029a      	lsls	r2, r3, #10
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	609a      	str	r2, [r3, #8]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	40012300 	.word	0x40012300
 8002158:	0f000001 	.word	0x0f000001

0800215c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e0ed      	b.n	800234a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d102      	bne.n	8002180 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff f9aa 	bl	80014d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002190:	f7ff fc72 	bl	8001a78 <HAL_GetTick>
 8002194:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002196:	e012      	b.n	80021be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002198:	f7ff fc6e 	bl	8001a78 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b0a      	cmp	r3, #10
 80021a4:	d90b      	bls.n	80021be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2205      	movs	r2, #5
 80021b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0c5      	b.n	800234a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0e5      	beq.n	8002198 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0202 	bic.w	r2, r2, #2
 80021da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021dc:	f7ff fc4c 	bl	8001a78 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021e2:	e012      	b.n	800220a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021e4:	f7ff fc48 	bl	8001a78 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b0a      	cmp	r3, #10
 80021f0:	d90b      	bls.n	800220a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2205      	movs	r2, #5
 8002202:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e09f      	b.n	800234a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e5      	bne.n	80021e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7e1b      	ldrb	r3, [r3, #24]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d108      	bne.n	8002232 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	e007      	b.n	8002242 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002240:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	7e5b      	ldrb	r3, [r3, #25]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d108      	bne.n	800225c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e007      	b.n	800226c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800226a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	7e9b      	ldrb	r3, [r3, #26]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d108      	bne.n	8002286 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0220 	orr.w	r2, r2, #32
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e007      	b.n	8002296 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0220 	bic.w	r2, r2, #32
 8002294:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7edb      	ldrb	r3, [r3, #27]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d108      	bne.n	80022b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0210 	bic.w	r2, r2, #16
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	e007      	b.n	80022c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0210 	orr.w	r2, r2, #16
 80022be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7f1b      	ldrb	r3, [r3, #28]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d108      	bne.n	80022da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0208 	orr.w	r2, r2, #8
 80022d6:	601a      	str	r2, [r3, #0]
 80022d8:	e007      	b.n	80022ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0208 	bic.w	r2, r2, #8
 80022e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	7f5b      	ldrb	r3, [r3, #29]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d108      	bne.n	8002304 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0204 	orr.w	r2, r2, #4
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	e007      	b.n	8002314 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f022 0204 	bic.w	r2, r2, #4
 8002312:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	ea42 0103 	orr.w	r1, r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	1e5a      	subs	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800236a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800236c:	7cfb      	ldrb	r3, [r7, #19]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d003      	beq.n	800237a <HAL_CAN_ConfigFilter+0x26>
 8002372:	7cfb      	ldrb	r3, [r7, #19]
 8002374:	2b02      	cmp	r3, #2
 8002376:	f040 80be 	bne.w	80024f6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800237a:	4b65      	ldr	r3, [pc, #404]	; (8002510 <HAL_CAN_ConfigFilter+0x1bc>)
 800237c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002384:	f043 0201 	orr.w	r2, r3, #1
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002394:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	431a      	orrs	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	2201      	movs	r2, #1
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	401a      	ands	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d123      	bne.n	8002424 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	401a      	ands	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	3248      	adds	r2, #72	; 0x48
 8002404:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002418:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800241a:	6979      	ldr	r1, [r7, #20]
 800241c:	3348      	adds	r3, #72	; 0x48
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	440b      	add	r3, r1
 8002422:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d122      	bne.n	8002472 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	431a      	orrs	r2, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800244c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	3248      	adds	r2, #72	; 0x48
 8002452:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002466:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002468:	6979      	ldr	r1, [r7, #20]
 800246a:	3348      	adds	r3, #72	; 0x48
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	440b      	add	r3, r1
 8002470:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	43db      	mvns	r3, r3
 8002484:	401a      	ands	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800248c:	e007      	b.n	800249e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	431a      	orrs	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d109      	bne.n	80024ba <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	43db      	mvns	r3, r3
 80024b0:	401a      	ands	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80024b8:	e007      	b.n	80024ca <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	431a      	orrs	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d107      	bne.n	80024e2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	431a      	orrs	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024e8:	f023 0201 	bic.w	r2, r3, #1
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e006      	b.n	8002504 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
  }
}
 8002504:	4618      	mov	r0, r3
 8002506:	371c      	adds	r7, #28
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	40006400 	.word	0x40006400

08002514 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b01      	cmp	r3, #1
 8002526:	d12e      	bne.n	8002586 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0201 	bic.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002540:	f7ff fa9a 	bl	8001a78 <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002546:	e012      	b.n	800256e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002548:	f7ff fa96 	bl	8001a78 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b0a      	cmp	r3, #10
 8002554:	d90b      	bls.n	800256e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2205      	movs	r2, #5
 8002566:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e012      	b.n	8002594 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e5      	bne.n	8002548 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	e006      	b.n	8002594 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
  }
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800259c:	b480      	push	{r7}
 800259e:	b089      	sub	sp, #36	; 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80025ba:	7ffb      	ldrb	r3, [r7, #31]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d003      	beq.n	80025c8 <HAL_CAN_AddTxMessage+0x2c>
 80025c0:	7ffb      	ldrb	r3, [r7, #31]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	f040 80b8 	bne.w	8002738 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10a      	bne.n	80025e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d105      	bne.n	80025e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 80a0 	beq.w	8002728 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	0e1b      	lsrs	r3, r3, #24
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d907      	bls.n	8002608 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e09e      	b.n	8002746 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002608:	2201      	movs	r2, #1
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	409a      	lsls	r2, r3
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10d      	bne.n	8002636 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002624:	68f9      	ldr	r1, [r7, #12]
 8002626:	6809      	ldr	r1, [r1, #0]
 8002628:	431a      	orrs	r2, r3
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	3318      	adds	r3, #24
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	440b      	add	r3, r1
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	e00f      	b.n	8002656 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002640:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002646:	68f9      	ldr	r1, [r7, #12]
 8002648:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800264a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	3318      	adds	r3, #24
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	440b      	add	r3, r1
 8002654:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6819      	ldr	r1, [r3, #0]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	3318      	adds	r3, #24
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	440b      	add	r3, r1
 8002666:	3304      	adds	r3, #4
 8002668:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	7d1b      	ldrb	r3, [r3, #20]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d111      	bne.n	8002696 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	3318      	adds	r3, #24
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	4413      	add	r3, r2
 800267e:	3304      	adds	r3, #4
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	6811      	ldr	r1, [r2, #0]
 8002686:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	3318      	adds	r3, #24
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	440b      	add	r3, r1
 8002692:	3304      	adds	r3, #4
 8002694:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3307      	adds	r3, #7
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	061a      	lsls	r2, r3, #24
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3306      	adds	r3, #6
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3305      	adds	r3, #5
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	4313      	orrs	r3, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	3204      	adds	r2, #4
 80026b6:	7812      	ldrb	r2, [r2, #0]
 80026b8:	4610      	mov	r0, r2
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	6811      	ldr	r1, [r2, #0]
 80026be:	ea43 0200 	orr.w	r2, r3, r0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	440b      	add	r3, r1
 80026c8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80026cc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3303      	adds	r3, #3
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	061a      	lsls	r2, r3, #24
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3302      	adds	r3, #2
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	041b      	lsls	r3, r3, #16
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3301      	adds	r3, #1
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	4313      	orrs	r3, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	7812      	ldrb	r2, [r2, #0]
 80026ee:	4610      	mov	r0, r2
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	6811      	ldr	r1, [r2, #0]
 80026f4:	ea43 0200 	orr.w	r2, r3, r0
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	440b      	add	r3, r1
 80026fe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002702:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	3318      	adds	r3, #24
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	4413      	add	r3, r2
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	6811      	ldr	r1, [r2, #0]
 8002716:	f043 0201 	orr.w	r2, r3, #1
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	3318      	adds	r3, #24
 800271e:	011b      	lsls	r3, r3, #4
 8002720:	440b      	add	r3, r1
 8002722:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002724:	2300      	movs	r3, #0
 8002726:	e00e      	b.n	8002746 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e006      	b.n	8002746 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
  }
}
 8002746:	4618      	mov	r0, r3
 8002748:	3724      	adds	r7, #36	; 0x24
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002752:	b480      	push	{r7}
 8002754:	b087      	sub	sp, #28
 8002756:	af00      	add	r7, sp, #0
 8002758:	60f8      	str	r0, [r7, #12]
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002766:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002768:	7dfb      	ldrb	r3, [r7, #23]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d003      	beq.n	8002776 <HAL_CAN_GetRxMessage+0x24>
 800276e:	7dfb      	ldrb	r3, [r7, #23]
 8002770:	2b02      	cmp	r3, #2
 8002772:	f040 80f3 	bne.w	800295c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10e      	bne.n	800279a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d116      	bne.n	80027b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e0e7      	b.n	800296a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d107      	bne.n	80027b8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0d8      	b.n	800296a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	331b      	adds	r3, #27
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	4413      	add	r3, r2
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0204 	and.w	r2, r3, #4
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10c      	bne.n	80027f0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	331b      	adds	r3, #27
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	4413      	add	r3, r2
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	0d5b      	lsrs	r3, r3, #21
 80027e6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e00b      	b.n	8002808 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	331b      	adds	r3, #27
 80027f8:	011b      	lsls	r3, r3, #4
 80027fa:	4413      	add	r3, r2
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	08db      	lsrs	r3, r3, #3
 8002800:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	331b      	adds	r3, #27
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	4413      	add	r3, r2
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0202 	and.w	r2, r3, #2
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	331b      	adds	r3, #27
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	4413      	add	r3, r2
 800282a:	3304      	adds	r3, #4
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 020f 	and.w	r2, r3, #15
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	331b      	adds	r3, #27
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	4413      	add	r3, r2
 8002842:	3304      	adds	r3, #4
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	0a1b      	lsrs	r3, r3, #8
 8002848:	b2da      	uxtb	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	331b      	adds	r3, #27
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	4413      	add	r3, r2
 800285a:	3304      	adds	r3, #4
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	0c1b      	lsrs	r3, r3, #16
 8002860:	b29a      	uxth	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	4413      	add	r3, r2
 8002870:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	b2da      	uxtb	r2, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	4413      	add	r3, r2
 8002886:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	0a1a      	lsrs	r2, r3, #8
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	3301      	adds	r3, #1
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	4413      	add	r3, r2
 80028a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	0c1a      	lsrs	r2, r3, #16
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	3302      	adds	r3, #2
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	0e1a      	lsrs	r2, r3, #24
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	3303      	adds	r3, #3
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	3304      	adds	r3, #4
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	0a1a      	lsrs	r2, r3, #8
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	3305      	adds	r3, #5
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	4413      	add	r3, r2
 8002906:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	0c1a      	lsrs	r2, r3, #16
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	3306      	adds	r3, #6
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	4413      	add	r3, r2
 8002920:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	0e1a      	lsrs	r2, r3, #24
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	3307      	adds	r3, #7
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d108      	bne.n	8002948 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0220 	orr.w	r2, r2, #32
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	e007      	b.n	8002958 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691a      	ldr	r2, [r3, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0220 	orr.w	r2, r2, #32
 8002956:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	e006      	b.n	800296a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
  }
}
 800296a:	4618      	mov	r0, r3
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002976:	b480      	push	{r7}
 8002978:	b085      	sub	sp, #20
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002986:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d002      	beq.n	8002994 <HAL_CAN_ActivateNotification+0x1e>
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	2b02      	cmp	r3, #2
 8002992:	d109      	bne.n	80029a8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6959      	ldr	r1, [r3, #20]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	e006      	b.n	80029b6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
  }
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b08a      	sub	sp, #40	; 0x28
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80029ca:	2300      	movs	r3, #0
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695b      	ldr	r3, [r3, #20]
 80029d4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d07c      	beq.n	8002b02 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d023      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2201      	movs	r2, #1
 8002a18:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f983 	bl	8002d30 <HAL_CAN_TxMailbox0CompleteCallback>
 8002a2a:	e016      	b.n	8002a5a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d004      	beq.n	8002a40 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3e:	e00c      	b.n	8002a5a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	f003 0308 	and.w	r3, r3, #8
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d004      	beq.n	8002a54 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
 8002a52:	e002      	b.n	8002a5a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f989 	bl	8002d6c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d024      	beq.n	8002aae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f963 	bl	8002d44 <HAL_CAN_TxMailbox1CompleteCallback>
 8002a7e:	e016      	b.n	8002aae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d004      	beq.n	8002a94 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
 8002a92:	e00c      	b.n	8002aae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d004      	beq.n	8002aa8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa6:	e002      	b.n	8002aae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 f969 	bl	8002d80 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d024      	beq.n	8002b02 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ac0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f943 	bl	8002d58 <HAL_CAN_TxMailbox2CompleteCallback>
 8002ad2:	e016      	b.n	8002b02 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d004      	beq.n	8002ae8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae6:	e00c      	b.n	8002b02 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d004      	beq.n	8002afc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
 8002afa:	e002      	b.n	8002b02 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f949 	bl	8002d94 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00c      	beq.n	8002b26 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2210      	movs	r2, #16
 8002b24:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00b      	beq.n	8002b48 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d006      	beq.n	8002b48 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2208      	movs	r2, #8
 8002b40:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f930 	bl	8002da8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d002      	beq.n	8002b66 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7fd ff65 	bl	8000a30 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00c      	beq.n	8002b8a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2210      	movs	r2, #16
 8002b88:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00b      	beq.n	8002bac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d006      	beq.n	8002bac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2208      	movs	r2, #8
 8002ba4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f908 	bl	8002dbc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7fd ffdf 	bl	8000b88 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00b      	beq.n	8002bec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d006      	beq.n	8002bec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2210      	movs	r2, #16
 8002be4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f8f2 	bl	8002dd0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d006      	beq.n	8002c0e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2208      	movs	r2, #8
 8002c06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f8eb 	bl	8002de4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d07b      	beq.n	8002d10 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d072      	beq.n	8002d08 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	f043 0302 	orr.w	r3, r3, #2
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	f043 0304 	orr.w	r3, r3, #4
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d043      	beq.n	8002d08 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d03e      	beq.n	8002d08 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c90:	2b60      	cmp	r3, #96	; 0x60
 8002c92:	d02b      	beq.n	8002cec <HAL_CAN_IRQHandler+0x32a>
 8002c94:	2b60      	cmp	r3, #96	; 0x60
 8002c96:	d82e      	bhi.n	8002cf6 <HAL_CAN_IRQHandler+0x334>
 8002c98:	2b50      	cmp	r3, #80	; 0x50
 8002c9a:	d022      	beq.n	8002ce2 <HAL_CAN_IRQHandler+0x320>
 8002c9c:	2b50      	cmp	r3, #80	; 0x50
 8002c9e:	d82a      	bhi.n	8002cf6 <HAL_CAN_IRQHandler+0x334>
 8002ca0:	2b40      	cmp	r3, #64	; 0x40
 8002ca2:	d019      	beq.n	8002cd8 <HAL_CAN_IRQHandler+0x316>
 8002ca4:	2b40      	cmp	r3, #64	; 0x40
 8002ca6:	d826      	bhi.n	8002cf6 <HAL_CAN_IRQHandler+0x334>
 8002ca8:	2b30      	cmp	r3, #48	; 0x30
 8002caa:	d010      	beq.n	8002cce <HAL_CAN_IRQHandler+0x30c>
 8002cac:	2b30      	cmp	r3, #48	; 0x30
 8002cae:	d822      	bhi.n	8002cf6 <HAL_CAN_IRQHandler+0x334>
 8002cb0:	2b10      	cmp	r3, #16
 8002cb2:	d002      	beq.n	8002cba <HAL_CAN_IRQHandler+0x2f8>
 8002cb4:	2b20      	cmp	r3, #32
 8002cb6:	d005      	beq.n	8002cc4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002cb8:	e01d      	b.n	8002cf6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	f043 0308 	orr.w	r3, r3, #8
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cc2:	e019      	b.n	8002cf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	f043 0310 	orr.w	r3, r3, #16
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ccc:	e014      	b.n	8002cf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	f043 0320 	orr.w	r3, r3, #32
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cd6:	e00f      	b.n	8002cf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ce0:	e00a      	b.n	8002cf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cea:	e005      	b.n	8002cf8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002cf4:	e000      	b.n	8002cf8 <HAL_CAN_IRQHandler+0x336>
            break;
 8002cf6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d06:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2204      	movs	r2, #4
 8002d0e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f868 	bl	8002df8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002d28:	bf00      	nop
 8002d2a:	3728      	adds	r7, #40	; 0x28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <__NVIC_SetPriorityGrouping+0x44>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e3e:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <__NVIC_SetPriorityGrouping+0x44>)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	60d3      	str	r3, [r2, #12]
}
 8002e44:	bf00      	nop
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e58:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <__NVIC_GetPriorityGrouping+0x18>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	0a1b      	lsrs	r3, r3, #8
 8002e5e:	f003 0307 	and.w	r3, r3, #7
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	db0b      	blt.n	8002e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	f003 021f 	and.w	r2, r3, #31
 8002e88:	4907      	ldr	r1, [pc, #28]	; (8002ea8 <__NVIC_EnableIRQ+0x38>)
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	095b      	lsrs	r3, r3, #5
 8002e90:	2001      	movs	r0, #1
 8002e92:	fa00 f202 	lsl.w	r2, r0, r2
 8002e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000e100 	.word	0xe000e100

08002eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	6039      	str	r1, [r7, #0]
 8002eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	db0a      	blt.n	8002ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	490c      	ldr	r1, [pc, #48]	; (8002ef8 <__NVIC_SetPriority+0x4c>)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	0112      	lsls	r2, r2, #4
 8002ecc:	b2d2      	uxtb	r2, r2
 8002ece:	440b      	add	r3, r1
 8002ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed4:	e00a      	b.n	8002eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	4908      	ldr	r1, [pc, #32]	; (8002efc <__NVIC_SetPriority+0x50>)
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	3b04      	subs	r3, #4
 8002ee4:	0112      	lsls	r2, r2, #4
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	440b      	add	r3, r1
 8002eea:	761a      	strb	r2, [r3, #24]
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000e100 	.word	0xe000e100
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b089      	sub	sp, #36	; 0x24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f1c3 0307 	rsb	r3, r3, #7
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	bf28      	it	cs
 8002f1e:	2304      	movcs	r3, #4
 8002f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	3304      	adds	r3, #4
 8002f26:	2b06      	cmp	r3, #6
 8002f28:	d902      	bls.n	8002f30 <NVIC_EncodePriority+0x30>
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3b03      	subs	r3, #3
 8002f2e:	e000      	b.n	8002f32 <NVIC_EncodePriority+0x32>
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f34:	f04f 32ff 	mov.w	r2, #4294967295
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	401a      	ands	r2, r3
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f48:	f04f 31ff 	mov.w	r1, #4294967295
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f52:	43d9      	mvns	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f58:	4313      	orrs	r3, r2
         );
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3724      	adds	r7, #36	; 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
	...

08002f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f78:	d301      	bcc.n	8002f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e00f      	b.n	8002f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f7e:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <SysTick_Config+0x40>)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f86:	210f      	movs	r1, #15
 8002f88:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8c:	f7ff ff8e 	bl	8002eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <SysTick_Config+0x40>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f96:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <SysTick_Config+0x40>)
 8002f98:	2207      	movs	r2, #7
 8002f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	e000e010 	.word	0xe000e010

08002fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ff29 	bl	8002e0c <__NVIC_SetPriorityGrouping>
}
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b086      	sub	sp, #24
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	4603      	mov	r3, r0
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fd4:	f7ff ff3e 	bl	8002e54 <__NVIC_GetPriorityGrouping>
 8002fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	6978      	ldr	r0, [r7, #20]
 8002fe0:	f7ff ff8e 	bl	8002f00 <NVIC_EncodePriority>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fea:	4611      	mov	r1, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff ff5d 	bl	8002eac <__NVIC_SetPriority>
}
 8002ff2:	bf00      	nop
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ffa:	b580      	push	{r7, lr}
 8002ffc:	b082      	sub	sp, #8
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	4603      	mov	r3, r0
 8003002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff ff31 	bl	8002e70 <__NVIC_EnableIRQ>
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b082      	sub	sp, #8
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff ffa2 	bl	8002f68 <SysTick_Config>
 8003024:	4603      	mov	r3, r0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003030:	b480      	push	{r7}
 8003032:	b089      	sub	sp, #36	; 0x24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800303e:	2300      	movs	r3, #0
 8003040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003042:	2300      	movs	r3, #0
 8003044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	e16b      	b.n	8003324 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800304c:	2201      	movs	r2, #1
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	429a      	cmp	r2, r3
 8003066:	f040 815a 	bne.w	800331e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b01      	cmp	r3, #1
 8003074:	d005      	beq.n	8003082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800307e:	2b02      	cmp	r3, #2
 8003080:	d130      	bne.n	80030e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	2203      	movs	r2, #3
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b8:	2201      	movs	r2, #1
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 0201 	and.w	r2, r3, #1
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d017      	beq.n	8003120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	2203      	movs	r2, #3
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d123      	bne.n	8003174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	08da      	lsrs	r2, r3, #3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3208      	adds	r2, #8
 8003134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	220f      	movs	r2, #15
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	08da      	lsrs	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3208      	adds	r2, #8
 800316e:	69b9      	ldr	r1, [r7, #24]
 8003170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0203 	and.w	r2, r3, #3
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80b4 	beq.w	800331e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	4b60      	ldr	r3, [pc, #384]	; (800333c <HAL_GPIO_Init+0x30c>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	4a5f      	ldr	r2, [pc, #380]	; (800333c <HAL_GPIO_Init+0x30c>)
 80031c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031c4:	6453      	str	r3, [r2, #68]	; 0x44
 80031c6:	4b5d      	ldr	r3, [pc, #372]	; (800333c <HAL_GPIO_Init+0x30c>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031d2:	4a5b      	ldr	r2, [pc, #364]	; (8003340 <HAL_GPIO_Init+0x310>)
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	089b      	lsrs	r3, r3, #2
 80031d8:	3302      	adds	r3, #2
 80031da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	220f      	movs	r2, #15
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a52      	ldr	r2, [pc, #328]	; (8003344 <HAL_GPIO_Init+0x314>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d02b      	beq.n	8003256 <HAL_GPIO_Init+0x226>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a51      	ldr	r2, [pc, #324]	; (8003348 <HAL_GPIO_Init+0x318>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d025      	beq.n	8003252 <HAL_GPIO_Init+0x222>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a50      	ldr	r2, [pc, #320]	; (800334c <HAL_GPIO_Init+0x31c>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d01f      	beq.n	800324e <HAL_GPIO_Init+0x21e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a4f      	ldr	r2, [pc, #316]	; (8003350 <HAL_GPIO_Init+0x320>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d019      	beq.n	800324a <HAL_GPIO_Init+0x21a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a4e      	ldr	r2, [pc, #312]	; (8003354 <HAL_GPIO_Init+0x324>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <HAL_GPIO_Init+0x216>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a4d      	ldr	r2, [pc, #308]	; (8003358 <HAL_GPIO_Init+0x328>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00d      	beq.n	8003242 <HAL_GPIO_Init+0x212>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a4c      	ldr	r2, [pc, #304]	; (800335c <HAL_GPIO_Init+0x32c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d007      	beq.n	800323e <HAL_GPIO_Init+0x20e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a4b      	ldr	r2, [pc, #300]	; (8003360 <HAL_GPIO_Init+0x330>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d101      	bne.n	800323a <HAL_GPIO_Init+0x20a>
 8003236:	2307      	movs	r3, #7
 8003238:	e00e      	b.n	8003258 <HAL_GPIO_Init+0x228>
 800323a:	2308      	movs	r3, #8
 800323c:	e00c      	b.n	8003258 <HAL_GPIO_Init+0x228>
 800323e:	2306      	movs	r3, #6
 8003240:	e00a      	b.n	8003258 <HAL_GPIO_Init+0x228>
 8003242:	2305      	movs	r3, #5
 8003244:	e008      	b.n	8003258 <HAL_GPIO_Init+0x228>
 8003246:	2304      	movs	r3, #4
 8003248:	e006      	b.n	8003258 <HAL_GPIO_Init+0x228>
 800324a:	2303      	movs	r3, #3
 800324c:	e004      	b.n	8003258 <HAL_GPIO_Init+0x228>
 800324e:	2302      	movs	r3, #2
 8003250:	e002      	b.n	8003258 <HAL_GPIO_Init+0x228>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <HAL_GPIO_Init+0x228>
 8003256:	2300      	movs	r3, #0
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	f002 0203 	and.w	r2, r2, #3
 800325e:	0092      	lsls	r2, r2, #2
 8003260:	4093      	lsls	r3, r2
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003268:	4935      	ldr	r1, [pc, #212]	; (8003340 <HAL_GPIO_Init+0x310>)
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	089b      	lsrs	r3, r3, #2
 800326e:	3302      	adds	r3, #2
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003276:	4b3b      	ldr	r3, [pc, #236]	; (8003364 <HAL_GPIO_Init+0x334>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800329a:	4a32      	ldr	r2, [pc, #200]	; (8003364 <HAL_GPIO_Init+0x334>)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032a0:	4b30      	ldr	r3, [pc, #192]	; (8003364 <HAL_GPIO_Init+0x334>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032c4:	4a27      	ldr	r2, [pc, #156]	; (8003364 <HAL_GPIO_Init+0x334>)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032ca:	4b26      	ldr	r3, [pc, #152]	; (8003364 <HAL_GPIO_Init+0x334>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	43db      	mvns	r3, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4013      	ands	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ee:	4a1d      	ldr	r2, [pc, #116]	; (8003364 <HAL_GPIO_Init+0x334>)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032f4:	4b1b      	ldr	r3, [pc, #108]	; (8003364 <HAL_GPIO_Init+0x334>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003318:	4a12      	ldr	r2, [pc, #72]	; (8003364 <HAL_GPIO_Init+0x334>)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3301      	adds	r3, #1
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	2b0f      	cmp	r3, #15
 8003328:	f67f ae90 	bls.w	800304c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	3724      	adds	r7, #36	; 0x24
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40023800 	.word	0x40023800
 8003340:	40013800 	.word	0x40013800
 8003344:	40020000 	.word	0x40020000
 8003348:	40020400 	.word	0x40020400
 800334c:	40020800 	.word	0x40020800
 8003350:	40020c00 	.word	0x40020c00
 8003354:	40021000 	.word	0x40021000
 8003358:	40021400 	.word	0x40021400
 800335c:	40021800 	.word	0x40021800
 8003360:	40021c00 	.word	0x40021c00
 8003364:	40013c00 	.word	0x40013c00

08003368 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d006      	beq.n	800338c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800337e:	4a05      	ldr	r2, [pc, #20]	; (8003394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd fd10 	bl	8000dac <HAL_GPIO_EXTI_Callback>
  }
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40013c00 	.word	0x40013c00

08003398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e267      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d075      	beq.n	80034a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033b6:	4b88      	ldr	r3, [pc, #544]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d00c      	beq.n	80033dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c2:	4b85      	ldr	r3, [pc, #532]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ca:	2b08      	cmp	r3, #8
 80033cc:	d112      	bne.n	80033f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ce:	4b82      	ldr	r3, [pc, #520]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033da:	d10b      	bne.n	80033f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033dc:	4b7e      	ldr	r3, [pc, #504]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d05b      	beq.n	80034a0 <HAL_RCC_OscConfig+0x108>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d157      	bne.n	80034a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e242      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fc:	d106      	bne.n	800340c <HAL_RCC_OscConfig+0x74>
 80033fe:	4b76      	ldr	r3, [pc, #472]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a75      	ldr	r2, [pc, #468]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e01d      	b.n	8003448 <HAL_RCC_OscConfig+0xb0>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003414:	d10c      	bne.n	8003430 <HAL_RCC_OscConfig+0x98>
 8003416:	4b70      	ldr	r3, [pc, #448]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a6f      	ldr	r2, [pc, #444]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 800341c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	4b6d      	ldr	r3, [pc, #436]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a6c      	ldr	r2, [pc, #432]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e00b      	b.n	8003448 <HAL_RCC_OscConfig+0xb0>
 8003430:	4b69      	ldr	r3, [pc, #420]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a68      	ldr	r2, [pc, #416]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	4b66      	ldr	r3, [pc, #408]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a65      	ldr	r2, [pc, #404]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d013      	beq.n	8003478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fe fb12 	bl	8001a78 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003458:	f7fe fb0e 	bl	8001a78 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b64      	cmp	r3, #100	; 0x64
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e207      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	4b5b      	ldr	r3, [pc, #364]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0xc0>
 8003476:	e014      	b.n	80034a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7fe fafe 	bl	8001a78 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003480:	f7fe fafa 	bl	8001a78 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b64      	cmp	r3, #100	; 0x64
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e1f3      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003492:	4b51      	ldr	r3, [pc, #324]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0xe8>
 800349e:	e000      	b.n	80034a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d063      	beq.n	8003576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ae:	4b4a      	ldr	r3, [pc, #296]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00b      	beq.n	80034d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ba:	4b47      	ldr	r3, [pc, #284]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d11c      	bne.n	8003500 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034c6:	4b44      	ldr	r3, [pc, #272]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d116      	bne.n	8003500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d2:	4b41      	ldr	r3, [pc, #260]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d005      	beq.n	80034ea <HAL_RCC_OscConfig+0x152>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d001      	beq.n	80034ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e1c7      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ea:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4937      	ldr	r1, [pc, #220]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034fe:	e03a      	b.n	8003576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d020      	beq.n	800354a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003508:	4b34      	ldr	r3, [pc, #208]	; (80035dc <HAL_RCC_OscConfig+0x244>)
 800350a:	2201      	movs	r2, #1
 800350c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350e:	f7fe fab3 	bl	8001a78 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003516:	f7fe faaf 	bl	8001a78 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e1a8      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003528:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003534:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4925      	ldr	r1, [pc, #148]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 8003544:	4313      	orrs	r3, r2
 8003546:	600b      	str	r3, [r1, #0]
 8003548:	e015      	b.n	8003576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354a:	4b24      	ldr	r3, [pc, #144]	; (80035dc <HAL_RCC_OscConfig+0x244>)
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003550:	f7fe fa92 	bl	8001a78 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003558:	f7fe fa8e 	bl	8001a78 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e187      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356a:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d036      	beq.n	80035f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d016      	beq.n	80035b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800358a:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <HAL_RCC_OscConfig+0x248>)
 800358c:	2201      	movs	r2, #1
 800358e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003590:	f7fe fa72 	bl	8001a78 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003598:	f7fe fa6e 	bl	8001a78 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e167      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035aa:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_OscConfig+0x240>)
 80035ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0x200>
 80035b6:	e01b      	b.n	80035f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <HAL_RCC_OscConfig+0x248>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035be:	f7fe fa5b 	bl	8001a78 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c4:	e00e      	b.n	80035e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c6:	f7fe fa57 	bl	8001a78 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d907      	bls.n	80035e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e150      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
 80035d8:	40023800 	.word	0x40023800
 80035dc:	42470000 	.word	0x42470000
 80035e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e4:	4b88      	ldr	r3, [pc, #544]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80035e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1ea      	bne.n	80035c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 8097 	beq.w	800372c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035fe:	2300      	movs	r3, #0
 8003600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003602:	4b81      	ldr	r3, [pc, #516]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10f      	bne.n	800362e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	4b7d      	ldr	r3, [pc, #500]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	4a7c      	ldr	r2, [pc, #496]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361c:	6413      	str	r3, [r2, #64]	; 0x40
 800361e:	4b7a      	ldr	r3, [pc, #488]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800362a:	2301      	movs	r3, #1
 800362c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362e:	4b77      	ldr	r3, [pc, #476]	; (800380c <HAL_RCC_OscConfig+0x474>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d118      	bne.n	800366c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800363a:	4b74      	ldr	r3, [pc, #464]	; (800380c <HAL_RCC_OscConfig+0x474>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a73      	ldr	r2, [pc, #460]	; (800380c <HAL_RCC_OscConfig+0x474>)
 8003640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003646:	f7fe fa17 	bl	8001a78 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364e:	f7fe fa13 	bl	8001a78 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e10c      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003660:	4b6a      	ldr	r3, [pc, #424]	; (800380c <HAL_RCC_OscConfig+0x474>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d0f0      	beq.n	800364e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d106      	bne.n	8003682 <HAL_RCC_OscConfig+0x2ea>
 8003674:	4b64      	ldr	r3, [pc, #400]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	4a63      	ldr	r2, [pc, #396]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6713      	str	r3, [r2, #112]	; 0x70
 8003680:	e01c      	b.n	80036bc <HAL_RCC_OscConfig+0x324>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b05      	cmp	r3, #5
 8003688:	d10c      	bne.n	80036a4 <HAL_RCC_OscConfig+0x30c>
 800368a:	4b5f      	ldr	r3, [pc, #380]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	4a5e      	ldr	r2, [pc, #376]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003690:	f043 0304 	orr.w	r3, r3, #4
 8003694:	6713      	str	r3, [r2, #112]	; 0x70
 8003696:	4b5c      	ldr	r3, [pc, #368]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	4a5b      	ldr	r2, [pc, #364]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6713      	str	r3, [r2, #112]	; 0x70
 80036a2:	e00b      	b.n	80036bc <HAL_RCC_OscConfig+0x324>
 80036a4:	4b58      	ldr	r3, [pc, #352]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a8:	4a57      	ldr	r2, [pc, #348]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	6713      	str	r3, [r2, #112]	; 0x70
 80036b0:	4b55      	ldr	r3, [pc, #340]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	4a54      	ldr	r2, [pc, #336]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80036b6:	f023 0304 	bic.w	r3, r3, #4
 80036ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d015      	beq.n	80036f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c4:	f7fe f9d8 	bl	8001a78 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ca:	e00a      	b.n	80036e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036cc:	f7fe f9d4 	bl	8001a78 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036da:	4293      	cmp	r3, r2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e0cb      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e2:	4b49      	ldr	r3, [pc, #292]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0ee      	beq.n	80036cc <HAL_RCC_OscConfig+0x334>
 80036ee:	e014      	b.n	800371a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f0:	f7fe f9c2 	bl	8001a78 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f6:	e00a      	b.n	800370e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036f8:	f7fe f9be 	bl	8001a78 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	f241 3288 	movw	r2, #5000	; 0x1388
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e0b5      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370e:	4b3e      	ldr	r3, [pc, #248]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1ee      	bne.n	80036f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800371a:	7dfb      	ldrb	r3, [r7, #23]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d105      	bne.n	800372c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003720:	4b39      	ldr	r3, [pc, #228]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	4a38      	ldr	r2, [pc, #224]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80a1 	beq.w	8003878 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003736:	4b34      	ldr	r3, [pc, #208]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
 800373e:	2b08      	cmp	r3, #8
 8003740:	d05c      	beq.n	80037fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d141      	bne.n	80037ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374a:	4b31      	ldr	r3, [pc, #196]	; (8003810 <HAL_RCC_OscConfig+0x478>)
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003750:	f7fe f992 	bl	8001a78 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003758:	f7fe f98e 	bl	8001a78 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e087      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376a:	4b27      	ldr	r3, [pc, #156]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	019b      	lsls	r3, r3, #6
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	085b      	lsrs	r3, r3, #1
 800378e:	3b01      	subs	r3, #1
 8003790:	041b      	lsls	r3, r3, #16
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	061b      	lsls	r3, r3, #24
 800379a:	491b      	ldr	r1, [pc, #108]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <HAL_RCC_OscConfig+0x478>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a6:	f7fe f967 	bl	8001a78 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ae:	f7fe f963 	bl	8001a78 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e05c      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c0:	4b11      	ldr	r3, [pc, #68]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x416>
 80037cc:	e054      	b.n	8003878 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <HAL_RCC_OscConfig+0x478>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fe f950 	bl	8001a78 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037dc:	f7fe f94c 	bl	8001a78 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e045      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCC_OscConfig+0x470>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x444>
 80037fa:	e03d      	b.n	8003878 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d107      	bne.n	8003814 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e038      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
 8003808:	40023800 	.word	0x40023800
 800380c:	40007000 	.word	0x40007000
 8003810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003814:	4b1b      	ldr	r3, [pc, #108]	; (8003884 <HAL_RCC_OscConfig+0x4ec>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d028      	beq.n	8003874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800382c:	429a      	cmp	r2, r3
 800382e:	d121      	bne.n	8003874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383a:	429a      	cmp	r2, r3
 800383c:	d11a      	bne.n	8003874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003844:	4013      	ands	r3, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800384a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800384c:	4293      	cmp	r3, r2
 800384e:	d111      	bne.n	8003874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	085b      	lsrs	r3, r3, #1
 800385c:	3b01      	subs	r3, #1
 800385e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d107      	bne.n	8003874 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40023800 	.word	0x40023800

08003888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0cc      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800389c:	4b68      	ldr	r3, [pc, #416]	; (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d90c      	bls.n	80038c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b65      	ldr	r3, [pc, #404]	; (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b63      	ldr	r3, [pc, #396]	; (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e0b8      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d020      	beq.n	8003912 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038dc:	4b59      	ldr	r3, [pc, #356]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a58      	ldr	r2, [pc, #352]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038f4:	4b53      	ldr	r3, [pc, #332]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	4a52      	ldr	r2, [pc, #328]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003900:	4b50      	ldr	r3, [pc, #320]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	494d      	ldr	r1, [pc, #308]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	4313      	orrs	r3, r2
 8003910:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d044      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d107      	bne.n	8003936 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d119      	bne.n	8003966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e07f      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d003      	beq.n	8003946 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003942:	2b03      	cmp	r3, #3
 8003944:	d107      	bne.n	8003956 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003946:	4b3f      	ldr	r3, [pc, #252]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e06f      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003956:	4b3b      	ldr	r3, [pc, #236]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e067      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003966:	4b37      	ldr	r3, [pc, #220]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f023 0203 	bic.w	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	4934      	ldr	r1, [pc, #208]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	4313      	orrs	r3, r2
 8003976:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003978:	f7fe f87e 	bl	8001a78 <HAL_GetTick>
 800397c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397e:	e00a      	b.n	8003996 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003980:	f7fe f87a 	bl	8001a78 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e04f      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003996:	4b2b      	ldr	r3, [pc, #172]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 020c 	and.w	r2, r3, #12
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d1eb      	bne.n	8003980 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a8:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d20c      	bcs.n	80039d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b22      	ldr	r3, [pc, #136]	; (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039be:	4b20      	ldr	r3, [pc, #128]	; (8003a40 <HAL_RCC_ClockConfig+0x1b8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e032      	b.n	8003a36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d008      	beq.n	80039ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039dc:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4916      	ldr	r1, [pc, #88]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d009      	beq.n	8003a0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039fa:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	490e      	ldr	r1, [pc, #56]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a0e:	f000 f821 	bl	8003a54 <HAL_RCC_GetSysClockFreq>
 8003a12:	4602      	mov	r2, r0
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	091b      	lsrs	r3, r3, #4
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	490a      	ldr	r1, [pc, #40]	; (8003a48 <HAL_RCC_ClockConfig+0x1c0>)
 8003a20:	5ccb      	ldrb	r3, [r1, r3]
 8003a22:	fa22 f303 	lsr.w	r3, r2, r3
 8003a26:	4a09      	ldr	r2, [pc, #36]	; (8003a4c <HAL_RCC_ClockConfig+0x1c4>)
 8003a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fd ffde 	bl	80019f0 <HAL_InitTick>

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40023c00 	.word	0x40023c00
 8003a44:	40023800 	.word	0x40023800
 8003a48:	08005f9c 	.word	0x08005f9c
 8003a4c:	20000000 	.word	0x20000000
 8003a50:	20000004 	.word	0x20000004

08003a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a58:	b094      	sub	sp, #80	; 0x50
 8003a5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003a60:	2300      	movs	r3, #0
 8003a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a64:	2300      	movs	r3, #0
 8003a66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a6c:	4b79      	ldr	r3, [pc, #484]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 030c 	and.w	r3, r3, #12
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d00d      	beq.n	8003a94 <HAL_RCC_GetSysClockFreq+0x40>
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	f200 80e1 	bhi.w	8003c40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x34>
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d003      	beq.n	8003a8e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a86:	e0db      	b.n	8003c40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a88:	4b73      	ldr	r3, [pc, #460]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a8c:	e0db      	b.n	8003c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a8e:	4b73      	ldr	r3, [pc, #460]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x208>)
 8003a90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a92:	e0d8      	b.n	8003c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a94:	4b6f      	ldr	r3, [pc, #444]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a9e:	4b6d      	ldr	r3, [pc, #436]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d063      	beq.n	8003b72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aaa:	4b6a      	ldr	r3, [pc, #424]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	099b      	lsrs	r3, r3, #6
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ab4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003abc:	633b      	str	r3, [r7, #48]	; 0x30
 8003abe:	2300      	movs	r3, #0
 8003ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ac6:	4622      	mov	r2, r4
 8003ac8:	462b      	mov	r3, r5
 8003aca:	f04f 0000 	mov.w	r0, #0
 8003ace:	f04f 0100 	mov.w	r1, #0
 8003ad2:	0159      	lsls	r1, r3, #5
 8003ad4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ad8:	0150      	lsls	r0, r2, #5
 8003ada:	4602      	mov	r2, r0
 8003adc:	460b      	mov	r3, r1
 8003ade:	4621      	mov	r1, r4
 8003ae0:	1a51      	subs	r1, r2, r1
 8003ae2:	6139      	str	r1, [r7, #16]
 8003ae4:	4629      	mov	r1, r5
 8003ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003af8:	4659      	mov	r1, fp
 8003afa:	018b      	lsls	r3, r1, #6
 8003afc:	4651      	mov	r1, sl
 8003afe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b02:	4651      	mov	r1, sl
 8003b04:	018a      	lsls	r2, r1, #6
 8003b06:	4651      	mov	r1, sl
 8003b08:	ebb2 0801 	subs.w	r8, r2, r1
 8003b0c:	4659      	mov	r1, fp
 8003b0e:	eb63 0901 	sbc.w	r9, r3, r1
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b26:	4690      	mov	r8, r2
 8003b28:	4699      	mov	r9, r3
 8003b2a:	4623      	mov	r3, r4
 8003b2c:	eb18 0303 	adds.w	r3, r8, r3
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	462b      	mov	r3, r5
 8003b34:	eb49 0303 	adc.w	r3, r9, r3
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	f04f 0200 	mov.w	r2, #0
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b46:	4629      	mov	r1, r5
 8003b48:	024b      	lsls	r3, r1, #9
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b50:	4621      	mov	r1, r4
 8003b52:	024a      	lsls	r2, r1, #9
 8003b54:	4610      	mov	r0, r2
 8003b56:	4619      	mov	r1, r3
 8003b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b64:	f7fc fb84 	bl	8000270 <__aeabi_uldivmod>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b70:	e058      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b72:	4b38      	ldr	r3, [pc, #224]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	099b      	lsrs	r3, r3, #6
 8003b78:	2200      	movs	r2, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	4611      	mov	r1, r2
 8003b7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b82:	623b      	str	r3, [r7, #32]
 8003b84:	2300      	movs	r3, #0
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
 8003b88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b8c:	4642      	mov	r2, r8
 8003b8e:	464b      	mov	r3, r9
 8003b90:	f04f 0000 	mov.w	r0, #0
 8003b94:	f04f 0100 	mov.w	r1, #0
 8003b98:	0159      	lsls	r1, r3, #5
 8003b9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b9e:	0150      	lsls	r0, r2, #5
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4641      	mov	r1, r8
 8003ba6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003baa:	4649      	mov	r1, r9
 8003bac:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	f04f 0300 	mov.w	r3, #0
 8003bb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bc4:	ebb2 040a 	subs.w	r4, r2, sl
 8003bc8:	eb63 050b 	sbc.w	r5, r3, fp
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	00eb      	lsls	r3, r5, #3
 8003bd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bda:	00e2      	lsls	r2, r4, #3
 8003bdc:	4614      	mov	r4, r2
 8003bde:	461d      	mov	r5, r3
 8003be0:	4643      	mov	r3, r8
 8003be2:	18e3      	adds	r3, r4, r3
 8003be4:	603b      	str	r3, [r7, #0]
 8003be6:	464b      	mov	r3, r9
 8003be8:	eb45 0303 	adc.w	r3, r5, r3
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	028b      	lsls	r3, r1, #10
 8003bfe:	4621      	mov	r1, r4
 8003c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c04:	4621      	mov	r1, r4
 8003c06:	028a      	lsls	r2, r1, #10
 8003c08:	4610      	mov	r0, r2
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c0e:	2200      	movs	r2, #0
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	61fa      	str	r2, [r7, #28]
 8003c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c18:	f7fc fb2a 	bl	8000270 <__aeabi_uldivmod>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4613      	mov	r3, r2
 8003c22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c24:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	0c1b      	lsrs	r3, r3, #16
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	3301      	adds	r3, #1
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c3e:	e002      	b.n	8003c46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c40:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3750      	adds	r7, #80	; 0x50
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
 8003c58:	00f42400 	.word	0x00f42400
 8003c5c:	007a1200 	.word	0x007a1200

08003c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c64:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c66:	681b      	ldr	r3, [r3, #0]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20000000 	.word	0x20000000

08003c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c7c:	f7ff fff0 	bl	8003c60 <HAL_RCC_GetHCLKFreq>
 8003c80:	4602      	mov	r2, r0
 8003c82:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	0a9b      	lsrs	r3, r3, #10
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	4903      	ldr	r1, [pc, #12]	; (8003c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c8e:	5ccb      	ldrb	r3, [r1, r3]
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	08005fac 	.word	0x08005fac

08003ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ca4:	f7ff ffdc 	bl	8003c60 <HAL_RCC_GetHCLKFreq>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	0b5b      	lsrs	r3, r3, #13
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	4903      	ldr	r1, [pc, #12]	; (8003cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cb6:	5ccb      	ldrb	r3, [r1, r3]
 8003cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	08005fac 	.word	0x08005fac

08003cc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e041      	b.n	8003d5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fd fca0 	bl	8001634 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3304      	adds	r3, #4
 8003d04:	4619      	mov	r1, r3
 8003d06:	4610      	mov	r0, r2
 8003d08:	f000 fa96 	bl	8004238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d001      	beq.n	8003d80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e04e      	b.n	8003e1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a23      	ldr	r2, [pc, #140]	; (8003e2c <HAL_TIM_Base_Start_IT+0xc4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d022      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x80>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003daa:	d01d      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x80>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1f      	ldr	r2, [pc, #124]	; (8003e30 <HAL_TIM_Base_Start_IT+0xc8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d018      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x80>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a1e      	ldr	r2, [pc, #120]	; (8003e34 <HAL_TIM_Base_Start_IT+0xcc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d013      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x80>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a1c      	ldr	r2, [pc, #112]	; (8003e38 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d00e      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x80>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a1b      	ldr	r2, [pc, #108]	; (8003e3c <HAL_TIM_Base_Start_IT+0xd4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d009      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x80>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <HAL_TIM_Base_Start_IT+0xd8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d004      	beq.n	8003de8 <HAL_TIM_Base_Start_IT+0x80>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a18      	ldr	r2, [pc, #96]	; (8003e44 <HAL_TIM_Base_Start_IT+0xdc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d111      	bne.n	8003e0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 0307 	and.w	r3, r3, #7
 8003df2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b06      	cmp	r3, #6
 8003df8:	d010      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0201 	orr.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0a:	e007      	b.n	8003e1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0201 	orr.w	r2, r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	40010000 	.word	0x40010000
 8003e30:	40000400 	.word	0x40000400
 8003e34:	40000800 	.word	0x40000800
 8003e38:	40000c00 	.word	0x40000c00
 8003e3c:	40010400 	.word	0x40010400
 8003e40:	40014000 	.word	0x40014000
 8003e44:	40001800 	.word	0x40001800

08003e48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d122      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d11b      	bne.n	8003ea4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0202 	mvn.w	r2, #2
 8003e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f9b5 	bl	80041fa <HAL_TIM_IC_CaptureCallback>
 8003e90:	e005      	b.n	8003e9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f9a7 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f9b8 	bl	800420e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d122      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d11b      	bne.n	8003ef8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f06f 0204 	mvn.w	r2, #4
 8003ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2202      	movs	r2, #2
 8003ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f98b 	bl	80041fa <HAL_TIM_IC_CaptureCallback>
 8003ee4:	e005      	b.n	8003ef2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f97d 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f000 f98e 	bl	800420e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d122      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d11b      	bne.n	8003f4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f06f 0208 	mvn.w	r2, #8
 8003f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2204      	movs	r2, #4
 8003f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f961 	bl	80041fa <HAL_TIM_IC_CaptureCallback>
 8003f38:	e005      	b.n	8003f46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f953 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f964 	bl	800420e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	2b10      	cmp	r3, #16
 8003f58:	d122      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0310 	and.w	r3, r3, #16
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d11b      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0210 	mvn.w	r2, #16
 8003f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2208      	movs	r2, #8
 8003f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f937 	bl	80041fa <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f929 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f93a 	bl	800420e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d10e      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d107      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0201 	mvn.w	r2, #1
 8003fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fc ff44 	bl	8000e54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd6:	2b80      	cmp	r3, #128	; 0x80
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe4:	2b80      	cmp	r3, #128	; 0x80
 8003fe6:	d107      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 fae0 	bl	80045b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004002:	2b40      	cmp	r3, #64	; 0x40
 8004004:	d10e      	bne.n	8004024 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004010:	2b40      	cmp	r3, #64	; 0x40
 8004012:	d107      	bne.n	8004024 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f8ff 	bl	8004222 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b20      	cmp	r3, #32
 8004030:	d10e      	bne.n	8004050 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b20      	cmp	r3, #32
 800403e:	d107      	bne.n	8004050 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0220 	mvn.w	r2, #32
 8004048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 faaa 	bl	80045a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004050:	bf00      	nop
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_TIM_ConfigClockSource+0x1c>
 8004070:	2302      	movs	r3, #2
 8004072:	e0b4      	b.n	80041de <HAL_TIM_ConfigClockSource+0x186>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2202      	movs	r2, #2
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800409a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ac:	d03e      	beq.n	800412c <HAL_TIM_ConfigClockSource+0xd4>
 80040ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b2:	f200 8087 	bhi.w	80041c4 <HAL_TIM_ConfigClockSource+0x16c>
 80040b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ba:	f000 8086 	beq.w	80041ca <HAL_TIM_ConfigClockSource+0x172>
 80040be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c2:	d87f      	bhi.n	80041c4 <HAL_TIM_ConfigClockSource+0x16c>
 80040c4:	2b70      	cmp	r3, #112	; 0x70
 80040c6:	d01a      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0xa6>
 80040c8:	2b70      	cmp	r3, #112	; 0x70
 80040ca:	d87b      	bhi.n	80041c4 <HAL_TIM_ConfigClockSource+0x16c>
 80040cc:	2b60      	cmp	r3, #96	; 0x60
 80040ce:	d050      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0x11a>
 80040d0:	2b60      	cmp	r3, #96	; 0x60
 80040d2:	d877      	bhi.n	80041c4 <HAL_TIM_ConfigClockSource+0x16c>
 80040d4:	2b50      	cmp	r3, #80	; 0x50
 80040d6:	d03c      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0xfa>
 80040d8:	2b50      	cmp	r3, #80	; 0x50
 80040da:	d873      	bhi.n	80041c4 <HAL_TIM_ConfigClockSource+0x16c>
 80040dc:	2b40      	cmp	r3, #64	; 0x40
 80040de:	d058      	beq.n	8004192 <HAL_TIM_ConfigClockSource+0x13a>
 80040e0:	2b40      	cmp	r3, #64	; 0x40
 80040e2:	d86f      	bhi.n	80041c4 <HAL_TIM_ConfigClockSource+0x16c>
 80040e4:	2b30      	cmp	r3, #48	; 0x30
 80040e6:	d064      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0x15a>
 80040e8:	2b30      	cmp	r3, #48	; 0x30
 80040ea:	d86b      	bhi.n	80041c4 <HAL_TIM_ConfigClockSource+0x16c>
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d060      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0x15a>
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d867      	bhi.n	80041c4 <HAL_TIM_ConfigClockSource+0x16c>
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d05c      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0x15a>
 80040f8:	2b10      	cmp	r3, #16
 80040fa:	d05a      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0x15a>
 80040fc:	e062      	b.n	80041c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6899      	ldr	r1, [r3, #8]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f000 f9ad 	bl	800446c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004120:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	609a      	str	r2, [r3, #8]
      break;
 800412a:	e04f      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6818      	ldr	r0, [r3, #0]
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	6899      	ldr	r1, [r3, #8]
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f000 f996 	bl	800446c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800414e:	609a      	str	r2, [r3, #8]
      break;
 8004150:	e03c      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	6859      	ldr	r1, [r3, #4]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	461a      	mov	r2, r3
 8004160:	f000 f90a 	bl	8004378 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2150      	movs	r1, #80	; 0x50
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f963 	bl	8004436 <TIM_ITRx_SetConfig>
      break;
 8004170:	e02c      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	6859      	ldr	r1, [r3, #4]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	461a      	mov	r2, r3
 8004180:	f000 f929 	bl	80043d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2160      	movs	r1, #96	; 0x60
 800418a:	4618      	mov	r0, r3
 800418c:	f000 f953 	bl	8004436 <TIM_ITRx_SetConfig>
      break;
 8004190:	e01c      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	6859      	ldr	r1, [r3, #4]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	461a      	mov	r2, r3
 80041a0:	f000 f8ea 	bl	8004378 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2140      	movs	r1, #64	; 0x40
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f943 	bl	8004436 <TIM_ITRx_SetConfig>
      break;
 80041b0:	e00c      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4619      	mov	r1, r3
 80041bc:	4610      	mov	r0, r2
 80041be:	f000 f93a 	bl	8004436 <TIM_ITRx_SetConfig>
      break;
 80041c2:	e003      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	73fb      	strb	r3, [r7, #15]
      break;
 80041c8:	e000      	b.n	80041cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a40      	ldr	r2, [pc, #256]	; (800434c <TIM_Base_SetConfig+0x114>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d013      	beq.n	8004278 <TIM_Base_SetConfig+0x40>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004256:	d00f      	beq.n	8004278 <TIM_Base_SetConfig+0x40>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a3d      	ldr	r2, [pc, #244]	; (8004350 <TIM_Base_SetConfig+0x118>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00b      	beq.n	8004278 <TIM_Base_SetConfig+0x40>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a3c      	ldr	r2, [pc, #240]	; (8004354 <TIM_Base_SetConfig+0x11c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d007      	beq.n	8004278 <TIM_Base_SetConfig+0x40>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a3b      	ldr	r2, [pc, #236]	; (8004358 <TIM_Base_SetConfig+0x120>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d003      	beq.n	8004278 <TIM_Base_SetConfig+0x40>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a3a      	ldr	r2, [pc, #232]	; (800435c <TIM_Base_SetConfig+0x124>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d108      	bne.n	800428a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a2f      	ldr	r2, [pc, #188]	; (800434c <TIM_Base_SetConfig+0x114>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d02b      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004298:	d027      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a2c      	ldr	r2, [pc, #176]	; (8004350 <TIM_Base_SetConfig+0x118>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d023      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a2b      	ldr	r2, [pc, #172]	; (8004354 <TIM_Base_SetConfig+0x11c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d01f      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a2a      	ldr	r2, [pc, #168]	; (8004358 <TIM_Base_SetConfig+0x120>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d01b      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a29      	ldr	r2, [pc, #164]	; (800435c <TIM_Base_SetConfig+0x124>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d017      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a28      	ldr	r2, [pc, #160]	; (8004360 <TIM_Base_SetConfig+0x128>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d013      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a27      	ldr	r2, [pc, #156]	; (8004364 <TIM_Base_SetConfig+0x12c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00f      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a26      	ldr	r2, [pc, #152]	; (8004368 <TIM_Base_SetConfig+0x130>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00b      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a25      	ldr	r2, [pc, #148]	; (800436c <TIM_Base_SetConfig+0x134>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d007      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a24      	ldr	r2, [pc, #144]	; (8004370 <TIM_Base_SetConfig+0x138>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d003      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a23      	ldr	r2, [pc, #140]	; (8004374 <TIM_Base_SetConfig+0x13c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d108      	bne.n	80042fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a0a      	ldr	r2, [pc, #40]	; (800434c <TIM_Base_SetConfig+0x114>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d003      	beq.n	8004330 <TIM_Base_SetConfig+0xf8>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a0c      	ldr	r2, [pc, #48]	; (800435c <TIM_Base_SetConfig+0x124>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d103      	bne.n	8004338 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	615a      	str	r2, [r3, #20]
}
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40010000 	.word	0x40010000
 8004350:	40000400 	.word	0x40000400
 8004354:	40000800 	.word	0x40000800
 8004358:	40000c00 	.word	0x40000c00
 800435c:	40010400 	.word	0x40010400
 8004360:	40014000 	.word	0x40014000
 8004364:	40014400 	.word	0x40014400
 8004368:	40014800 	.word	0x40014800
 800436c:	40001800 	.word	0x40001800
 8004370:	40001c00 	.word	0x40001c00
 8004374:	40002000 	.word	0x40002000

08004378 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f023 0201 	bic.w	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f023 030a 	bic.w	r3, r3, #10
 80043b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	621a      	str	r2, [r3, #32]
}
 80043ca:	bf00      	nop
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b087      	sub	sp, #28
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	f023 0210 	bic.w	r2, r3, #16
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004400:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	031b      	lsls	r3, r3, #12
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004412:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004436:	b480      	push	{r7}
 8004438:	b085      	sub	sp, #20
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800444c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	f043 0307 	orr.w	r3, r3, #7
 8004458:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	609a      	str	r2, [r3, #8]
}
 8004460:	bf00      	nop
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800446c:	b480      	push	{r7}
 800446e:	b087      	sub	sp, #28
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004486:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	021a      	lsls	r2, r3, #8
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	431a      	orrs	r2, r3
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4313      	orrs	r3, r2
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	609a      	str	r2, [r3, #8]
}
 80044a0:	bf00      	nop
 80044a2:	371c      	adds	r7, #28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e05a      	b.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a21      	ldr	r2, [pc, #132]	; (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d022      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004510:	d01d      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1d      	ldr	r2, [pc, #116]	; (800458c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d018      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a1b      	ldr	r2, [pc, #108]	; (8004590 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d013      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1a      	ldr	r2, [pc, #104]	; (8004594 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00e      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a18      	ldr	r2, [pc, #96]	; (8004598 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d009      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a17      	ldr	r2, [pc, #92]	; (800459c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d004      	beq.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a15      	ldr	r2, [pc, #84]	; (80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d10c      	bne.n	8004568 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004554:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	4313      	orrs	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40010000 	.word	0x40010000
 800458c:	40000400 	.word	0x40000400
 8004590:	40000800 	.word	0x40000800
 8004594:	40000c00 	.word	0x40000c00
 8004598:	40010400 	.word	0x40010400
 800459c:	40014000 	.word	0x40014000
 80045a0:	40001800 	.word	0x40001800

080045a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e03f      	b.n	800465e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fd f846 	bl	8001684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2224      	movs	r2, #36	; 0x24
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800460e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f929 	bl	8004868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004624:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695a      	ldr	r2, [r3, #20]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004634:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004644:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b08a      	sub	sp, #40	; 0x28
 800466a:	af02      	add	r7, sp, #8
 800466c:	60f8      	str	r0, [r7, #12]
 800466e:	60b9      	str	r1, [r7, #8]
 8004670:	603b      	str	r3, [r7, #0]
 8004672:	4613      	mov	r3, r2
 8004674:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b20      	cmp	r3, #32
 8004684:	d17c      	bne.n	8004780 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_UART_Transmit+0x2c>
 800468c:	88fb      	ldrh	r3, [r7, #6]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e075      	b.n	8004782 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_UART_Transmit+0x3e>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e06e      	b.n	8004782 <HAL_UART_Transmit+0x11c>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2221      	movs	r2, #33	; 0x21
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ba:	f7fd f9dd 	bl	8001a78 <HAL_GetTick>
 80046be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	88fa      	ldrh	r2, [r7, #6]
 80046c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	88fa      	ldrh	r2, [r7, #6]
 80046ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d4:	d108      	bne.n	80046e8 <HAL_UART_Transmit+0x82>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d104      	bne.n	80046e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	61bb      	str	r3, [r7, #24]
 80046e6:	e003      	b.n	80046f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046f8:	e02a      	b.n	8004750 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2200      	movs	r2, #0
 8004702:	2180      	movs	r1, #128	; 0x80
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f840 	bl	800478a <UART_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e036      	b.n	8004782 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10b      	bne.n	8004732 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004728:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	3302      	adds	r3, #2
 800472e:	61bb      	str	r3, [r7, #24]
 8004730:	e007      	b.n	8004742 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	781a      	ldrb	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	3301      	adds	r3, #1
 8004740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004754:	b29b      	uxth	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1cf      	bne.n	80046fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	9300      	str	r3, [sp, #0]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2200      	movs	r2, #0
 8004762:	2140      	movs	r1, #64	; 0x40
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 f810 	bl	800478a <UART_WaitOnFlagUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e006      	b.n	8004782 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	e000      	b.n	8004782 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004780:	2302      	movs	r3, #2
  }
}
 8004782:	4618      	mov	r0, r3
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b090      	sub	sp, #64	; 0x40
 800478e:	af00      	add	r7, sp, #0
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	603b      	str	r3, [r7, #0]
 8004796:	4613      	mov	r3, r2
 8004798:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479a:	e050      	b.n	800483e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a2:	d04c      	beq.n	800483e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80047a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d007      	beq.n	80047ba <UART_WaitOnFlagUntilTimeout+0x30>
 80047aa:	f7fd f965 	bl	8001a78 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d241      	bcs.n	800483e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	330c      	adds	r3, #12
 80047c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	e853 3f00 	ldrex	r3, [r3]
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	330c      	adds	r3, #12
 80047d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047da:	637a      	str	r2, [r7, #52]	; 0x34
 80047dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047e2:	e841 2300 	strex	r3, r2, [r1]
 80047e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1e5      	bne.n	80047ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3314      	adds	r3, #20
 80047f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	e853 3f00 	ldrex	r3, [r3]
 80047fc:	613b      	str	r3, [r7, #16]
   return(result);
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f023 0301 	bic.w	r3, r3, #1
 8004804:	63bb      	str	r3, [r7, #56]	; 0x38
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3314      	adds	r3, #20
 800480c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800480e:	623a      	str	r2, [r7, #32]
 8004810:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004812:	69f9      	ldr	r1, [r7, #28]
 8004814:	6a3a      	ldr	r2, [r7, #32]
 8004816:	e841 2300 	strex	r3, r2, [r1]
 800481a:	61bb      	str	r3, [r7, #24]
   return(result);
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1e5      	bne.n	80047ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e00f      	b.n	800485e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4013      	ands	r3, r2
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	429a      	cmp	r2, r3
 800484c:	bf0c      	ite	eq
 800484e:	2301      	moveq	r3, #1
 8004850:	2300      	movne	r3, #0
 8004852:	b2db      	uxtb	r3, r3
 8004854:	461a      	mov	r2, r3
 8004856:	79fb      	ldrb	r3, [r7, #7]
 8004858:	429a      	cmp	r2, r3
 800485a:	d09f      	beq.n	800479c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3740      	adds	r7, #64	; 0x40
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800486c:	b0c0      	sub	sp, #256	; 0x100
 800486e:	af00      	add	r7, sp, #0
 8004870:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004884:	68d9      	ldr	r1, [r3, #12]
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	ea40 0301 	orr.w	r3, r0, r1
 8004890:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	431a      	orrs	r2, r3
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	431a      	orrs	r2, r3
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80048c0:	f021 010c 	bic.w	r1, r1, #12
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048ce:	430b      	orrs	r3, r1
 80048d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80048de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e2:	6999      	ldr	r1, [r3, #24]
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	ea40 0301 	orr.w	r3, r0, r1
 80048ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4b8f      	ldr	r3, [pc, #572]	; (8004b34 <UART_SetConfig+0x2cc>)
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d005      	beq.n	8004908 <UART_SetConfig+0xa0>
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	4b8d      	ldr	r3, [pc, #564]	; (8004b38 <UART_SetConfig+0x2d0>)
 8004904:	429a      	cmp	r2, r3
 8004906:	d104      	bne.n	8004912 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004908:	f7ff f9ca 	bl	8003ca0 <HAL_RCC_GetPCLK2Freq>
 800490c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004910:	e003      	b.n	800491a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004912:	f7ff f9b1 	bl	8003c78 <HAL_RCC_GetPCLK1Freq>
 8004916:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800491a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004924:	f040 810c 	bne.w	8004b40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800492c:	2200      	movs	r2, #0
 800492e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004932:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004936:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800493a:	4622      	mov	r2, r4
 800493c:	462b      	mov	r3, r5
 800493e:	1891      	adds	r1, r2, r2
 8004940:	65b9      	str	r1, [r7, #88]	; 0x58
 8004942:	415b      	adcs	r3, r3
 8004944:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004946:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800494a:	4621      	mov	r1, r4
 800494c:	eb12 0801 	adds.w	r8, r2, r1
 8004950:	4629      	mov	r1, r5
 8004952:	eb43 0901 	adc.w	r9, r3, r1
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800496a:	4690      	mov	r8, r2
 800496c:	4699      	mov	r9, r3
 800496e:	4623      	mov	r3, r4
 8004970:	eb18 0303 	adds.w	r3, r8, r3
 8004974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004978:	462b      	mov	r3, r5
 800497a:	eb49 0303 	adc.w	r3, r9, r3
 800497e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800498e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004992:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004996:	460b      	mov	r3, r1
 8004998:	18db      	adds	r3, r3, r3
 800499a:	653b      	str	r3, [r7, #80]	; 0x50
 800499c:	4613      	mov	r3, r2
 800499e:	eb42 0303 	adc.w	r3, r2, r3
 80049a2:	657b      	str	r3, [r7, #84]	; 0x54
 80049a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80049a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80049ac:	f7fb fc60 	bl	8000270 <__aeabi_uldivmod>
 80049b0:	4602      	mov	r2, r0
 80049b2:	460b      	mov	r3, r1
 80049b4:	4b61      	ldr	r3, [pc, #388]	; (8004b3c <UART_SetConfig+0x2d4>)
 80049b6:	fba3 2302 	umull	r2, r3, r3, r2
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	011c      	lsls	r4, r3, #4
 80049be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80049cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80049d0:	4642      	mov	r2, r8
 80049d2:	464b      	mov	r3, r9
 80049d4:	1891      	adds	r1, r2, r2
 80049d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80049d8:	415b      	adcs	r3, r3
 80049da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80049e0:	4641      	mov	r1, r8
 80049e2:	eb12 0a01 	adds.w	sl, r2, r1
 80049e6:	4649      	mov	r1, r9
 80049e8:	eb43 0b01 	adc.w	fp, r3, r1
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a00:	4692      	mov	sl, r2
 8004a02:	469b      	mov	fp, r3
 8004a04:	4643      	mov	r3, r8
 8004a06:	eb1a 0303 	adds.w	r3, sl, r3
 8004a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a0e:	464b      	mov	r3, r9
 8004a10:	eb4b 0303 	adc.w	r3, fp, r3
 8004a14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	18db      	adds	r3, r3, r3
 8004a30:	643b      	str	r3, [r7, #64]	; 0x40
 8004a32:	4613      	mov	r3, r2
 8004a34:	eb42 0303 	adc.w	r3, r2, r3
 8004a38:	647b      	str	r3, [r7, #68]	; 0x44
 8004a3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a42:	f7fb fc15 	bl	8000270 <__aeabi_uldivmod>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	4b3b      	ldr	r3, [pc, #236]	; (8004b3c <UART_SetConfig+0x2d4>)
 8004a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	2264      	movs	r2, #100	; 0x64
 8004a56:	fb02 f303 	mul.w	r3, r2, r3
 8004a5a:	1acb      	subs	r3, r1, r3
 8004a5c:	00db      	lsls	r3, r3, #3
 8004a5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004a62:	4b36      	ldr	r3, [pc, #216]	; (8004b3c <UART_SetConfig+0x2d4>)
 8004a64:	fba3 2302 	umull	r2, r3, r3, r2
 8004a68:	095b      	lsrs	r3, r3, #5
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004a70:	441c      	add	r4, r3
 8004a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a76:	2200      	movs	r2, #0
 8004a78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a84:	4642      	mov	r2, r8
 8004a86:	464b      	mov	r3, r9
 8004a88:	1891      	adds	r1, r2, r2
 8004a8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a8c:	415b      	adcs	r3, r3
 8004a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a94:	4641      	mov	r1, r8
 8004a96:	1851      	adds	r1, r2, r1
 8004a98:	6339      	str	r1, [r7, #48]	; 0x30
 8004a9a:	4649      	mov	r1, r9
 8004a9c:	414b      	adcs	r3, r1
 8004a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004aac:	4659      	mov	r1, fp
 8004aae:	00cb      	lsls	r3, r1, #3
 8004ab0:	4651      	mov	r1, sl
 8004ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ab6:	4651      	mov	r1, sl
 8004ab8:	00ca      	lsls	r2, r1, #3
 8004aba:	4610      	mov	r0, r2
 8004abc:	4619      	mov	r1, r3
 8004abe:	4603      	mov	r3, r0
 8004ac0:	4642      	mov	r2, r8
 8004ac2:	189b      	adds	r3, r3, r2
 8004ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ac8:	464b      	mov	r3, r9
 8004aca:	460a      	mov	r2, r1
 8004acc:	eb42 0303 	adc.w	r3, r2, r3
 8004ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ae0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ae4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ae8:	460b      	mov	r3, r1
 8004aea:	18db      	adds	r3, r3, r3
 8004aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aee:	4613      	mov	r3, r2
 8004af0:	eb42 0303 	adc.w	r3, r2, r3
 8004af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004af6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004afa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004afe:	f7fb fbb7 	bl	8000270 <__aeabi_uldivmod>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	4b0d      	ldr	r3, [pc, #52]	; (8004b3c <UART_SetConfig+0x2d4>)
 8004b08:	fba3 1302 	umull	r1, r3, r3, r2
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	2164      	movs	r1, #100	; 0x64
 8004b10:	fb01 f303 	mul.w	r3, r1, r3
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	3332      	adds	r3, #50	; 0x32
 8004b1a:	4a08      	ldr	r2, [pc, #32]	; (8004b3c <UART_SetConfig+0x2d4>)
 8004b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	f003 0207 	and.w	r2, r3, #7
 8004b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4422      	add	r2, r4
 8004b2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b30:	e105      	b.n	8004d3e <UART_SetConfig+0x4d6>
 8004b32:	bf00      	nop
 8004b34:	40011000 	.word	0x40011000
 8004b38:	40011400 	.word	0x40011400
 8004b3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b44:	2200      	movs	r2, #0
 8004b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004b4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004b4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004b52:	4642      	mov	r2, r8
 8004b54:	464b      	mov	r3, r9
 8004b56:	1891      	adds	r1, r2, r2
 8004b58:	6239      	str	r1, [r7, #32]
 8004b5a:	415b      	adcs	r3, r3
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b62:	4641      	mov	r1, r8
 8004b64:	1854      	adds	r4, r2, r1
 8004b66:	4649      	mov	r1, r9
 8004b68:	eb43 0501 	adc.w	r5, r3, r1
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	00eb      	lsls	r3, r5, #3
 8004b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b7a:	00e2      	lsls	r2, r4, #3
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	461d      	mov	r5, r3
 8004b80:	4643      	mov	r3, r8
 8004b82:	18e3      	adds	r3, r4, r3
 8004b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b88:	464b      	mov	r3, r9
 8004b8a:	eb45 0303 	adc.w	r3, r5, r3
 8004b8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	f04f 0300 	mov.w	r3, #0
 8004baa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004bae:	4629      	mov	r1, r5
 8004bb0:	008b      	lsls	r3, r1, #2
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bb8:	4621      	mov	r1, r4
 8004bba:	008a      	lsls	r2, r1, #2
 8004bbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004bc0:	f7fb fb56 	bl	8000270 <__aeabi_uldivmod>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4b60      	ldr	r3, [pc, #384]	; (8004d4c <UART_SetConfig+0x4e4>)
 8004bca:	fba3 2302 	umull	r2, r3, r3, r2
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	011c      	lsls	r4, r3, #4
 8004bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004be0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004be4:	4642      	mov	r2, r8
 8004be6:	464b      	mov	r3, r9
 8004be8:	1891      	adds	r1, r2, r2
 8004bea:	61b9      	str	r1, [r7, #24]
 8004bec:	415b      	adcs	r3, r3
 8004bee:	61fb      	str	r3, [r7, #28]
 8004bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bf4:	4641      	mov	r1, r8
 8004bf6:	1851      	adds	r1, r2, r1
 8004bf8:	6139      	str	r1, [r7, #16]
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	414b      	adcs	r3, r1
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	f04f 0200 	mov.w	r2, #0
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c0c:	4659      	mov	r1, fp
 8004c0e:	00cb      	lsls	r3, r1, #3
 8004c10:	4651      	mov	r1, sl
 8004c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c16:	4651      	mov	r1, sl
 8004c18:	00ca      	lsls	r2, r1, #3
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4642      	mov	r2, r8
 8004c22:	189b      	adds	r3, r3, r2
 8004c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c28:	464b      	mov	r3, r9
 8004c2a:	460a      	mov	r2, r1
 8004c2c:	eb42 0303 	adc.w	r3, r2, r3
 8004c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004c40:	f04f 0200 	mov.w	r2, #0
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004c4c:	4649      	mov	r1, r9
 8004c4e:	008b      	lsls	r3, r1, #2
 8004c50:	4641      	mov	r1, r8
 8004c52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c56:	4641      	mov	r1, r8
 8004c58:	008a      	lsls	r2, r1, #2
 8004c5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004c5e:	f7fb fb07 	bl	8000270 <__aeabi_uldivmod>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4b39      	ldr	r3, [pc, #228]	; (8004d4c <UART_SetConfig+0x4e4>)
 8004c68:	fba3 1302 	umull	r1, r3, r3, r2
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	2164      	movs	r1, #100	; 0x64
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	3332      	adds	r3, #50	; 0x32
 8004c7a:	4a34      	ldr	r2, [pc, #208]	; (8004d4c <UART_SetConfig+0x4e4>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c86:	441c      	add	r4, r3
 8004c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	673b      	str	r3, [r7, #112]	; 0x70
 8004c90:	677a      	str	r2, [r7, #116]	; 0x74
 8004c92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c96:	4642      	mov	r2, r8
 8004c98:	464b      	mov	r3, r9
 8004c9a:	1891      	adds	r1, r2, r2
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	415b      	adcs	r3, r3
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ca6:	4641      	mov	r1, r8
 8004ca8:	1851      	adds	r1, r2, r1
 8004caa:	6039      	str	r1, [r7, #0]
 8004cac:	4649      	mov	r1, r9
 8004cae:	414b      	adcs	r3, r1
 8004cb0:	607b      	str	r3, [r7, #4]
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cbe:	4659      	mov	r1, fp
 8004cc0:	00cb      	lsls	r3, r1, #3
 8004cc2:	4651      	mov	r1, sl
 8004cc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cc8:	4651      	mov	r1, sl
 8004cca:	00ca      	lsls	r2, r1, #3
 8004ccc:	4610      	mov	r0, r2
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4642      	mov	r2, r8
 8004cd4:	189b      	adds	r3, r3, r2
 8004cd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cd8:	464b      	mov	r3, r9
 8004cda:	460a      	mov	r2, r1
 8004cdc:	eb42 0303 	adc.w	r3, r2, r3
 8004ce0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	663b      	str	r3, [r7, #96]	; 0x60
 8004cec:	667a      	str	r2, [r7, #100]	; 0x64
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	f04f 0300 	mov.w	r3, #0
 8004cf6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	008b      	lsls	r3, r1, #2
 8004cfe:	4641      	mov	r1, r8
 8004d00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d04:	4641      	mov	r1, r8
 8004d06:	008a      	lsls	r2, r1, #2
 8004d08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d0c:	f7fb fab0 	bl	8000270 <__aeabi_uldivmod>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <UART_SetConfig+0x4e4>)
 8004d16:	fba3 1302 	umull	r1, r3, r3, r2
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	2164      	movs	r1, #100	; 0x64
 8004d1e:	fb01 f303 	mul.w	r3, r1, r3
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	3332      	adds	r3, #50	; 0x32
 8004d28:	4a08      	ldr	r2, [pc, #32]	; (8004d4c <UART_SetConfig+0x4e4>)
 8004d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2e:	095b      	lsrs	r3, r3, #5
 8004d30:	f003 020f 	and.w	r2, r3, #15
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4422      	add	r2, r4
 8004d3c:	609a      	str	r2, [r3, #8]
}
 8004d3e:	bf00      	nop
 8004d40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004d44:	46bd      	mov	sp, r7
 8004d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d4a:	bf00      	nop
 8004d4c:	51eb851f 	.word	0x51eb851f

08004d50 <__errno>:
 8004d50:	4b01      	ldr	r3, [pc, #4]	; (8004d58 <__errno+0x8>)
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	2000000c 	.word	0x2000000c

08004d5c <__libc_init_array>:
 8004d5c:	b570      	push	{r4, r5, r6, lr}
 8004d5e:	4d0d      	ldr	r5, [pc, #52]	; (8004d94 <__libc_init_array+0x38>)
 8004d60:	4c0d      	ldr	r4, [pc, #52]	; (8004d98 <__libc_init_array+0x3c>)
 8004d62:	1b64      	subs	r4, r4, r5
 8004d64:	10a4      	asrs	r4, r4, #2
 8004d66:	2600      	movs	r6, #0
 8004d68:	42a6      	cmp	r6, r4
 8004d6a:	d109      	bne.n	8004d80 <__libc_init_array+0x24>
 8004d6c:	4d0b      	ldr	r5, [pc, #44]	; (8004d9c <__libc_init_array+0x40>)
 8004d6e:	4c0c      	ldr	r4, [pc, #48]	; (8004da0 <__libc_init_array+0x44>)
 8004d70:	f001 f898 	bl	8005ea4 <_init>
 8004d74:	1b64      	subs	r4, r4, r5
 8004d76:	10a4      	asrs	r4, r4, #2
 8004d78:	2600      	movs	r6, #0
 8004d7a:	42a6      	cmp	r6, r4
 8004d7c:	d105      	bne.n	8004d8a <__libc_init_array+0x2e>
 8004d7e:	bd70      	pop	{r4, r5, r6, pc}
 8004d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d84:	4798      	blx	r3
 8004d86:	3601      	adds	r6, #1
 8004d88:	e7ee      	b.n	8004d68 <__libc_init_array+0xc>
 8004d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8e:	4798      	blx	r3
 8004d90:	3601      	adds	r6, #1
 8004d92:	e7f2      	b.n	8004d7a <__libc_init_array+0x1e>
 8004d94:	08006054 	.word	0x08006054
 8004d98:	08006054 	.word	0x08006054
 8004d9c:	08006054 	.word	0x08006054
 8004da0:	08006058 	.word	0x08006058

08004da4 <malloc>:
 8004da4:	4b02      	ldr	r3, [pc, #8]	; (8004db0 <malloc+0xc>)
 8004da6:	4601      	mov	r1, r0
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	f000 b885 	b.w	8004eb8 <_malloc_r>
 8004dae:	bf00      	nop
 8004db0:	2000000c 	.word	0x2000000c

08004db4 <memcpy>:
 8004db4:	440a      	add	r2, r1
 8004db6:	4291      	cmp	r1, r2
 8004db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dbc:	d100      	bne.n	8004dc0 <memcpy+0xc>
 8004dbe:	4770      	bx	lr
 8004dc0:	b510      	push	{r4, lr}
 8004dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dca:	4291      	cmp	r1, r2
 8004dcc:	d1f9      	bne.n	8004dc2 <memcpy+0xe>
 8004dce:	bd10      	pop	{r4, pc}

08004dd0 <memset>:
 8004dd0:	4402      	add	r2, r0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d100      	bne.n	8004dda <memset+0xa>
 8004dd8:	4770      	bx	lr
 8004dda:	f803 1b01 	strb.w	r1, [r3], #1
 8004dde:	e7f9      	b.n	8004dd4 <memset+0x4>

08004de0 <_free_r>:
 8004de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004de2:	2900      	cmp	r1, #0
 8004de4:	d044      	beq.n	8004e70 <_free_r+0x90>
 8004de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dea:	9001      	str	r0, [sp, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f1a1 0404 	sub.w	r4, r1, #4
 8004df2:	bfb8      	it	lt
 8004df4:	18e4      	addlt	r4, r4, r3
 8004df6:	f000 fc67 	bl	80056c8 <__malloc_lock>
 8004dfa:	4a1e      	ldr	r2, [pc, #120]	; (8004e74 <_free_r+0x94>)
 8004dfc:	9801      	ldr	r0, [sp, #4]
 8004dfe:	6813      	ldr	r3, [r2, #0]
 8004e00:	b933      	cbnz	r3, 8004e10 <_free_r+0x30>
 8004e02:	6063      	str	r3, [r4, #4]
 8004e04:	6014      	str	r4, [r2, #0]
 8004e06:	b003      	add	sp, #12
 8004e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e0c:	f000 bc62 	b.w	80056d4 <__malloc_unlock>
 8004e10:	42a3      	cmp	r3, r4
 8004e12:	d908      	bls.n	8004e26 <_free_r+0x46>
 8004e14:	6825      	ldr	r5, [r4, #0]
 8004e16:	1961      	adds	r1, r4, r5
 8004e18:	428b      	cmp	r3, r1
 8004e1a:	bf01      	itttt	eq
 8004e1c:	6819      	ldreq	r1, [r3, #0]
 8004e1e:	685b      	ldreq	r3, [r3, #4]
 8004e20:	1949      	addeq	r1, r1, r5
 8004e22:	6021      	streq	r1, [r4, #0]
 8004e24:	e7ed      	b.n	8004e02 <_free_r+0x22>
 8004e26:	461a      	mov	r2, r3
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	b10b      	cbz	r3, 8004e30 <_free_r+0x50>
 8004e2c:	42a3      	cmp	r3, r4
 8004e2e:	d9fa      	bls.n	8004e26 <_free_r+0x46>
 8004e30:	6811      	ldr	r1, [r2, #0]
 8004e32:	1855      	adds	r5, r2, r1
 8004e34:	42a5      	cmp	r5, r4
 8004e36:	d10b      	bne.n	8004e50 <_free_r+0x70>
 8004e38:	6824      	ldr	r4, [r4, #0]
 8004e3a:	4421      	add	r1, r4
 8004e3c:	1854      	adds	r4, r2, r1
 8004e3e:	42a3      	cmp	r3, r4
 8004e40:	6011      	str	r1, [r2, #0]
 8004e42:	d1e0      	bne.n	8004e06 <_free_r+0x26>
 8004e44:	681c      	ldr	r4, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	6053      	str	r3, [r2, #4]
 8004e4a:	4421      	add	r1, r4
 8004e4c:	6011      	str	r1, [r2, #0]
 8004e4e:	e7da      	b.n	8004e06 <_free_r+0x26>
 8004e50:	d902      	bls.n	8004e58 <_free_r+0x78>
 8004e52:	230c      	movs	r3, #12
 8004e54:	6003      	str	r3, [r0, #0]
 8004e56:	e7d6      	b.n	8004e06 <_free_r+0x26>
 8004e58:	6825      	ldr	r5, [r4, #0]
 8004e5a:	1961      	adds	r1, r4, r5
 8004e5c:	428b      	cmp	r3, r1
 8004e5e:	bf04      	itt	eq
 8004e60:	6819      	ldreq	r1, [r3, #0]
 8004e62:	685b      	ldreq	r3, [r3, #4]
 8004e64:	6063      	str	r3, [r4, #4]
 8004e66:	bf04      	itt	eq
 8004e68:	1949      	addeq	r1, r1, r5
 8004e6a:	6021      	streq	r1, [r4, #0]
 8004e6c:	6054      	str	r4, [r2, #4]
 8004e6e:	e7ca      	b.n	8004e06 <_free_r+0x26>
 8004e70:	b003      	add	sp, #12
 8004e72:	bd30      	pop	{r4, r5, pc}
 8004e74:	200002bc 	.word	0x200002bc

08004e78 <sbrk_aligned>:
 8004e78:	b570      	push	{r4, r5, r6, lr}
 8004e7a:	4e0e      	ldr	r6, [pc, #56]	; (8004eb4 <sbrk_aligned+0x3c>)
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	6831      	ldr	r1, [r6, #0]
 8004e80:	4605      	mov	r5, r0
 8004e82:	b911      	cbnz	r1, 8004e8a <sbrk_aligned+0x12>
 8004e84:	f000 f930 	bl	80050e8 <_sbrk_r>
 8004e88:	6030      	str	r0, [r6, #0]
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	f000 f92b 	bl	80050e8 <_sbrk_r>
 8004e92:	1c43      	adds	r3, r0, #1
 8004e94:	d00a      	beq.n	8004eac <sbrk_aligned+0x34>
 8004e96:	1cc4      	adds	r4, r0, #3
 8004e98:	f024 0403 	bic.w	r4, r4, #3
 8004e9c:	42a0      	cmp	r0, r4
 8004e9e:	d007      	beq.n	8004eb0 <sbrk_aligned+0x38>
 8004ea0:	1a21      	subs	r1, r4, r0
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f000 f920 	bl	80050e8 <_sbrk_r>
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	d101      	bne.n	8004eb0 <sbrk_aligned+0x38>
 8004eac:	f04f 34ff 	mov.w	r4, #4294967295
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	bd70      	pop	{r4, r5, r6, pc}
 8004eb4:	200002c0 	.word	0x200002c0

08004eb8 <_malloc_r>:
 8004eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ebc:	1ccd      	adds	r5, r1, #3
 8004ebe:	f025 0503 	bic.w	r5, r5, #3
 8004ec2:	3508      	adds	r5, #8
 8004ec4:	2d0c      	cmp	r5, #12
 8004ec6:	bf38      	it	cc
 8004ec8:	250c      	movcc	r5, #12
 8004eca:	2d00      	cmp	r5, #0
 8004ecc:	4607      	mov	r7, r0
 8004ece:	db01      	blt.n	8004ed4 <_malloc_r+0x1c>
 8004ed0:	42a9      	cmp	r1, r5
 8004ed2:	d905      	bls.n	8004ee0 <_malloc_r+0x28>
 8004ed4:	230c      	movs	r3, #12
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	2600      	movs	r6, #0
 8004eda:	4630      	mov	r0, r6
 8004edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ee0:	4e2e      	ldr	r6, [pc, #184]	; (8004f9c <_malloc_r+0xe4>)
 8004ee2:	f000 fbf1 	bl	80056c8 <__malloc_lock>
 8004ee6:	6833      	ldr	r3, [r6, #0]
 8004ee8:	461c      	mov	r4, r3
 8004eea:	bb34      	cbnz	r4, 8004f3a <_malloc_r+0x82>
 8004eec:	4629      	mov	r1, r5
 8004eee:	4638      	mov	r0, r7
 8004ef0:	f7ff ffc2 	bl	8004e78 <sbrk_aligned>
 8004ef4:	1c43      	adds	r3, r0, #1
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	d14d      	bne.n	8004f96 <_malloc_r+0xde>
 8004efa:	6834      	ldr	r4, [r6, #0]
 8004efc:	4626      	mov	r6, r4
 8004efe:	2e00      	cmp	r6, #0
 8004f00:	d140      	bne.n	8004f84 <_malloc_r+0xcc>
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	4631      	mov	r1, r6
 8004f06:	4638      	mov	r0, r7
 8004f08:	eb04 0803 	add.w	r8, r4, r3
 8004f0c:	f000 f8ec 	bl	80050e8 <_sbrk_r>
 8004f10:	4580      	cmp	r8, r0
 8004f12:	d13a      	bne.n	8004f8a <_malloc_r+0xd2>
 8004f14:	6821      	ldr	r1, [r4, #0]
 8004f16:	3503      	adds	r5, #3
 8004f18:	1a6d      	subs	r5, r5, r1
 8004f1a:	f025 0503 	bic.w	r5, r5, #3
 8004f1e:	3508      	adds	r5, #8
 8004f20:	2d0c      	cmp	r5, #12
 8004f22:	bf38      	it	cc
 8004f24:	250c      	movcc	r5, #12
 8004f26:	4629      	mov	r1, r5
 8004f28:	4638      	mov	r0, r7
 8004f2a:	f7ff ffa5 	bl	8004e78 <sbrk_aligned>
 8004f2e:	3001      	adds	r0, #1
 8004f30:	d02b      	beq.n	8004f8a <_malloc_r+0xd2>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	442b      	add	r3, r5
 8004f36:	6023      	str	r3, [r4, #0]
 8004f38:	e00e      	b.n	8004f58 <_malloc_r+0xa0>
 8004f3a:	6822      	ldr	r2, [r4, #0]
 8004f3c:	1b52      	subs	r2, r2, r5
 8004f3e:	d41e      	bmi.n	8004f7e <_malloc_r+0xc6>
 8004f40:	2a0b      	cmp	r2, #11
 8004f42:	d916      	bls.n	8004f72 <_malloc_r+0xba>
 8004f44:	1961      	adds	r1, r4, r5
 8004f46:	42a3      	cmp	r3, r4
 8004f48:	6025      	str	r5, [r4, #0]
 8004f4a:	bf18      	it	ne
 8004f4c:	6059      	strne	r1, [r3, #4]
 8004f4e:	6863      	ldr	r3, [r4, #4]
 8004f50:	bf08      	it	eq
 8004f52:	6031      	streq	r1, [r6, #0]
 8004f54:	5162      	str	r2, [r4, r5]
 8004f56:	604b      	str	r3, [r1, #4]
 8004f58:	4638      	mov	r0, r7
 8004f5a:	f104 060b 	add.w	r6, r4, #11
 8004f5e:	f000 fbb9 	bl	80056d4 <__malloc_unlock>
 8004f62:	f026 0607 	bic.w	r6, r6, #7
 8004f66:	1d23      	adds	r3, r4, #4
 8004f68:	1af2      	subs	r2, r6, r3
 8004f6a:	d0b6      	beq.n	8004eda <_malloc_r+0x22>
 8004f6c:	1b9b      	subs	r3, r3, r6
 8004f6e:	50a3      	str	r3, [r4, r2]
 8004f70:	e7b3      	b.n	8004eda <_malloc_r+0x22>
 8004f72:	6862      	ldr	r2, [r4, #4]
 8004f74:	42a3      	cmp	r3, r4
 8004f76:	bf0c      	ite	eq
 8004f78:	6032      	streq	r2, [r6, #0]
 8004f7a:	605a      	strne	r2, [r3, #4]
 8004f7c:	e7ec      	b.n	8004f58 <_malloc_r+0xa0>
 8004f7e:	4623      	mov	r3, r4
 8004f80:	6864      	ldr	r4, [r4, #4]
 8004f82:	e7b2      	b.n	8004eea <_malloc_r+0x32>
 8004f84:	4634      	mov	r4, r6
 8004f86:	6876      	ldr	r6, [r6, #4]
 8004f88:	e7b9      	b.n	8004efe <_malloc_r+0x46>
 8004f8a:	230c      	movs	r3, #12
 8004f8c:	603b      	str	r3, [r7, #0]
 8004f8e:	4638      	mov	r0, r7
 8004f90:	f000 fba0 	bl	80056d4 <__malloc_unlock>
 8004f94:	e7a1      	b.n	8004eda <_malloc_r+0x22>
 8004f96:	6025      	str	r5, [r4, #0]
 8004f98:	e7de      	b.n	8004f58 <_malloc_r+0xa0>
 8004f9a:	bf00      	nop
 8004f9c:	200002bc 	.word	0x200002bc

08004fa0 <iprintf>:
 8004fa0:	b40f      	push	{r0, r1, r2, r3}
 8004fa2:	4b0a      	ldr	r3, [pc, #40]	; (8004fcc <iprintf+0x2c>)
 8004fa4:	b513      	push	{r0, r1, r4, lr}
 8004fa6:	681c      	ldr	r4, [r3, #0]
 8004fa8:	b124      	cbz	r4, 8004fb4 <iprintf+0x14>
 8004faa:	69a3      	ldr	r3, [r4, #24]
 8004fac:	b913      	cbnz	r3, 8004fb4 <iprintf+0x14>
 8004fae:	4620      	mov	r0, r4
 8004fb0:	f000 fa84 	bl	80054bc <__sinit>
 8004fb4:	ab05      	add	r3, sp, #20
 8004fb6:	9a04      	ldr	r2, [sp, #16]
 8004fb8:	68a1      	ldr	r1, [r4, #8]
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	4620      	mov	r0, r4
 8004fbe:	f000 fbb9 	bl	8005734 <_vfiprintf_r>
 8004fc2:	b002      	add	sp, #8
 8004fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fc8:	b004      	add	sp, #16
 8004fca:	4770      	bx	lr
 8004fcc:	2000000c 	.word	0x2000000c

08004fd0 <putchar>:
 8004fd0:	4b09      	ldr	r3, [pc, #36]	; (8004ff8 <putchar+0x28>)
 8004fd2:	b513      	push	{r0, r1, r4, lr}
 8004fd4:	681c      	ldr	r4, [r3, #0]
 8004fd6:	4601      	mov	r1, r0
 8004fd8:	b134      	cbz	r4, 8004fe8 <putchar+0x18>
 8004fda:	69a3      	ldr	r3, [r4, #24]
 8004fdc:	b923      	cbnz	r3, 8004fe8 <putchar+0x18>
 8004fde:	9001      	str	r0, [sp, #4]
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f000 fa6b 	bl	80054bc <__sinit>
 8004fe6:	9901      	ldr	r1, [sp, #4]
 8004fe8:	68a2      	ldr	r2, [r4, #8]
 8004fea:	4620      	mov	r0, r4
 8004fec:	b002      	add	sp, #8
 8004fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ff2:	f000 be63 	b.w	8005cbc <_putc_r>
 8004ff6:	bf00      	nop
 8004ff8:	2000000c 	.word	0x2000000c

08004ffc <_puts_r>:
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	460e      	mov	r6, r1
 8005000:	4605      	mov	r5, r0
 8005002:	b118      	cbz	r0, 800500c <_puts_r+0x10>
 8005004:	6983      	ldr	r3, [r0, #24]
 8005006:	b90b      	cbnz	r3, 800500c <_puts_r+0x10>
 8005008:	f000 fa58 	bl	80054bc <__sinit>
 800500c:	69ab      	ldr	r3, [r5, #24]
 800500e:	68ac      	ldr	r4, [r5, #8]
 8005010:	b913      	cbnz	r3, 8005018 <_puts_r+0x1c>
 8005012:	4628      	mov	r0, r5
 8005014:	f000 fa52 	bl	80054bc <__sinit>
 8005018:	4b2c      	ldr	r3, [pc, #176]	; (80050cc <_puts_r+0xd0>)
 800501a:	429c      	cmp	r4, r3
 800501c:	d120      	bne.n	8005060 <_puts_r+0x64>
 800501e:	686c      	ldr	r4, [r5, #4]
 8005020:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005022:	07db      	lsls	r3, r3, #31
 8005024:	d405      	bmi.n	8005032 <_puts_r+0x36>
 8005026:	89a3      	ldrh	r3, [r4, #12]
 8005028:	0598      	lsls	r0, r3, #22
 800502a:	d402      	bmi.n	8005032 <_puts_r+0x36>
 800502c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800502e:	f000 fae3 	bl	80055f8 <__retarget_lock_acquire_recursive>
 8005032:	89a3      	ldrh	r3, [r4, #12]
 8005034:	0719      	lsls	r1, r3, #28
 8005036:	d51d      	bpl.n	8005074 <_puts_r+0x78>
 8005038:	6923      	ldr	r3, [r4, #16]
 800503a:	b1db      	cbz	r3, 8005074 <_puts_r+0x78>
 800503c:	3e01      	subs	r6, #1
 800503e:	68a3      	ldr	r3, [r4, #8]
 8005040:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005044:	3b01      	subs	r3, #1
 8005046:	60a3      	str	r3, [r4, #8]
 8005048:	bb39      	cbnz	r1, 800509a <_puts_r+0x9e>
 800504a:	2b00      	cmp	r3, #0
 800504c:	da38      	bge.n	80050c0 <_puts_r+0xc4>
 800504e:	4622      	mov	r2, r4
 8005050:	210a      	movs	r1, #10
 8005052:	4628      	mov	r0, r5
 8005054:	f000 f858 	bl	8005108 <__swbuf_r>
 8005058:	3001      	adds	r0, #1
 800505a:	d011      	beq.n	8005080 <_puts_r+0x84>
 800505c:	250a      	movs	r5, #10
 800505e:	e011      	b.n	8005084 <_puts_r+0x88>
 8005060:	4b1b      	ldr	r3, [pc, #108]	; (80050d0 <_puts_r+0xd4>)
 8005062:	429c      	cmp	r4, r3
 8005064:	d101      	bne.n	800506a <_puts_r+0x6e>
 8005066:	68ac      	ldr	r4, [r5, #8]
 8005068:	e7da      	b.n	8005020 <_puts_r+0x24>
 800506a:	4b1a      	ldr	r3, [pc, #104]	; (80050d4 <_puts_r+0xd8>)
 800506c:	429c      	cmp	r4, r3
 800506e:	bf08      	it	eq
 8005070:	68ec      	ldreq	r4, [r5, #12]
 8005072:	e7d5      	b.n	8005020 <_puts_r+0x24>
 8005074:	4621      	mov	r1, r4
 8005076:	4628      	mov	r0, r5
 8005078:	f000 f898 	bl	80051ac <__swsetup_r>
 800507c:	2800      	cmp	r0, #0
 800507e:	d0dd      	beq.n	800503c <_puts_r+0x40>
 8005080:	f04f 35ff 	mov.w	r5, #4294967295
 8005084:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005086:	07da      	lsls	r2, r3, #31
 8005088:	d405      	bmi.n	8005096 <_puts_r+0x9a>
 800508a:	89a3      	ldrh	r3, [r4, #12]
 800508c:	059b      	lsls	r3, r3, #22
 800508e:	d402      	bmi.n	8005096 <_puts_r+0x9a>
 8005090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005092:	f000 fab2 	bl	80055fa <__retarget_lock_release_recursive>
 8005096:	4628      	mov	r0, r5
 8005098:	bd70      	pop	{r4, r5, r6, pc}
 800509a:	2b00      	cmp	r3, #0
 800509c:	da04      	bge.n	80050a8 <_puts_r+0xac>
 800509e:	69a2      	ldr	r2, [r4, #24]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	dc06      	bgt.n	80050b2 <_puts_r+0xb6>
 80050a4:	290a      	cmp	r1, #10
 80050a6:	d004      	beq.n	80050b2 <_puts_r+0xb6>
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	6022      	str	r2, [r4, #0]
 80050ae:	7019      	strb	r1, [r3, #0]
 80050b0:	e7c5      	b.n	800503e <_puts_r+0x42>
 80050b2:	4622      	mov	r2, r4
 80050b4:	4628      	mov	r0, r5
 80050b6:	f000 f827 	bl	8005108 <__swbuf_r>
 80050ba:	3001      	adds	r0, #1
 80050bc:	d1bf      	bne.n	800503e <_puts_r+0x42>
 80050be:	e7df      	b.n	8005080 <_puts_r+0x84>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	250a      	movs	r5, #10
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	6022      	str	r2, [r4, #0]
 80050c8:	701d      	strb	r5, [r3, #0]
 80050ca:	e7db      	b.n	8005084 <_puts_r+0x88>
 80050cc:	08005fd8 	.word	0x08005fd8
 80050d0:	08005ff8 	.word	0x08005ff8
 80050d4:	08005fb8 	.word	0x08005fb8

080050d8 <puts>:
 80050d8:	4b02      	ldr	r3, [pc, #8]	; (80050e4 <puts+0xc>)
 80050da:	4601      	mov	r1, r0
 80050dc:	6818      	ldr	r0, [r3, #0]
 80050de:	f7ff bf8d 	b.w	8004ffc <_puts_r>
 80050e2:	bf00      	nop
 80050e4:	2000000c 	.word	0x2000000c

080050e8 <_sbrk_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	4d06      	ldr	r5, [pc, #24]	; (8005104 <_sbrk_r+0x1c>)
 80050ec:	2300      	movs	r3, #0
 80050ee:	4604      	mov	r4, r0
 80050f0:	4608      	mov	r0, r1
 80050f2:	602b      	str	r3, [r5, #0]
 80050f4:	f7fc fbe8 	bl	80018c8 <_sbrk>
 80050f8:	1c43      	adds	r3, r0, #1
 80050fa:	d102      	bne.n	8005102 <_sbrk_r+0x1a>
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	b103      	cbz	r3, 8005102 <_sbrk_r+0x1a>
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	bd38      	pop	{r3, r4, r5, pc}
 8005104:	200002c8 	.word	0x200002c8

08005108 <__swbuf_r>:
 8005108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510a:	460e      	mov	r6, r1
 800510c:	4614      	mov	r4, r2
 800510e:	4605      	mov	r5, r0
 8005110:	b118      	cbz	r0, 800511a <__swbuf_r+0x12>
 8005112:	6983      	ldr	r3, [r0, #24]
 8005114:	b90b      	cbnz	r3, 800511a <__swbuf_r+0x12>
 8005116:	f000 f9d1 	bl	80054bc <__sinit>
 800511a:	4b21      	ldr	r3, [pc, #132]	; (80051a0 <__swbuf_r+0x98>)
 800511c:	429c      	cmp	r4, r3
 800511e:	d12b      	bne.n	8005178 <__swbuf_r+0x70>
 8005120:	686c      	ldr	r4, [r5, #4]
 8005122:	69a3      	ldr	r3, [r4, #24]
 8005124:	60a3      	str	r3, [r4, #8]
 8005126:	89a3      	ldrh	r3, [r4, #12]
 8005128:	071a      	lsls	r2, r3, #28
 800512a:	d52f      	bpl.n	800518c <__swbuf_r+0x84>
 800512c:	6923      	ldr	r3, [r4, #16]
 800512e:	b36b      	cbz	r3, 800518c <__swbuf_r+0x84>
 8005130:	6923      	ldr	r3, [r4, #16]
 8005132:	6820      	ldr	r0, [r4, #0]
 8005134:	1ac0      	subs	r0, r0, r3
 8005136:	6963      	ldr	r3, [r4, #20]
 8005138:	b2f6      	uxtb	r6, r6
 800513a:	4283      	cmp	r3, r0
 800513c:	4637      	mov	r7, r6
 800513e:	dc04      	bgt.n	800514a <__swbuf_r+0x42>
 8005140:	4621      	mov	r1, r4
 8005142:	4628      	mov	r0, r5
 8005144:	f000 f926 	bl	8005394 <_fflush_r>
 8005148:	bb30      	cbnz	r0, 8005198 <__swbuf_r+0x90>
 800514a:	68a3      	ldr	r3, [r4, #8]
 800514c:	3b01      	subs	r3, #1
 800514e:	60a3      	str	r3, [r4, #8]
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	6022      	str	r2, [r4, #0]
 8005156:	701e      	strb	r6, [r3, #0]
 8005158:	6963      	ldr	r3, [r4, #20]
 800515a:	3001      	adds	r0, #1
 800515c:	4283      	cmp	r3, r0
 800515e:	d004      	beq.n	800516a <__swbuf_r+0x62>
 8005160:	89a3      	ldrh	r3, [r4, #12]
 8005162:	07db      	lsls	r3, r3, #31
 8005164:	d506      	bpl.n	8005174 <__swbuf_r+0x6c>
 8005166:	2e0a      	cmp	r6, #10
 8005168:	d104      	bne.n	8005174 <__swbuf_r+0x6c>
 800516a:	4621      	mov	r1, r4
 800516c:	4628      	mov	r0, r5
 800516e:	f000 f911 	bl	8005394 <_fflush_r>
 8005172:	b988      	cbnz	r0, 8005198 <__swbuf_r+0x90>
 8005174:	4638      	mov	r0, r7
 8005176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005178:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <__swbuf_r+0x9c>)
 800517a:	429c      	cmp	r4, r3
 800517c:	d101      	bne.n	8005182 <__swbuf_r+0x7a>
 800517e:	68ac      	ldr	r4, [r5, #8]
 8005180:	e7cf      	b.n	8005122 <__swbuf_r+0x1a>
 8005182:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <__swbuf_r+0xa0>)
 8005184:	429c      	cmp	r4, r3
 8005186:	bf08      	it	eq
 8005188:	68ec      	ldreq	r4, [r5, #12]
 800518a:	e7ca      	b.n	8005122 <__swbuf_r+0x1a>
 800518c:	4621      	mov	r1, r4
 800518e:	4628      	mov	r0, r5
 8005190:	f000 f80c 	bl	80051ac <__swsetup_r>
 8005194:	2800      	cmp	r0, #0
 8005196:	d0cb      	beq.n	8005130 <__swbuf_r+0x28>
 8005198:	f04f 37ff 	mov.w	r7, #4294967295
 800519c:	e7ea      	b.n	8005174 <__swbuf_r+0x6c>
 800519e:	bf00      	nop
 80051a0:	08005fd8 	.word	0x08005fd8
 80051a4:	08005ff8 	.word	0x08005ff8
 80051a8:	08005fb8 	.word	0x08005fb8

080051ac <__swsetup_r>:
 80051ac:	4b32      	ldr	r3, [pc, #200]	; (8005278 <__swsetup_r+0xcc>)
 80051ae:	b570      	push	{r4, r5, r6, lr}
 80051b0:	681d      	ldr	r5, [r3, #0]
 80051b2:	4606      	mov	r6, r0
 80051b4:	460c      	mov	r4, r1
 80051b6:	b125      	cbz	r5, 80051c2 <__swsetup_r+0x16>
 80051b8:	69ab      	ldr	r3, [r5, #24]
 80051ba:	b913      	cbnz	r3, 80051c2 <__swsetup_r+0x16>
 80051bc:	4628      	mov	r0, r5
 80051be:	f000 f97d 	bl	80054bc <__sinit>
 80051c2:	4b2e      	ldr	r3, [pc, #184]	; (800527c <__swsetup_r+0xd0>)
 80051c4:	429c      	cmp	r4, r3
 80051c6:	d10f      	bne.n	80051e8 <__swsetup_r+0x3c>
 80051c8:	686c      	ldr	r4, [r5, #4]
 80051ca:	89a3      	ldrh	r3, [r4, #12]
 80051cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051d0:	0719      	lsls	r1, r3, #28
 80051d2:	d42c      	bmi.n	800522e <__swsetup_r+0x82>
 80051d4:	06dd      	lsls	r5, r3, #27
 80051d6:	d411      	bmi.n	80051fc <__swsetup_r+0x50>
 80051d8:	2309      	movs	r3, #9
 80051da:	6033      	str	r3, [r6, #0]
 80051dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051e0:	81a3      	strh	r3, [r4, #12]
 80051e2:	f04f 30ff 	mov.w	r0, #4294967295
 80051e6:	e03e      	b.n	8005266 <__swsetup_r+0xba>
 80051e8:	4b25      	ldr	r3, [pc, #148]	; (8005280 <__swsetup_r+0xd4>)
 80051ea:	429c      	cmp	r4, r3
 80051ec:	d101      	bne.n	80051f2 <__swsetup_r+0x46>
 80051ee:	68ac      	ldr	r4, [r5, #8]
 80051f0:	e7eb      	b.n	80051ca <__swsetup_r+0x1e>
 80051f2:	4b24      	ldr	r3, [pc, #144]	; (8005284 <__swsetup_r+0xd8>)
 80051f4:	429c      	cmp	r4, r3
 80051f6:	bf08      	it	eq
 80051f8:	68ec      	ldreq	r4, [r5, #12]
 80051fa:	e7e6      	b.n	80051ca <__swsetup_r+0x1e>
 80051fc:	0758      	lsls	r0, r3, #29
 80051fe:	d512      	bpl.n	8005226 <__swsetup_r+0x7a>
 8005200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005202:	b141      	cbz	r1, 8005216 <__swsetup_r+0x6a>
 8005204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005208:	4299      	cmp	r1, r3
 800520a:	d002      	beq.n	8005212 <__swsetup_r+0x66>
 800520c:	4630      	mov	r0, r6
 800520e:	f7ff fde7 	bl	8004de0 <_free_r>
 8005212:	2300      	movs	r3, #0
 8005214:	6363      	str	r3, [r4, #52]	; 0x34
 8005216:	89a3      	ldrh	r3, [r4, #12]
 8005218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800521c:	81a3      	strh	r3, [r4, #12]
 800521e:	2300      	movs	r3, #0
 8005220:	6063      	str	r3, [r4, #4]
 8005222:	6923      	ldr	r3, [r4, #16]
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	89a3      	ldrh	r3, [r4, #12]
 8005228:	f043 0308 	orr.w	r3, r3, #8
 800522c:	81a3      	strh	r3, [r4, #12]
 800522e:	6923      	ldr	r3, [r4, #16]
 8005230:	b94b      	cbnz	r3, 8005246 <__swsetup_r+0x9a>
 8005232:	89a3      	ldrh	r3, [r4, #12]
 8005234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800523c:	d003      	beq.n	8005246 <__swsetup_r+0x9a>
 800523e:	4621      	mov	r1, r4
 8005240:	4630      	mov	r0, r6
 8005242:	f000 fa01 	bl	8005648 <__smakebuf_r>
 8005246:	89a0      	ldrh	r0, [r4, #12]
 8005248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800524c:	f010 0301 	ands.w	r3, r0, #1
 8005250:	d00a      	beq.n	8005268 <__swsetup_r+0xbc>
 8005252:	2300      	movs	r3, #0
 8005254:	60a3      	str	r3, [r4, #8]
 8005256:	6963      	ldr	r3, [r4, #20]
 8005258:	425b      	negs	r3, r3
 800525a:	61a3      	str	r3, [r4, #24]
 800525c:	6923      	ldr	r3, [r4, #16]
 800525e:	b943      	cbnz	r3, 8005272 <__swsetup_r+0xc6>
 8005260:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005264:	d1ba      	bne.n	80051dc <__swsetup_r+0x30>
 8005266:	bd70      	pop	{r4, r5, r6, pc}
 8005268:	0781      	lsls	r1, r0, #30
 800526a:	bf58      	it	pl
 800526c:	6963      	ldrpl	r3, [r4, #20]
 800526e:	60a3      	str	r3, [r4, #8]
 8005270:	e7f4      	b.n	800525c <__swsetup_r+0xb0>
 8005272:	2000      	movs	r0, #0
 8005274:	e7f7      	b.n	8005266 <__swsetup_r+0xba>
 8005276:	bf00      	nop
 8005278:	2000000c 	.word	0x2000000c
 800527c:	08005fd8 	.word	0x08005fd8
 8005280:	08005ff8 	.word	0x08005ff8
 8005284:	08005fb8 	.word	0x08005fb8

08005288 <__sflush_r>:
 8005288:	898a      	ldrh	r2, [r1, #12]
 800528a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800528e:	4605      	mov	r5, r0
 8005290:	0710      	lsls	r0, r2, #28
 8005292:	460c      	mov	r4, r1
 8005294:	d458      	bmi.n	8005348 <__sflush_r+0xc0>
 8005296:	684b      	ldr	r3, [r1, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	dc05      	bgt.n	80052a8 <__sflush_r+0x20>
 800529c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	dc02      	bgt.n	80052a8 <__sflush_r+0x20>
 80052a2:	2000      	movs	r0, #0
 80052a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052aa:	2e00      	cmp	r6, #0
 80052ac:	d0f9      	beq.n	80052a2 <__sflush_r+0x1a>
 80052ae:	2300      	movs	r3, #0
 80052b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052b4:	682f      	ldr	r7, [r5, #0]
 80052b6:	602b      	str	r3, [r5, #0]
 80052b8:	d032      	beq.n	8005320 <__sflush_r+0x98>
 80052ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052bc:	89a3      	ldrh	r3, [r4, #12]
 80052be:	075a      	lsls	r2, r3, #29
 80052c0:	d505      	bpl.n	80052ce <__sflush_r+0x46>
 80052c2:	6863      	ldr	r3, [r4, #4]
 80052c4:	1ac0      	subs	r0, r0, r3
 80052c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052c8:	b10b      	cbz	r3, 80052ce <__sflush_r+0x46>
 80052ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052cc:	1ac0      	subs	r0, r0, r3
 80052ce:	2300      	movs	r3, #0
 80052d0:	4602      	mov	r2, r0
 80052d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052d4:	6a21      	ldr	r1, [r4, #32]
 80052d6:	4628      	mov	r0, r5
 80052d8:	47b0      	blx	r6
 80052da:	1c43      	adds	r3, r0, #1
 80052dc:	89a3      	ldrh	r3, [r4, #12]
 80052de:	d106      	bne.n	80052ee <__sflush_r+0x66>
 80052e0:	6829      	ldr	r1, [r5, #0]
 80052e2:	291d      	cmp	r1, #29
 80052e4:	d82c      	bhi.n	8005340 <__sflush_r+0xb8>
 80052e6:	4a2a      	ldr	r2, [pc, #168]	; (8005390 <__sflush_r+0x108>)
 80052e8:	40ca      	lsrs	r2, r1
 80052ea:	07d6      	lsls	r6, r2, #31
 80052ec:	d528      	bpl.n	8005340 <__sflush_r+0xb8>
 80052ee:	2200      	movs	r2, #0
 80052f0:	6062      	str	r2, [r4, #4]
 80052f2:	04d9      	lsls	r1, r3, #19
 80052f4:	6922      	ldr	r2, [r4, #16]
 80052f6:	6022      	str	r2, [r4, #0]
 80052f8:	d504      	bpl.n	8005304 <__sflush_r+0x7c>
 80052fa:	1c42      	adds	r2, r0, #1
 80052fc:	d101      	bne.n	8005302 <__sflush_r+0x7a>
 80052fe:	682b      	ldr	r3, [r5, #0]
 8005300:	b903      	cbnz	r3, 8005304 <__sflush_r+0x7c>
 8005302:	6560      	str	r0, [r4, #84]	; 0x54
 8005304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005306:	602f      	str	r7, [r5, #0]
 8005308:	2900      	cmp	r1, #0
 800530a:	d0ca      	beq.n	80052a2 <__sflush_r+0x1a>
 800530c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005310:	4299      	cmp	r1, r3
 8005312:	d002      	beq.n	800531a <__sflush_r+0x92>
 8005314:	4628      	mov	r0, r5
 8005316:	f7ff fd63 	bl	8004de0 <_free_r>
 800531a:	2000      	movs	r0, #0
 800531c:	6360      	str	r0, [r4, #52]	; 0x34
 800531e:	e7c1      	b.n	80052a4 <__sflush_r+0x1c>
 8005320:	6a21      	ldr	r1, [r4, #32]
 8005322:	2301      	movs	r3, #1
 8005324:	4628      	mov	r0, r5
 8005326:	47b0      	blx	r6
 8005328:	1c41      	adds	r1, r0, #1
 800532a:	d1c7      	bne.n	80052bc <__sflush_r+0x34>
 800532c:	682b      	ldr	r3, [r5, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0c4      	beq.n	80052bc <__sflush_r+0x34>
 8005332:	2b1d      	cmp	r3, #29
 8005334:	d001      	beq.n	800533a <__sflush_r+0xb2>
 8005336:	2b16      	cmp	r3, #22
 8005338:	d101      	bne.n	800533e <__sflush_r+0xb6>
 800533a:	602f      	str	r7, [r5, #0]
 800533c:	e7b1      	b.n	80052a2 <__sflush_r+0x1a>
 800533e:	89a3      	ldrh	r3, [r4, #12]
 8005340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005344:	81a3      	strh	r3, [r4, #12]
 8005346:	e7ad      	b.n	80052a4 <__sflush_r+0x1c>
 8005348:	690f      	ldr	r7, [r1, #16]
 800534a:	2f00      	cmp	r7, #0
 800534c:	d0a9      	beq.n	80052a2 <__sflush_r+0x1a>
 800534e:	0793      	lsls	r3, r2, #30
 8005350:	680e      	ldr	r6, [r1, #0]
 8005352:	bf08      	it	eq
 8005354:	694b      	ldreq	r3, [r1, #20]
 8005356:	600f      	str	r7, [r1, #0]
 8005358:	bf18      	it	ne
 800535a:	2300      	movne	r3, #0
 800535c:	eba6 0807 	sub.w	r8, r6, r7
 8005360:	608b      	str	r3, [r1, #8]
 8005362:	f1b8 0f00 	cmp.w	r8, #0
 8005366:	dd9c      	ble.n	80052a2 <__sflush_r+0x1a>
 8005368:	6a21      	ldr	r1, [r4, #32]
 800536a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800536c:	4643      	mov	r3, r8
 800536e:	463a      	mov	r2, r7
 8005370:	4628      	mov	r0, r5
 8005372:	47b0      	blx	r6
 8005374:	2800      	cmp	r0, #0
 8005376:	dc06      	bgt.n	8005386 <__sflush_r+0xfe>
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800537e:	81a3      	strh	r3, [r4, #12]
 8005380:	f04f 30ff 	mov.w	r0, #4294967295
 8005384:	e78e      	b.n	80052a4 <__sflush_r+0x1c>
 8005386:	4407      	add	r7, r0
 8005388:	eba8 0800 	sub.w	r8, r8, r0
 800538c:	e7e9      	b.n	8005362 <__sflush_r+0xda>
 800538e:	bf00      	nop
 8005390:	20400001 	.word	0x20400001

08005394 <_fflush_r>:
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	690b      	ldr	r3, [r1, #16]
 8005398:	4605      	mov	r5, r0
 800539a:	460c      	mov	r4, r1
 800539c:	b913      	cbnz	r3, 80053a4 <_fflush_r+0x10>
 800539e:	2500      	movs	r5, #0
 80053a0:	4628      	mov	r0, r5
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	b118      	cbz	r0, 80053ae <_fflush_r+0x1a>
 80053a6:	6983      	ldr	r3, [r0, #24]
 80053a8:	b90b      	cbnz	r3, 80053ae <_fflush_r+0x1a>
 80053aa:	f000 f887 	bl	80054bc <__sinit>
 80053ae:	4b14      	ldr	r3, [pc, #80]	; (8005400 <_fflush_r+0x6c>)
 80053b0:	429c      	cmp	r4, r3
 80053b2:	d11b      	bne.n	80053ec <_fflush_r+0x58>
 80053b4:	686c      	ldr	r4, [r5, #4]
 80053b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0ef      	beq.n	800539e <_fflush_r+0xa>
 80053be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053c0:	07d0      	lsls	r0, r2, #31
 80053c2:	d404      	bmi.n	80053ce <_fflush_r+0x3a>
 80053c4:	0599      	lsls	r1, r3, #22
 80053c6:	d402      	bmi.n	80053ce <_fflush_r+0x3a>
 80053c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053ca:	f000 f915 	bl	80055f8 <__retarget_lock_acquire_recursive>
 80053ce:	4628      	mov	r0, r5
 80053d0:	4621      	mov	r1, r4
 80053d2:	f7ff ff59 	bl	8005288 <__sflush_r>
 80053d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053d8:	07da      	lsls	r2, r3, #31
 80053da:	4605      	mov	r5, r0
 80053dc:	d4e0      	bmi.n	80053a0 <_fflush_r+0xc>
 80053de:	89a3      	ldrh	r3, [r4, #12]
 80053e0:	059b      	lsls	r3, r3, #22
 80053e2:	d4dd      	bmi.n	80053a0 <_fflush_r+0xc>
 80053e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053e6:	f000 f908 	bl	80055fa <__retarget_lock_release_recursive>
 80053ea:	e7d9      	b.n	80053a0 <_fflush_r+0xc>
 80053ec:	4b05      	ldr	r3, [pc, #20]	; (8005404 <_fflush_r+0x70>)
 80053ee:	429c      	cmp	r4, r3
 80053f0:	d101      	bne.n	80053f6 <_fflush_r+0x62>
 80053f2:	68ac      	ldr	r4, [r5, #8]
 80053f4:	e7df      	b.n	80053b6 <_fflush_r+0x22>
 80053f6:	4b04      	ldr	r3, [pc, #16]	; (8005408 <_fflush_r+0x74>)
 80053f8:	429c      	cmp	r4, r3
 80053fa:	bf08      	it	eq
 80053fc:	68ec      	ldreq	r4, [r5, #12]
 80053fe:	e7da      	b.n	80053b6 <_fflush_r+0x22>
 8005400:	08005fd8 	.word	0x08005fd8
 8005404:	08005ff8 	.word	0x08005ff8
 8005408:	08005fb8 	.word	0x08005fb8

0800540c <std>:
 800540c:	2300      	movs	r3, #0
 800540e:	b510      	push	{r4, lr}
 8005410:	4604      	mov	r4, r0
 8005412:	e9c0 3300 	strd	r3, r3, [r0]
 8005416:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800541a:	6083      	str	r3, [r0, #8]
 800541c:	8181      	strh	r1, [r0, #12]
 800541e:	6643      	str	r3, [r0, #100]	; 0x64
 8005420:	81c2      	strh	r2, [r0, #14]
 8005422:	6183      	str	r3, [r0, #24]
 8005424:	4619      	mov	r1, r3
 8005426:	2208      	movs	r2, #8
 8005428:	305c      	adds	r0, #92	; 0x5c
 800542a:	f7ff fcd1 	bl	8004dd0 <memset>
 800542e:	4b05      	ldr	r3, [pc, #20]	; (8005444 <std+0x38>)
 8005430:	6263      	str	r3, [r4, #36]	; 0x24
 8005432:	4b05      	ldr	r3, [pc, #20]	; (8005448 <std+0x3c>)
 8005434:	62a3      	str	r3, [r4, #40]	; 0x28
 8005436:	4b05      	ldr	r3, [pc, #20]	; (800544c <std+0x40>)
 8005438:	62e3      	str	r3, [r4, #44]	; 0x2c
 800543a:	4b05      	ldr	r3, [pc, #20]	; (8005450 <std+0x44>)
 800543c:	6224      	str	r4, [r4, #32]
 800543e:	6323      	str	r3, [r4, #48]	; 0x30
 8005440:	bd10      	pop	{r4, pc}
 8005442:	bf00      	nop
 8005444:	08005d4d 	.word	0x08005d4d
 8005448:	08005d6f 	.word	0x08005d6f
 800544c:	08005da7 	.word	0x08005da7
 8005450:	08005dcb 	.word	0x08005dcb

08005454 <_cleanup_r>:
 8005454:	4901      	ldr	r1, [pc, #4]	; (800545c <_cleanup_r+0x8>)
 8005456:	f000 b8af 	b.w	80055b8 <_fwalk_reent>
 800545a:	bf00      	nop
 800545c:	08005395 	.word	0x08005395

08005460 <__sfmoreglue>:
 8005460:	b570      	push	{r4, r5, r6, lr}
 8005462:	2268      	movs	r2, #104	; 0x68
 8005464:	1e4d      	subs	r5, r1, #1
 8005466:	4355      	muls	r5, r2
 8005468:	460e      	mov	r6, r1
 800546a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800546e:	f7ff fd23 	bl	8004eb8 <_malloc_r>
 8005472:	4604      	mov	r4, r0
 8005474:	b140      	cbz	r0, 8005488 <__sfmoreglue+0x28>
 8005476:	2100      	movs	r1, #0
 8005478:	e9c0 1600 	strd	r1, r6, [r0]
 800547c:	300c      	adds	r0, #12
 800547e:	60a0      	str	r0, [r4, #8]
 8005480:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005484:	f7ff fca4 	bl	8004dd0 <memset>
 8005488:	4620      	mov	r0, r4
 800548a:	bd70      	pop	{r4, r5, r6, pc}

0800548c <__sfp_lock_acquire>:
 800548c:	4801      	ldr	r0, [pc, #4]	; (8005494 <__sfp_lock_acquire+0x8>)
 800548e:	f000 b8b3 	b.w	80055f8 <__retarget_lock_acquire_recursive>
 8005492:	bf00      	nop
 8005494:	200002c5 	.word	0x200002c5

08005498 <__sfp_lock_release>:
 8005498:	4801      	ldr	r0, [pc, #4]	; (80054a0 <__sfp_lock_release+0x8>)
 800549a:	f000 b8ae 	b.w	80055fa <__retarget_lock_release_recursive>
 800549e:	bf00      	nop
 80054a0:	200002c5 	.word	0x200002c5

080054a4 <__sinit_lock_acquire>:
 80054a4:	4801      	ldr	r0, [pc, #4]	; (80054ac <__sinit_lock_acquire+0x8>)
 80054a6:	f000 b8a7 	b.w	80055f8 <__retarget_lock_acquire_recursive>
 80054aa:	bf00      	nop
 80054ac:	200002c6 	.word	0x200002c6

080054b0 <__sinit_lock_release>:
 80054b0:	4801      	ldr	r0, [pc, #4]	; (80054b8 <__sinit_lock_release+0x8>)
 80054b2:	f000 b8a2 	b.w	80055fa <__retarget_lock_release_recursive>
 80054b6:	bf00      	nop
 80054b8:	200002c6 	.word	0x200002c6

080054bc <__sinit>:
 80054bc:	b510      	push	{r4, lr}
 80054be:	4604      	mov	r4, r0
 80054c0:	f7ff fff0 	bl	80054a4 <__sinit_lock_acquire>
 80054c4:	69a3      	ldr	r3, [r4, #24]
 80054c6:	b11b      	cbz	r3, 80054d0 <__sinit+0x14>
 80054c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054cc:	f7ff bff0 	b.w	80054b0 <__sinit_lock_release>
 80054d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80054d4:	6523      	str	r3, [r4, #80]	; 0x50
 80054d6:	4b13      	ldr	r3, [pc, #76]	; (8005524 <__sinit+0x68>)
 80054d8:	4a13      	ldr	r2, [pc, #76]	; (8005528 <__sinit+0x6c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80054de:	42a3      	cmp	r3, r4
 80054e0:	bf04      	itt	eq
 80054e2:	2301      	moveq	r3, #1
 80054e4:	61a3      	streq	r3, [r4, #24]
 80054e6:	4620      	mov	r0, r4
 80054e8:	f000 f820 	bl	800552c <__sfp>
 80054ec:	6060      	str	r0, [r4, #4]
 80054ee:	4620      	mov	r0, r4
 80054f0:	f000 f81c 	bl	800552c <__sfp>
 80054f4:	60a0      	str	r0, [r4, #8]
 80054f6:	4620      	mov	r0, r4
 80054f8:	f000 f818 	bl	800552c <__sfp>
 80054fc:	2200      	movs	r2, #0
 80054fe:	60e0      	str	r0, [r4, #12]
 8005500:	2104      	movs	r1, #4
 8005502:	6860      	ldr	r0, [r4, #4]
 8005504:	f7ff ff82 	bl	800540c <std>
 8005508:	68a0      	ldr	r0, [r4, #8]
 800550a:	2201      	movs	r2, #1
 800550c:	2109      	movs	r1, #9
 800550e:	f7ff ff7d 	bl	800540c <std>
 8005512:	68e0      	ldr	r0, [r4, #12]
 8005514:	2202      	movs	r2, #2
 8005516:	2112      	movs	r1, #18
 8005518:	f7ff ff78 	bl	800540c <std>
 800551c:	2301      	movs	r3, #1
 800551e:	61a3      	str	r3, [r4, #24]
 8005520:	e7d2      	b.n	80054c8 <__sinit+0xc>
 8005522:	bf00      	nop
 8005524:	08005fb4 	.word	0x08005fb4
 8005528:	08005455 	.word	0x08005455

0800552c <__sfp>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	4607      	mov	r7, r0
 8005530:	f7ff ffac 	bl	800548c <__sfp_lock_acquire>
 8005534:	4b1e      	ldr	r3, [pc, #120]	; (80055b0 <__sfp+0x84>)
 8005536:	681e      	ldr	r6, [r3, #0]
 8005538:	69b3      	ldr	r3, [r6, #24]
 800553a:	b913      	cbnz	r3, 8005542 <__sfp+0x16>
 800553c:	4630      	mov	r0, r6
 800553e:	f7ff ffbd 	bl	80054bc <__sinit>
 8005542:	3648      	adds	r6, #72	; 0x48
 8005544:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005548:	3b01      	subs	r3, #1
 800554a:	d503      	bpl.n	8005554 <__sfp+0x28>
 800554c:	6833      	ldr	r3, [r6, #0]
 800554e:	b30b      	cbz	r3, 8005594 <__sfp+0x68>
 8005550:	6836      	ldr	r6, [r6, #0]
 8005552:	e7f7      	b.n	8005544 <__sfp+0x18>
 8005554:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005558:	b9d5      	cbnz	r5, 8005590 <__sfp+0x64>
 800555a:	4b16      	ldr	r3, [pc, #88]	; (80055b4 <__sfp+0x88>)
 800555c:	60e3      	str	r3, [r4, #12]
 800555e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005562:	6665      	str	r5, [r4, #100]	; 0x64
 8005564:	f000 f847 	bl	80055f6 <__retarget_lock_init_recursive>
 8005568:	f7ff ff96 	bl	8005498 <__sfp_lock_release>
 800556c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005570:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005574:	6025      	str	r5, [r4, #0]
 8005576:	61a5      	str	r5, [r4, #24]
 8005578:	2208      	movs	r2, #8
 800557a:	4629      	mov	r1, r5
 800557c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005580:	f7ff fc26 	bl	8004dd0 <memset>
 8005584:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005588:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800558c:	4620      	mov	r0, r4
 800558e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005590:	3468      	adds	r4, #104	; 0x68
 8005592:	e7d9      	b.n	8005548 <__sfp+0x1c>
 8005594:	2104      	movs	r1, #4
 8005596:	4638      	mov	r0, r7
 8005598:	f7ff ff62 	bl	8005460 <__sfmoreglue>
 800559c:	4604      	mov	r4, r0
 800559e:	6030      	str	r0, [r6, #0]
 80055a0:	2800      	cmp	r0, #0
 80055a2:	d1d5      	bne.n	8005550 <__sfp+0x24>
 80055a4:	f7ff ff78 	bl	8005498 <__sfp_lock_release>
 80055a8:	230c      	movs	r3, #12
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	e7ee      	b.n	800558c <__sfp+0x60>
 80055ae:	bf00      	nop
 80055b0:	08005fb4 	.word	0x08005fb4
 80055b4:	ffff0001 	.word	0xffff0001

080055b8 <_fwalk_reent>:
 80055b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055bc:	4606      	mov	r6, r0
 80055be:	4688      	mov	r8, r1
 80055c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80055c4:	2700      	movs	r7, #0
 80055c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055ca:	f1b9 0901 	subs.w	r9, r9, #1
 80055ce:	d505      	bpl.n	80055dc <_fwalk_reent+0x24>
 80055d0:	6824      	ldr	r4, [r4, #0]
 80055d2:	2c00      	cmp	r4, #0
 80055d4:	d1f7      	bne.n	80055c6 <_fwalk_reent+0xe>
 80055d6:	4638      	mov	r0, r7
 80055d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055dc:	89ab      	ldrh	r3, [r5, #12]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d907      	bls.n	80055f2 <_fwalk_reent+0x3a>
 80055e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055e6:	3301      	adds	r3, #1
 80055e8:	d003      	beq.n	80055f2 <_fwalk_reent+0x3a>
 80055ea:	4629      	mov	r1, r5
 80055ec:	4630      	mov	r0, r6
 80055ee:	47c0      	blx	r8
 80055f0:	4307      	orrs	r7, r0
 80055f2:	3568      	adds	r5, #104	; 0x68
 80055f4:	e7e9      	b.n	80055ca <_fwalk_reent+0x12>

080055f6 <__retarget_lock_init_recursive>:
 80055f6:	4770      	bx	lr

080055f8 <__retarget_lock_acquire_recursive>:
 80055f8:	4770      	bx	lr

080055fa <__retarget_lock_release_recursive>:
 80055fa:	4770      	bx	lr

080055fc <__swhatbuf_r>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	460e      	mov	r6, r1
 8005600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005604:	2900      	cmp	r1, #0
 8005606:	b096      	sub	sp, #88	; 0x58
 8005608:	4614      	mov	r4, r2
 800560a:	461d      	mov	r5, r3
 800560c:	da08      	bge.n	8005620 <__swhatbuf_r+0x24>
 800560e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	602a      	str	r2, [r5, #0]
 8005616:	061a      	lsls	r2, r3, #24
 8005618:	d410      	bmi.n	800563c <__swhatbuf_r+0x40>
 800561a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800561e:	e00e      	b.n	800563e <__swhatbuf_r+0x42>
 8005620:	466a      	mov	r2, sp
 8005622:	f000 fbf9 	bl	8005e18 <_fstat_r>
 8005626:	2800      	cmp	r0, #0
 8005628:	dbf1      	blt.n	800560e <__swhatbuf_r+0x12>
 800562a:	9a01      	ldr	r2, [sp, #4]
 800562c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005630:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005634:	425a      	negs	r2, r3
 8005636:	415a      	adcs	r2, r3
 8005638:	602a      	str	r2, [r5, #0]
 800563a:	e7ee      	b.n	800561a <__swhatbuf_r+0x1e>
 800563c:	2340      	movs	r3, #64	; 0x40
 800563e:	2000      	movs	r0, #0
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	b016      	add	sp, #88	; 0x58
 8005644:	bd70      	pop	{r4, r5, r6, pc}
	...

08005648 <__smakebuf_r>:
 8005648:	898b      	ldrh	r3, [r1, #12]
 800564a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800564c:	079d      	lsls	r5, r3, #30
 800564e:	4606      	mov	r6, r0
 8005650:	460c      	mov	r4, r1
 8005652:	d507      	bpl.n	8005664 <__smakebuf_r+0x1c>
 8005654:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	6123      	str	r3, [r4, #16]
 800565c:	2301      	movs	r3, #1
 800565e:	6163      	str	r3, [r4, #20]
 8005660:	b002      	add	sp, #8
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	ab01      	add	r3, sp, #4
 8005666:	466a      	mov	r2, sp
 8005668:	f7ff ffc8 	bl	80055fc <__swhatbuf_r>
 800566c:	9900      	ldr	r1, [sp, #0]
 800566e:	4605      	mov	r5, r0
 8005670:	4630      	mov	r0, r6
 8005672:	f7ff fc21 	bl	8004eb8 <_malloc_r>
 8005676:	b948      	cbnz	r0, 800568c <__smakebuf_r+0x44>
 8005678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800567c:	059a      	lsls	r2, r3, #22
 800567e:	d4ef      	bmi.n	8005660 <__smakebuf_r+0x18>
 8005680:	f023 0303 	bic.w	r3, r3, #3
 8005684:	f043 0302 	orr.w	r3, r3, #2
 8005688:	81a3      	strh	r3, [r4, #12]
 800568a:	e7e3      	b.n	8005654 <__smakebuf_r+0xc>
 800568c:	4b0d      	ldr	r3, [pc, #52]	; (80056c4 <__smakebuf_r+0x7c>)
 800568e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	6020      	str	r0, [r4, #0]
 8005694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	9b00      	ldr	r3, [sp, #0]
 800569c:	6163      	str	r3, [r4, #20]
 800569e:	9b01      	ldr	r3, [sp, #4]
 80056a0:	6120      	str	r0, [r4, #16]
 80056a2:	b15b      	cbz	r3, 80056bc <__smakebuf_r+0x74>
 80056a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056a8:	4630      	mov	r0, r6
 80056aa:	f000 fbc7 	bl	8005e3c <_isatty_r>
 80056ae:	b128      	cbz	r0, 80056bc <__smakebuf_r+0x74>
 80056b0:	89a3      	ldrh	r3, [r4, #12]
 80056b2:	f023 0303 	bic.w	r3, r3, #3
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	81a3      	strh	r3, [r4, #12]
 80056bc:	89a0      	ldrh	r0, [r4, #12]
 80056be:	4305      	orrs	r5, r0
 80056c0:	81a5      	strh	r5, [r4, #12]
 80056c2:	e7cd      	b.n	8005660 <__smakebuf_r+0x18>
 80056c4:	08005455 	.word	0x08005455

080056c8 <__malloc_lock>:
 80056c8:	4801      	ldr	r0, [pc, #4]	; (80056d0 <__malloc_lock+0x8>)
 80056ca:	f7ff bf95 	b.w	80055f8 <__retarget_lock_acquire_recursive>
 80056ce:	bf00      	nop
 80056d0:	200002c4 	.word	0x200002c4

080056d4 <__malloc_unlock>:
 80056d4:	4801      	ldr	r0, [pc, #4]	; (80056dc <__malloc_unlock+0x8>)
 80056d6:	f7ff bf90 	b.w	80055fa <__retarget_lock_release_recursive>
 80056da:	bf00      	nop
 80056dc:	200002c4 	.word	0x200002c4

080056e0 <__sfputc_r>:
 80056e0:	6893      	ldr	r3, [r2, #8]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	b410      	push	{r4}
 80056e8:	6093      	str	r3, [r2, #8]
 80056ea:	da08      	bge.n	80056fe <__sfputc_r+0x1e>
 80056ec:	6994      	ldr	r4, [r2, #24]
 80056ee:	42a3      	cmp	r3, r4
 80056f0:	db01      	blt.n	80056f6 <__sfputc_r+0x16>
 80056f2:	290a      	cmp	r1, #10
 80056f4:	d103      	bne.n	80056fe <__sfputc_r+0x1e>
 80056f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056fa:	f7ff bd05 	b.w	8005108 <__swbuf_r>
 80056fe:	6813      	ldr	r3, [r2, #0]
 8005700:	1c58      	adds	r0, r3, #1
 8005702:	6010      	str	r0, [r2, #0]
 8005704:	7019      	strb	r1, [r3, #0]
 8005706:	4608      	mov	r0, r1
 8005708:	f85d 4b04 	ldr.w	r4, [sp], #4
 800570c:	4770      	bx	lr

0800570e <__sfputs_r>:
 800570e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005710:	4606      	mov	r6, r0
 8005712:	460f      	mov	r7, r1
 8005714:	4614      	mov	r4, r2
 8005716:	18d5      	adds	r5, r2, r3
 8005718:	42ac      	cmp	r4, r5
 800571a:	d101      	bne.n	8005720 <__sfputs_r+0x12>
 800571c:	2000      	movs	r0, #0
 800571e:	e007      	b.n	8005730 <__sfputs_r+0x22>
 8005720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005724:	463a      	mov	r2, r7
 8005726:	4630      	mov	r0, r6
 8005728:	f7ff ffda 	bl	80056e0 <__sfputc_r>
 800572c:	1c43      	adds	r3, r0, #1
 800572e:	d1f3      	bne.n	8005718 <__sfputs_r+0xa>
 8005730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005734 <_vfiprintf_r>:
 8005734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005738:	460d      	mov	r5, r1
 800573a:	b09d      	sub	sp, #116	; 0x74
 800573c:	4614      	mov	r4, r2
 800573e:	4698      	mov	r8, r3
 8005740:	4606      	mov	r6, r0
 8005742:	b118      	cbz	r0, 800574c <_vfiprintf_r+0x18>
 8005744:	6983      	ldr	r3, [r0, #24]
 8005746:	b90b      	cbnz	r3, 800574c <_vfiprintf_r+0x18>
 8005748:	f7ff feb8 	bl	80054bc <__sinit>
 800574c:	4b89      	ldr	r3, [pc, #548]	; (8005974 <_vfiprintf_r+0x240>)
 800574e:	429d      	cmp	r5, r3
 8005750:	d11b      	bne.n	800578a <_vfiprintf_r+0x56>
 8005752:	6875      	ldr	r5, [r6, #4]
 8005754:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005756:	07d9      	lsls	r1, r3, #31
 8005758:	d405      	bmi.n	8005766 <_vfiprintf_r+0x32>
 800575a:	89ab      	ldrh	r3, [r5, #12]
 800575c:	059a      	lsls	r2, r3, #22
 800575e:	d402      	bmi.n	8005766 <_vfiprintf_r+0x32>
 8005760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005762:	f7ff ff49 	bl	80055f8 <__retarget_lock_acquire_recursive>
 8005766:	89ab      	ldrh	r3, [r5, #12]
 8005768:	071b      	lsls	r3, r3, #28
 800576a:	d501      	bpl.n	8005770 <_vfiprintf_r+0x3c>
 800576c:	692b      	ldr	r3, [r5, #16]
 800576e:	b9eb      	cbnz	r3, 80057ac <_vfiprintf_r+0x78>
 8005770:	4629      	mov	r1, r5
 8005772:	4630      	mov	r0, r6
 8005774:	f7ff fd1a 	bl	80051ac <__swsetup_r>
 8005778:	b1c0      	cbz	r0, 80057ac <_vfiprintf_r+0x78>
 800577a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800577c:	07dc      	lsls	r4, r3, #31
 800577e:	d50e      	bpl.n	800579e <_vfiprintf_r+0x6a>
 8005780:	f04f 30ff 	mov.w	r0, #4294967295
 8005784:	b01d      	add	sp, #116	; 0x74
 8005786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800578a:	4b7b      	ldr	r3, [pc, #492]	; (8005978 <_vfiprintf_r+0x244>)
 800578c:	429d      	cmp	r5, r3
 800578e:	d101      	bne.n	8005794 <_vfiprintf_r+0x60>
 8005790:	68b5      	ldr	r5, [r6, #8]
 8005792:	e7df      	b.n	8005754 <_vfiprintf_r+0x20>
 8005794:	4b79      	ldr	r3, [pc, #484]	; (800597c <_vfiprintf_r+0x248>)
 8005796:	429d      	cmp	r5, r3
 8005798:	bf08      	it	eq
 800579a:	68f5      	ldreq	r5, [r6, #12]
 800579c:	e7da      	b.n	8005754 <_vfiprintf_r+0x20>
 800579e:	89ab      	ldrh	r3, [r5, #12]
 80057a0:	0598      	lsls	r0, r3, #22
 80057a2:	d4ed      	bmi.n	8005780 <_vfiprintf_r+0x4c>
 80057a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057a6:	f7ff ff28 	bl	80055fa <__retarget_lock_release_recursive>
 80057aa:	e7e9      	b.n	8005780 <_vfiprintf_r+0x4c>
 80057ac:	2300      	movs	r3, #0
 80057ae:	9309      	str	r3, [sp, #36]	; 0x24
 80057b0:	2320      	movs	r3, #32
 80057b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80057ba:	2330      	movs	r3, #48	; 0x30
 80057bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005980 <_vfiprintf_r+0x24c>
 80057c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057c4:	f04f 0901 	mov.w	r9, #1
 80057c8:	4623      	mov	r3, r4
 80057ca:	469a      	mov	sl, r3
 80057cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057d0:	b10a      	cbz	r2, 80057d6 <_vfiprintf_r+0xa2>
 80057d2:	2a25      	cmp	r2, #37	; 0x25
 80057d4:	d1f9      	bne.n	80057ca <_vfiprintf_r+0x96>
 80057d6:	ebba 0b04 	subs.w	fp, sl, r4
 80057da:	d00b      	beq.n	80057f4 <_vfiprintf_r+0xc0>
 80057dc:	465b      	mov	r3, fp
 80057de:	4622      	mov	r2, r4
 80057e0:	4629      	mov	r1, r5
 80057e2:	4630      	mov	r0, r6
 80057e4:	f7ff ff93 	bl	800570e <__sfputs_r>
 80057e8:	3001      	adds	r0, #1
 80057ea:	f000 80aa 	beq.w	8005942 <_vfiprintf_r+0x20e>
 80057ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057f0:	445a      	add	r2, fp
 80057f2:	9209      	str	r2, [sp, #36]	; 0x24
 80057f4:	f89a 3000 	ldrb.w	r3, [sl]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f000 80a2 	beq.w	8005942 <_vfiprintf_r+0x20e>
 80057fe:	2300      	movs	r3, #0
 8005800:	f04f 32ff 	mov.w	r2, #4294967295
 8005804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005808:	f10a 0a01 	add.w	sl, sl, #1
 800580c:	9304      	str	r3, [sp, #16]
 800580e:	9307      	str	r3, [sp, #28]
 8005810:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005814:	931a      	str	r3, [sp, #104]	; 0x68
 8005816:	4654      	mov	r4, sl
 8005818:	2205      	movs	r2, #5
 800581a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800581e:	4858      	ldr	r0, [pc, #352]	; (8005980 <_vfiprintf_r+0x24c>)
 8005820:	f7fa fcd6 	bl	80001d0 <memchr>
 8005824:	9a04      	ldr	r2, [sp, #16]
 8005826:	b9d8      	cbnz	r0, 8005860 <_vfiprintf_r+0x12c>
 8005828:	06d1      	lsls	r1, r2, #27
 800582a:	bf44      	itt	mi
 800582c:	2320      	movmi	r3, #32
 800582e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005832:	0713      	lsls	r3, r2, #28
 8005834:	bf44      	itt	mi
 8005836:	232b      	movmi	r3, #43	; 0x2b
 8005838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800583c:	f89a 3000 	ldrb.w	r3, [sl]
 8005840:	2b2a      	cmp	r3, #42	; 0x2a
 8005842:	d015      	beq.n	8005870 <_vfiprintf_r+0x13c>
 8005844:	9a07      	ldr	r2, [sp, #28]
 8005846:	4654      	mov	r4, sl
 8005848:	2000      	movs	r0, #0
 800584a:	f04f 0c0a 	mov.w	ip, #10
 800584e:	4621      	mov	r1, r4
 8005850:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005854:	3b30      	subs	r3, #48	; 0x30
 8005856:	2b09      	cmp	r3, #9
 8005858:	d94e      	bls.n	80058f8 <_vfiprintf_r+0x1c4>
 800585a:	b1b0      	cbz	r0, 800588a <_vfiprintf_r+0x156>
 800585c:	9207      	str	r2, [sp, #28]
 800585e:	e014      	b.n	800588a <_vfiprintf_r+0x156>
 8005860:	eba0 0308 	sub.w	r3, r0, r8
 8005864:	fa09 f303 	lsl.w	r3, r9, r3
 8005868:	4313      	orrs	r3, r2
 800586a:	9304      	str	r3, [sp, #16]
 800586c:	46a2      	mov	sl, r4
 800586e:	e7d2      	b.n	8005816 <_vfiprintf_r+0xe2>
 8005870:	9b03      	ldr	r3, [sp, #12]
 8005872:	1d19      	adds	r1, r3, #4
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	9103      	str	r1, [sp, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	bfbb      	ittet	lt
 800587c:	425b      	neglt	r3, r3
 800587e:	f042 0202 	orrlt.w	r2, r2, #2
 8005882:	9307      	strge	r3, [sp, #28]
 8005884:	9307      	strlt	r3, [sp, #28]
 8005886:	bfb8      	it	lt
 8005888:	9204      	strlt	r2, [sp, #16]
 800588a:	7823      	ldrb	r3, [r4, #0]
 800588c:	2b2e      	cmp	r3, #46	; 0x2e
 800588e:	d10c      	bne.n	80058aa <_vfiprintf_r+0x176>
 8005890:	7863      	ldrb	r3, [r4, #1]
 8005892:	2b2a      	cmp	r3, #42	; 0x2a
 8005894:	d135      	bne.n	8005902 <_vfiprintf_r+0x1ce>
 8005896:	9b03      	ldr	r3, [sp, #12]
 8005898:	1d1a      	adds	r2, r3, #4
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	9203      	str	r2, [sp, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	bfb8      	it	lt
 80058a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80058a6:	3402      	adds	r4, #2
 80058a8:	9305      	str	r3, [sp, #20]
 80058aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005990 <_vfiprintf_r+0x25c>
 80058ae:	7821      	ldrb	r1, [r4, #0]
 80058b0:	2203      	movs	r2, #3
 80058b2:	4650      	mov	r0, sl
 80058b4:	f7fa fc8c 	bl	80001d0 <memchr>
 80058b8:	b140      	cbz	r0, 80058cc <_vfiprintf_r+0x198>
 80058ba:	2340      	movs	r3, #64	; 0x40
 80058bc:	eba0 000a 	sub.w	r0, r0, sl
 80058c0:	fa03 f000 	lsl.w	r0, r3, r0
 80058c4:	9b04      	ldr	r3, [sp, #16]
 80058c6:	4303      	orrs	r3, r0
 80058c8:	3401      	adds	r4, #1
 80058ca:	9304      	str	r3, [sp, #16]
 80058cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058d0:	482c      	ldr	r0, [pc, #176]	; (8005984 <_vfiprintf_r+0x250>)
 80058d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058d6:	2206      	movs	r2, #6
 80058d8:	f7fa fc7a 	bl	80001d0 <memchr>
 80058dc:	2800      	cmp	r0, #0
 80058de:	d03f      	beq.n	8005960 <_vfiprintf_r+0x22c>
 80058e0:	4b29      	ldr	r3, [pc, #164]	; (8005988 <_vfiprintf_r+0x254>)
 80058e2:	bb1b      	cbnz	r3, 800592c <_vfiprintf_r+0x1f8>
 80058e4:	9b03      	ldr	r3, [sp, #12]
 80058e6:	3307      	adds	r3, #7
 80058e8:	f023 0307 	bic.w	r3, r3, #7
 80058ec:	3308      	adds	r3, #8
 80058ee:	9303      	str	r3, [sp, #12]
 80058f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058f2:	443b      	add	r3, r7
 80058f4:	9309      	str	r3, [sp, #36]	; 0x24
 80058f6:	e767      	b.n	80057c8 <_vfiprintf_r+0x94>
 80058f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80058fc:	460c      	mov	r4, r1
 80058fe:	2001      	movs	r0, #1
 8005900:	e7a5      	b.n	800584e <_vfiprintf_r+0x11a>
 8005902:	2300      	movs	r3, #0
 8005904:	3401      	adds	r4, #1
 8005906:	9305      	str	r3, [sp, #20]
 8005908:	4619      	mov	r1, r3
 800590a:	f04f 0c0a 	mov.w	ip, #10
 800590e:	4620      	mov	r0, r4
 8005910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005914:	3a30      	subs	r2, #48	; 0x30
 8005916:	2a09      	cmp	r2, #9
 8005918:	d903      	bls.n	8005922 <_vfiprintf_r+0x1ee>
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0c5      	beq.n	80058aa <_vfiprintf_r+0x176>
 800591e:	9105      	str	r1, [sp, #20]
 8005920:	e7c3      	b.n	80058aa <_vfiprintf_r+0x176>
 8005922:	fb0c 2101 	mla	r1, ip, r1, r2
 8005926:	4604      	mov	r4, r0
 8005928:	2301      	movs	r3, #1
 800592a:	e7f0      	b.n	800590e <_vfiprintf_r+0x1da>
 800592c:	ab03      	add	r3, sp, #12
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	462a      	mov	r2, r5
 8005932:	4b16      	ldr	r3, [pc, #88]	; (800598c <_vfiprintf_r+0x258>)
 8005934:	a904      	add	r1, sp, #16
 8005936:	4630      	mov	r0, r6
 8005938:	f3af 8000 	nop.w
 800593c:	4607      	mov	r7, r0
 800593e:	1c78      	adds	r0, r7, #1
 8005940:	d1d6      	bne.n	80058f0 <_vfiprintf_r+0x1bc>
 8005942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005944:	07d9      	lsls	r1, r3, #31
 8005946:	d405      	bmi.n	8005954 <_vfiprintf_r+0x220>
 8005948:	89ab      	ldrh	r3, [r5, #12]
 800594a:	059a      	lsls	r2, r3, #22
 800594c:	d402      	bmi.n	8005954 <_vfiprintf_r+0x220>
 800594e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005950:	f7ff fe53 	bl	80055fa <__retarget_lock_release_recursive>
 8005954:	89ab      	ldrh	r3, [r5, #12]
 8005956:	065b      	lsls	r3, r3, #25
 8005958:	f53f af12 	bmi.w	8005780 <_vfiprintf_r+0x4c>
 800595c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800595e:	e711      	b.n	8005784 <_vfiprintf_r+0x50>
 8005960:	ab03      	add	r3, sp, #12
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	462a      	mov	r2, r5
 8005966:	4b09      	ldr	r3, [pc, #36]	; (800598c <_vfiprintf_r+0x258>)
 8005968:	a904      	add	r1, sp, #16
 800596a:	4630      	mov	r0, r6
 800596c:	f000 f880 	bl	8005a70 <_printf_i>
 8005970:	e7e4      	b.n	800593c <_vfiprintf_r+0x208>
 8005972:	bf00      	nop
 8005974:	08005fd8 	.word	0x08005fd8
 8005978:	08005ff8 	.word	0x08005ff8
 800597c:	08005fb8 	.word	0x08005fb8
 8005980:	08006018 	.word	0x08006018
 8005984:	08006022 	.word	0x08006022
 8005988:	00000000 	.word	0x00000000
 800598c:	0800570f 	.word	0x0800570f
 8005990:	0800601e 	.word	0x0800601e

08005994 <_printf_common>:
 8005994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005998:	4616      	mov	r6, r2
 800599a:	4699      	mov	r9, r3
 800599c:	688a      	ldr	r2, [r1, #8]
 800599e:	690b      	ldr	r3, [r1, #16]
 80059a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059a4:	4293      	cmp	r3, r2
 80059a6:	bfb8      	it	lt
 80059a8:	4613      	movlt	r3, r2
 80059aa:	6033      	str	r3, [r6, #0]
 80059ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059b0:	4607      	mov	r7, r0
 80059b2:	460c      	mov	r4, r1
 80059b4:	b10a      	cbz	r2, 80059ba <_printf_common+0x26>
 80059b6:	3301      	adds	r3, #1
 80059b8:	6033      	str	r3, [r6, #0]
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	0699      	lsls	r1, r3, #26
 80059be:	bf42      	ittt	mi
 80059c0:	6833      	ldrmi	r3, [r6, #0]
 80059c2:	3302      	addmi	r3, #2
 80059c4:	6033      	strmi	r3, [r6, #0]
 80059c6:	6825      	ldr	r5, [r4, #0]
 80059c8:	f015 0506 	ands.w	r5, r5, #6
 80059cc:	d106      	bne.n	80059dc <_printf_common+0x48>
 80059ce:	f104 0a19 	add.w	sl, r4, #25
 80059d2:	68e3      	ldr	r3, [r4, #12]
 80059d4:	6832      	ldr	r2, [r6, #0]
 80059d6:	1a9b      	subs	r3, r3, r2
 80059d8:	42ab      	cmp	r3, r5
 80059da:	dc26      	bgt.n	8005a2a <_printf_common+0x96>
 80059dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059e0:	1e13      	subs	r3, r2, #0
 80059e2:	6822      	ldr	r2, [r4, #0]
 80059e4:	bf18      	it	ne
 80059e6:	2301      	movne	r3, #1
 80059e8:	0692      	lsls	r2, r2, #26
 80059ea:	d42b      	bmi.n	8005a44 <_printf_common+0xb0>
 80059ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059f0:	4649      	mov	r1, r9
 80059f2:	4638      	mov	r0, r7
 80059f4:	47c0      	blx	r8
 80059f6:	3001      	adds	r0, #1
 80059f8:	d01e      	beq.n	8005a38 <_printf_common+0xa4>
 80059fa:	6823      	ldr	r3, [r4, #0]
 80059fc:	68e5      	ldr	r5, [r4, #12]
 80059fe:	6832      	ldr	r2, [r6, #0]
 8005a00:	f003 0306 	and.w	r3, r3, #6
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	bf08      	it	eq
 8005a08:	1aad      	subeq	r5, r5, r2
 8005a0a:	68a3      	ldr	r3, [r4, #8]
 8005a0c:	6922      	ldr	r2, [r4, #16]
 8005a0e:	bf0c      	ite	eq
 8005a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a14:	2500      	movne	r5, #0
 8005a16:	4293      	cmp	r3, r2
 8005a18:	bfc4      	itt	gt
 8005a1a:	1a9b      	subgt	r3, r3, r2
 8005a1c:	18ed      	addgt	r5, r5, r3
 8005a1e:	2600      	movs	r6, #0
 8005a20:	341a      	adds	r4, #26
 8005a22:	42b5      	cmp	r5, r6
 8005a24:	d11a      	bne.n	8005a5c <_printf_common+0xc8>
 8005a26:	2000      	movs	r0, #0
 8005a28:	e008      	b.n	8005a3c <_printf_common+0xa8>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	4652      	mov	r2, sl
 8005a2e:	4649      	mov	r1, r9
 8005a30:	4638      	mov	r0, r7
 8005a32:	47c0      	blx	r8
 8005a34:	3001      	adds	r0, #1
 8005a36:	d103      	bne.n	8005a40 <_printf_common+0xac>
 8005a38:	f04f 30ff 	mov.w	r0, #4294967295
 8005a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a40:	3501      	adds	r5, #1
 8005a42:	e7c6      	b.n	80059d2 <_printf_common+0x3e>
 8005a44:	18e1      	adds	r1, r4, r3
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	2030      	movs	r0, #48	; 0x30
 8005a4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a4e:	4422      	add	r2, r4
 8005a50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a58:	3302      	adds	r3, #2
 8005a5a:	e7c7      	b.n	80059ec <_printf_common+0x58>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	4622      	mov	r2, r4
 8005a60:	4649      	mov	r1, r9
 8005a62:	4638      	mov	r0, r7
 8005a64:	47c0      	blx	r8
 8005a66:	3001      	adds	r0, #1
 8005a68:	d0e6      	beq.n	8005a38 <_printf_common+0xa4>
 8005a6a:	3601      	adds	r6, #1
 8005a6c:	e7d9      	b.n	8005a22 <_printf_common+0x8e>
	...

08005a70 <_printf_i>:
 8005a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a74:	7e0f      	ldrb	r7, [r1, #24]
 8005a76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a78:	2f78      	cmp	r7, #120	; 0x78
 8005a7a:	4691      	mov	r9, r2
 8005a7c:	4680      	mov	r8, r0
 8005a7e:	460c      	mov	r4, r1
 8005a80:	469a      	mov	sl, r3
 8005a82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a86:	d807      	bhi.n	8005a98 <_printf_i+0x28>
 8005a88:	2f62      	cmp	r7, #98	; 0x62
 8005a8a:	d80a      	bhi.n	8005aa2 <_printf_i+0x32>
 8005a8c:	2f00      	cmp	r7, #0
 8005a8e:	f000 80d8 	beq.w	8005c42 <_printf_i+0x1d2>
 8005a92:	2f58      	cmp	r7, #88	; 0x58
 8005a94:	f000 80a3 	beq.w	8005bde <_printf_i+0x16e>
 8005a98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005aa0:	e03a      	b.n	8005b18 <_printf_i+0xa8>
 8005aa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005aa6:	2b15      	cmp	r3, #21
 8005aa8:	d8f6      	bhi.n	8005a98 <_printf_i+0x28>
 8005aaa:	a101      	add	r1, pc, #4	; (adr r1, 8005ab0 <_printf_i+0x40>)
 8005aac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ab0:	08005b09 	.word	0x08005b09
 8005ab4:	08005b1d 	.word	0x08005b1d
 8005ab8:	08005a99 	.word	0x08005a99
 8005abc:	08005a99 	.word	0x08005a99
 8005ac0:	08005a99 	.word	0x08005a99
 8005ac4:	08005a99 	.word	0x08005a99
 8005ac8:	08005b1d 	.word	0x08005b1d
 8005acc:	08005a99 	.word	0x08005a99
 8005ad0:	08005a99 	.word	0x08005a99
 8005ad4:	08005a99 	.word	0x08005a99
 8005ad8:	08005a99 	.word	0x08005a99
 8005adc:	08005c29 	.word	0x08005c29
 8005ae0:	08005b4d 	.word	0x08005b4d
 8005ae4:	08005c0b 	.word	0x08005c0b
 8005ae8:	08005a99 	.word	0x08005a99
 8005aec:	08005a99 	.word	0x08005a99
 8005af0:	08005c4b 	.word	0x08005c4b
 8005af4:	08005a99 	.word	0x08005a99
 8005af8:	08005b4d 	.word	0x08005b4d
 8005afc:	08005a99 	.word	0x08005a99
 8005b00:	08005a99 	.word	0x08005a99
 8005b04:	08005c13 	.word	0x08005c13
 8005b08:	682b      	ldr	r3, [r5, #0]
 8005b0a:	1d1a      	adds	r2, r3, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	602a      	str	r2, [r5, #0]
 8005b10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e0a3      	b.n	8005c64 <_printf_i+0x1f4>
 8005b1c:	6820      	ldr	r0, [r4, #0]
 8005b1e:	6829      	ldr	r1, [r5, #0]
 8005b20:	0606      	lsls	r6, r0, #24
 8005b22:	f101 0304 	add.w	r3, r1, #4
 8005b26:	d50a      	bpl.n	8005b3e <_printf_i+0xce>
 8005b28:	680e      	ldr	r6, [r1, #0]
 8005b2a:	602b      	str	r3, [r5, #0]
 8005b2c:	2e00      	cmp	r6, #0
 8005b2e:	da03      	bge.n	8005b38 <_printf_i+0xc8>
 8005b30:	232d      	movs	r3, #45	; 0x2d
 8005b32:	4276      	negs	r6, r6
 8005b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b38:	485e      	ldr	r0, [pc, #376]	; (8005cb4 <_printf_i+0x244>)
 8005b3a:	230a      	movs	r3, #10
 8005b3c:	e019      	b.n	8005b72 <_printf_i+0x102>
 8005b3e:	680e      	ldr	r6, [r1, #0]
 8005b40:	602b      	str	r3, [r5, #0]
 8005b42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b46:	bf18      	it	ne
 8005b48:	b236      	sxthne	r6, r6
 8005b4a:	e7ef      	b.n	8005b2c <_printf_i+0xbc>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	6820      	ldr	r0, [r4, #0]
 8005b50:	1d19      	adds	r1, r3, #4
 8005b52:	6029      	str	r1, [r5, #0]
 8005b54:	0601      	lsls	r1, r0, #24
 8005b56:	d501      	bpl.n	8005b5c <_printf_i+0xec>
 8005b58:	681e      	ldr	r6, [r3, #0]
 8005b5a:	e002      	b.n	8005b62 <_printf_i+0xf2>
 8005b5c:	0646      	lsls	r6, r0, #25
 8005b5e:	d5fb      	bpl.n	8005b58 <_printf_i+0xe8>
 8005b60:	881e      	ldrh	r6, [r3, #0]
 8005b62:	4854      	ldr	r0, [pc, #336]	; (8005cb4 <_printf_i+0x244>)
 8005b64:	2f6f      	cmp	r7, #111	; 0x6f
 8005b66:	bf0c      	ite	eq
 8005b68:	2308      	moveq	r3, #8
 8005b6a:	230a      	movne	r3, #10
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b72:	6865      	ldr	r5, [r4, #4]
 8005b74:	60a5      	str	r5, [r4, #8]
 8005b76:	2d00      	cmp	r5, #0
 8005b78:	bfa2      	ittt	ge
 8005b7a:	6821      	ldrge	r1, [r4, #0]
 8005b7c:	f021 0104 	bicge.w	r1, r1, #4
 8005b80:	6021      	strge	r1, [r4, #0]
 8005b82:	b90e      	cbnz	r6, 8005b88 <_printf_i+0x118>
 8005b84:	2d00      	cmp	r5, #0
 8005b86:	d04d      	beq.n	8005c24 <_printf_i+0x1b4>
 8005b88:	4615      	mov	r5, r2
 8005b8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b8e:	fb03 6711 	mls	r7, r3, r1, r6
 8005b92:	5dc7      	ldrb	r7, [r0, r7]
 8005b94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b98:	4637      	mov	r7, r6
 8005b9a:	42bb      	cmp	r3, r7
 8005b9c:	460e      	mov	r6, r1
 8005b9e:	d9f4      	bls.n	8005b8a <_printf_i+0x11a>
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d10b      	bne.n	8005bbc <_printf_i+0x14c>
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	07de      	lsls	r6, r3, #31
 8005ba8:	d508      	bpl.n	8005bbc <_printf_i+0x14c>
 8005baa:	6923      	ldr	r3, [r4, #16]
 8005bac:	6861      	ldr	r1, [r4, #4]
 8005bae:	4299      	cmp	r1, r3
 8005bb0:	bfde      	ittt	le
 8005bb2:	2330      	movle	r3, #48	; 0x30
 8005bb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bbc:	1b52      	subs	r2, r2, r5
 8005bbe:	6122      	str	r2, [r4, #16]
 8005bc0:	f8cd a000 	str.w	sl, [sp]
 8005bc4:	464b      	mov	r3, r9
 8005bc6:	aa03      	add	r2, sp, #12
 8005bc8:	4621      	mov	r1, r4
 8005bca:	4640      	mov	r0, r8
 8005bcc:	f7ff fee2 	bl	8005994 <_printf_common>
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d14c      	bne.n	8005c6e <_printf_i+0x1fe>
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd8:	b004      	add	sp, #16
 8005bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bde:	4835      	ldr	r0, [pc, #212]	; (8005cb4 <_printf_i+0x244>)
 8005be0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005be4:	6829      	ldr	r1, [r5, #0]
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bec:	6029      	str	r1, [r5, #0]
 8005bee:	061d      	lsls	r5, r3, #24
 8005bf0:	d514      	bpl.n	8005c1c <_printf_i+0x1ac>
 8005bf2:	07df      	lsls	r7, r3, #31
 8005bf4:	bf44      	itt	mi
 8005bf6:	f043 0320 	orrmi.w	r3, r3, #32
 8005bfa:	6023      	strmi	r3, [r4, #0]
 8005bfc:	b91e      	cbnz	r6, 8005c06 <_printf_i+0x196>
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	f023 0320 	bic.w	r3, r3, #32
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	2310      	movs	r3, #16
 8005c08:	e7b0      	b.n	8005b6c <_printf_i+0xfc>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	f043 0320 	orr.w	r3, r3, #32
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	2378      	movs	r3, #120	; 0x78
 8005c14:	4828      	ldr	r0, [pc, #160]	; (8005cb8 <_printf_i+0x248>)
 8005c16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c1a:	e7e3      	b.n	8005be4 <_printf_i+0x174>
 8005c1c:	0659      	lsls	r1, r3, #25
 8005c1e:	bf48      	it	mi
 8005c20:	b2b6      	uxthmi	r6, r6
 8005c22:	e7e6      	b.n	8005bf2 <_printf_i+0x182>
 8005c24:	4615      	mov	r5, r2
 8005c26:	e7bb      	b.n	8005ba0 <_printf_i+0x130>
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	6826      	ldr	r6, [r4, #0]
 8005c2c:	6961      	ldr	r1, [r4, #20]
 8005c2e:	1d18      	adds	r0, r3, #4
 8005c30:	6028      	str	r0, [r5, #0]
 8005c32:	0635      	lsls	r5, r6, #24
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	d501      	bpl.n	8005c3c <_printf_i+0x1cc>
 8005c38:	6019      	str	r1, [r3, #0]
 8005c3a:	e002      	b.n	8005c42 <_printf_i+0x1d2>
 8005c3c:	0670      	lsls	r0, r6, #25
 8005c3e:	d5fb      	bpl.n	8005c38 <_printf_i+0x1c8>
 8005c40:	8019      	strh	r1, [r3, #0]
 8005c42:	2300      	movs	r3, #0
 8005c44:	6123      	str	r3, [r4, #16]
 8005c46:	4615      	mov	r5, r2
 8005c48:	e7ba      	b.n	8005bc0 <_printf_i+0x150>
 8005c4a:	682b      	ldr	r3, [r5, #0]
 8005c4c:	1d1a      	adds	r2, r3, #4
 8005c4e:	602a      	str	r2, [r5, #0]
 8005c50:	681d      	ldr	r5, [r3, #0]
 8005c52:	6862      	ldr	r2, [r4, #4]
 8005c54:	2100      	movs	r1, #0
 8005c56:	4628      	mov	r0, r5
 8005c58:	f7fa faba 	bl	80001d0 <memchr>
 8005c5c:	b108      	cbz	r0, 8005c62 <_printf_i+0x1f2>
 8005c5e:	1b40      	subs	r0, r0, r5
 8005c60:	6060      	str	r0, [r4, #4]
 8005c62:	6863      	ldr	r3, [r4, #4]
 8005c64:	6123      	str	r3, [r4, #16]
 8005c66:	2300      	movs	r3, #0
 8005c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c6c:	e7a8      	b.n	8005bc0 <_printf_i+0x150>
 8005c6e:	6923      	ldr	r3, [r4, #16]
 8005c70:	462a      	mov	r2, r5
 8005c72:	4649      	mov	r1, r9
 8005c74:	4640      	mov	r0, r8
 8005c76:	47d0      	blx	sl
 8005c78:	3001      	adds	r0, #1
 8005c7a:	d0ab      	beq.n	8005bd4 <_printf_i+0x164>
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	079b      	lsls	r3, r3, #30
 8005c80:	d413      	bmi.n	8005caa <_printf_i+0x23a>
 8005c82:	68e0      	ldr	r0, [r4, #12]
 8005c84:	9b03      	ldr	r3, [sp, #12]
 8005c86:	4298      	cmp	r0, r3
 8005c88:	bfb8      	it	lt
 8005c8a:	4618      	movlt	r0, r3
 8005c8c:	e7a4      	b.n	8005bd8 <_printf_i+0x168>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	4632      	mov	r2, r6
 8005c92:	4649      	mov	r1, r9
 8005c94:	4640      	mov	r0, r8
 8005c96:	47d0      	blx	sl
 8005c98:	3001      	adds	r0, #1
 8005c9a:	d09b      	beq.n	8005bd4 <_printf_i+0x164>
 8005c9c:	3501      	adds	r5, #1
 8005c9e:	68e3      	ldr	r3, [r4, #12]
 8005ca0:	9903      	ldr	r1, [sp, #12]
 8005ca2:	1a5b      	subs	r3, r3, r1
 8005ca4:	42ab      	cmp	r3, r5
 8005ca6:	dcf2      	bgt.n	8005c8e <_printf_i+0x21e>
 8005ca8:	e7eb      	b.n	8005c82 <_printf_i+0x212>
 8005caa:	2500      	movs	r5, #0
 8005cac:	f104 0619 	add.w	r6, r4, #25
 8005cb0:	e7f5      	b.n	8005c9e <_printf_i+0x22e>
 8005cb2:	bf00      	nop
 8005cb4:	08006029 	.word	0x08006029
 8005cb8:	0800603a 	.word	0x0800603a

08005cbc <_putc_r>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	460d      	mov	r5, r1
 8005cc0:	4614      	mov	r4, r2
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	b118      	cbz	r0, 8005cce <_putc_r+0x12>
 8005cc6:	6983      	ldr	r3, [r0, #24]
 8005cc8:	b90b      	cbnz	r3, 8005cce <_putc_r+0x12>
 8005cca:	f7ff fbf7 	bl	80054bc <__sinit>
 8005cce:	4b1c      	ldr	r3, [pc, #112]	; (8005d40 <_putc_r+0x84>)
 8005cd0:	429c      	cmp	r4, r3
 8005cd2:	d124      	bne.n	8005d1e <_putc_r+0x62>
 8005cd4:	6874      	ldr	r4, [r6, #4]
 8005cd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cd8:	07d8      	lsls	r0, r3, #31
 8005cda:	d405      	bmi.n	8005ce8 <_putc_r+0x2c>
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	0599      	lsls	r1, r3, #22
 8005ce0:	d402      	bmi.n	8005ce8 <_putc_r+0x2c>
 8005ce2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ce4:	f7ff fc88 	bl	80055f8 <__retarget_lock_acquire_recursive>
 8005ce8:	68a3      	ldr	r3, [r4, #8]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	60a3      	str	r3, [r4, #8]
 8005cf0:	da05      	bge.n	8005cfe <_putc_r+0x42>
 8005cf2:	69a2      	ldr	r2, [r4, #24]
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	db1c      	blt.n	8005d32 <_putc_r+0x76>
 8005cf8:	b2eb      	uxtb	r3, r5
 8005cfa:	2b0a      	cmp	r3, #10
 8005cfc:	d019      	beq.n	8005d32 <_putc_r+0x76>
 8005cfe:	6823      	ldr	r3, [r4, #0]
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	6022      	str	r2, [r4, #0]
 8005d04:	701d      	strb	r5, [r3, #0]
 8005d06:	b2ed      	uxtb	r5, r5
 8005d08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d0a:	07da      	lsls	r2, r3, #31
 8005d0c:	d405      	bmi.n	8005d1a <_putc_r+0x5e>
 8005d0e:	89a3      	ldrh	r3, [r4, #12]
 8005d10:	059b      	lsls	r3, r3, #22
 8005d12:	d402      	bmi.n	8005d1a <_putc_r+0x5e>
 8005d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d16:	f7ff fc70 	bl	80055fa <__retarget_lock_release_recursive>
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	bd70      	pop	{r4, r5, r6, pc}
 8005d1e:	4b09      	ldr	r3, [pc, #36]	; (8005d44 <_putc_r+0x88>)
 8005d20:	429c      	cmp	r4, r3
 8005d22:	d101      	bne.n	8005d28 <_putc_r+0x6c>
 8005d24:	68b4      	ldr	r4, [r6, #8]
 8005d26:	e7d6      	b.n	8005cd6 <_putc_r+0x1a>
 8005d28:	4b07      	ldr	r3, [pc, #28]	; (8005d48 <_putc_r+0x8c>)
 8005d2a:	429c      	cmp	r4, r3
 8005d2c:	bf08      	it	eq
 8005d2e:	68f4      	ldreq	r4, [r6, #12]
 8005d30:	e7d1      	b.n	8005cd6 <_putc_r+0x1a>
 8005d32:	4629      	mov	r1, r5
 8005d34:	4622      	mov	r2, r4
 8005d36:	4630      	mov	r0, r6
 8005d38:	f7ff f9e6 	bl	8005108 <__swbuf_r>
 8005d3c:	4605      	mov	r5, r0
 8005d3e:	e7e3      	b.n	8005d08 <_putc_r+0x4c>
 8005d40:	08005fd8 	.word	0x08005fd8
 8005d44:	08005ff8 	.word	0x08005ff8
 8005d48:	08005fb8 	.word	0x08005fb8

08005d4c <__sread>:
 8005d4c:	b510      	push	{r4, lr}
 8005d4e:	460c      	mov	r4, r1
 8005d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d54:	f000 f894 	bl	8005e80 <_read_r>
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	bfab      	itete	ge
 8005d5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d5e:	89a3      	ldrhlt	r3, [r4, #12]
 8005d60:	181b      	addge	r3, r3, r0
 8005d62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d66:	bfac      	ite	ge
 8005d68:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d6a:	81a3      	strhlt	r3, [r4, #12]
 8005d6c:	bd10      	pop	{r4, pc}

08005d6e <__swrite>:
 8005d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d72:	461f      	mov	r7, r3
 8005d74:	898b      	ldrh	r3, [r1, #12]
 8005d76:	05db      	lsls	r3, r3, #23
 8005d78:	4605      	mov	r5, r0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	4616      	mov	r6, r2
 8005d7e:	d505      	bpl.n	8005d8c <__swrite+0x1e>
 8005d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d84:	2302      	movs	r3, #2
 8005d86:	2200      	movs	r2, #0
 8005d88:	f000 f868 	bl	8005e5c <_lseek_r>
 8005d8c:	89a3      	ldrh	r3, [r4, #12]
 8005d8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d96:	81a3      	strh	r3, [r4, #12]
 8005d98:	4632      	mov	r2, r6
 8005d9a:	463b      	mov	r3, r7
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005da2:	f000 b817 	b.w	8005dd4 <_write_r>

08005da6 <__sseek>:
 8005da6:	b510      	push	{r4, lr}
 8005da8:	460c      	mov	r4, r1
 8005daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dae:	f000 f855 	bl	8005e5c <_lseek_r>
 8005db2:	1c43      	adds	r3, r0, #1
 8005db4:	89a3      	ldrh	r3, [r4, #12]
 8005db6:	bf15      	itete	ne
 8005db8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005dba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005dbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005dc2:	81a3      	strheq	r3, [r4, #12]
 8005dc4:	bf18      	it	ne
 8005dc6:	81a3      	strhne	r3, [r4, #12]
 8005dc8:	bd10      	pop	{r4, pc}

08005dca <__sclose>:
 8005dca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dce:	f000 b813 	b.w	8005df8 <_close_r>
	...

08005dd4 <_write_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4d07      	ldr	r5, [pc, #28]	; (8005df4 <_write_r+0x20>)
 8005dd8:	4604      	mov	r4, r0
 8005dda:	4608      	mov	r0, r1
 8005ddc:	4611      	mov	r1, r2
 8005dde:	2200      	movs	r2, #0
 8005de0:	602a      	str	r2, [r5, #0]
 8005de2:	461a      	mov	r2, r3
 8005de4:	f7fb fd1f 	bl	8001826 <_write>
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	d102      	bne.n	8005df2 <_write_r+0x1e>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	b103      	cbz	r3, 8005df2 <_write_r+0x1e>
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	200002c8 	.word	0x200002c8

08005df8 <_close_r>:
 8005df8:	b538      	push	{r3, r4, r5, lr}
 8005dfa:	4d06      	ldr	r5, [pc, #24]	; (8005e14 <_close_r+0x1c>)
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	4604      	mov	r4, r0
 8005e00:	4608      	mov	r0, r1
 8005e02:	602b      	str	r3, [r5, #0]
 8005e04:	f7fb fd2b 	bl	800185e <_close>
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	d102      	bne.n	8005e12 <_close_r+0x1a>
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	b103      	cbz	r3, 8005e12 <_close_r+0x1a>
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
 8005e14:	200002c8 	.word	0x200002c8

08005e18 <_fstat_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	4d07      	ldr	r5, [pc, #28]	; (8005e38 <_fstat_r+0x20>)
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4604      	mov	r4, r0
 8005e20:	4608      	mov	r0, r1
 8005e22:	4611      	mov	r1, r2
 8005e24:	602b      	str	r3, [r5, #0]
 8005e26:	f7fb fd26 	bl	8001876 <_fstat>
 8005e2a:	1c43      	adds	r3, r0, #1
 8005e2c:	d102      	bne.n	8005e34 <_fstat_r+0x1c>
 8005e2e:	682b      	ldr	r3, [r5, #0]
 8005e30:	b103      	cbz	r3, 8005e34 <_fstat_r+0x1c>
 8005e32:	6023      	str	r3, [r4, #0]
 8005e34:	bd38      	pop	{r3, r4, r5, pc}
 8005e36:	bf00      	nop
 8005e38:	200002c8 	.word	0x200002c8

08005e3c <_isatty_r>:
 8005e3c:	b538      	push	{r3, r4, r5, lr}
 8005e3e:	4d06      	ldr	r5, [pc, #24]	; (8005e58 <_isatty_r+0x1c>)
 8005e40:	2300      	movs	r3, #0
 8005e42:	4604      	mov	r4, r0
 8005e44:	4608      	mov	r0, r1
 8005e46:	602b      	str	r3, [r5, #0]
 8005e48:	f7fb fd25 	bl	8001896 <_isatty>
 8005e4c:	1c43      	adds	r3, r0, #1
 8005e4e:	d102      	bne.n	8005e56 <_isatty_r+0x1a>
 8005e50:	682b      	ldr	r3, [r5, #0]
 8005e52:	b103      	cbz	r3, 8005e56 <_isatty_r+0x1a>
 8005e54:	6023      	str	r3, [r4, #0]
 8005e56:	bd38      	pop	{r3, r4, r5, pc}
 8005e58:	200002c8 	.word	0x200002c8

08005e5c <_lseek_r>:
 8005e5c:	b538      	push	{r3, r4, r5, lr}
 8005e5e:	4d07      	ldr	r5, [pc, #28]	; (8005e7c <_lseek_r+0x20>)
 8005e60:	4604      	mov	r4, r0
 8005e62:	4608      	mov	r0, r1
 8005e64:	4611      	mov	r1, r2
 8005e66:	2200      	movs	r2, #0
 8005e68:	602a      	str	r2, [r5, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f7fb fd1e 	bl	80018ac <_lseek>
 8005e70:	1c43      	adds	r3, r0, #1
 8005e72:	d102      	bne.n	8005e7a <_lseek_r+0x1e>
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	b103      	cbz	r3, 8005e7a <_lseek_r+0x1e>
 8005e78:	6023      	str	r3, [r4, #0]
 8005e7a:	bd38      	pop	{r3, r4, r5, pc}
 8005e7c:	200002c8 	.word	0x200002c8

08005e80 <_read_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	4d07      	ldr	r5, [pc, #28]	; (8005ea0 <_read_r+0x20>)
 8005e84:	4604      	mov	r4, r0
 8005e86:	4608      	mov	r0, r1
 8005e88:	4611      	mov	r1, r2
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	602a      	str	r2, [r5, #0]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f7fb fcac 	bl	80017ec <_read>
 8005e94:	1c43      	adds	r3, r0, #1
 8005e96:	d102      	bne.n	8005e9e <_read_r+0x1e>
 8005e98:	682b      	ldr	r3, [r5, #0]
 8005e9a:	b103      	cbz	r3, 8005e9e <_read_r+0x1e>
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ea0:	200002c8 	.word	0x200002c8

08005ea4 <_init>:
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	bf00      	nop
 8005ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eaa:	bc08      	pop	{r3}
 8005eac:	469e      	mov	lr, r3
 8005eae:	4770      	bx	lr

08005eb0 <_fini>:
 8005eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb2:	bf00      	nop
 8005eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eb6:	bc08      	pop	{r3}
 8005eb8:	469e      	mov	lr, r3
 8005eba:	4770      	bx	lr
